$AUTH_TYPE
$DOCUMENT_ROOT
$GATEWAY_INTERFACE
$GLOBALS
$HTTP_ACCEPT
$HTTP_ACCEPT_CHARSET
$HTTP_ACCEPT_ENCODING
$HTTP_ACCEPT_LANGUAGE
$HTTP_CONNECTION
$HTTP_HOST
$HTTP_REFERER
$HTTP_USER_AGENT
$PATH_TRANSLATED
$PHP_AUTH_PW
$PHP_AUTH_USER
$PHP_SELF
$QUERY_STRING
$REMOTE_ADDR
$REMOTE_HOST
$REMOTE_PORT
$REQUEST_METHOD
$REQUEST_URI
$SCRIPT_FILENAME
$SCRIPT_NAME
$SERVER_ADMIN
$SERVER_NAME
$SERVER_PORT
$SERVER_PROTOCOL
$SERVER_SIGNATURE
$SERVER_SOFTWARE
$_COOKIE
$_ENV
$_FILES
$_GET
$_POST
$_REQUEST
$_SERVER
$_SESSION
#~ php consts -thanks to MingFunWong https://github.com/mingfunwong/scite/blob/master/api/php.consts.api
E_ERROR
E_RECOVERABLE_ERROR
E_WARNING
E_PARSE
E_NOTICE
E_STRICT
E_CORE_ERROR
E_CORE_WARNING
E_COMPILE_ERROR
E_COMPILE_WARNING
E_USER_ERROR
E_USER_WARNING
E_USER_NOTICE
E_ALL
TRUE
FALSE
NULL
ZEND_THREAD_SAFE
PHP_VERSION
PHP_OS
PHP_SAPI
DEFAULT_INCLUDE_PATH
PEAR_INSTALL_DIR
PEAR_EXTENSION_DIR
PHP_EXTENSION_DIR
PHP_PREFIX
PHP_BINDIR
PHP_LIBDIR
PHP_DATADIR
PHP_SYSCONFDIR
PHP_LOCALSTATEDIR
PHP_CONFIG_FILE_PATH
PHP_CONFIG_FILE_SCAN_DIR
PHP_SHLIB_SUFFIX
PHP_EOL
PHP_INT_MAX
PHP_INT_SIZE
PHP_OUTPUT_HANDLER_START
PHP_OUTPUT_HANDLER_CONT
PHP_OUTPUT_HANDLER_END
UPLOAD_ERR_OK
UPLOAD_ERR_INI_SIZE
UPLOAD_ERR_FORM_SIZE
UPLOAD_ERR_PARTIAL
UPLOAD_ERR_NO_FILE
UPLOAD_ERR_NO_TMP_DIR
UPLOAD_ERR_CANT_WRITE
UPLOAD_ERR_EXTENSION
CAL_GREGORIAN
CAL_JULIAN
CAL_JEWISH
CAL_FRENCH
CAL_NUM_CALS
CAL_DOW_DAYNO
CAL_DOW_SHORT
CAL_DOW_LONG
CAL_MONTH_GREGORIAN_SHORT
CAL_MONTH_GREGORIAN_LONG
CAL_MONTH_JULIAN_SHORT
CAL_MONTH_JULIAN_LONG
CAL_MONTH_JEWISH
CAL_MONTH_FRENCH
CAL_EASTER_DEFAULT
CAL_EASTER_ROMAN
CAL_EASTER_ALWAYS_GREGORIAN
CAL_EASTER_ALWAYS_JULIAN
CAL_JEWISH_ADD_ALAFIM_GERESH
CAL_JEWISH_ADD_ALAFIM
CAL_JEWISH_ADD_GERESHAYIM
CLSCTX_INPROC_SERVER
CLSCTX_INPROC_HANDLER
CLSCTX_LOCAL_SERVER
CLSCTX_REMOTE_SERVER
CLSCTX_SERVER
CLSCTX_ALL
VT_NULL
VT_EMPTY
VT_UI1
VT_I1
VT_UI2
VT_I2
VT_UI4
VT_I4
VT_R4
VT_R8
VT_BOOL
VT_ERROR
VT_CY
VT_DATE
VT_BSTR
VT_DECIMAL
VT_UNKNOWN
VT_DISPATCH
VT_VARIANT
VT_INT
VT_UINT
VT_ARRAY
VT_BYREF
CP_ACP
CP_MACCP
CP_OEMCP
CP_UTF7
CP_UTF8
CP_SYMBOL
CP_THREAD_ACP
VARCMP_LT
VARCMP_EQ
VARCMP_GT
VARCMP_NULL
NORM_IGNORECASE
NORM_IGNORENONSPACE
NORM_IGNORESYMBOLS
NORM_IGNOREWIDTH
NORM_IGNOREKANATYPE
DISP_E_DIVBYZERO
DISP_E_OVERFLOW
DISP_E_BADINDEX
MK_E_UNAVAILABLE
INPUT_POST
INPUT_GET
INPUT_COOKIE
INPUT_ENV
INPUT_SERVER
INPUT_SESSION
INPUT_REQUEST
FILTER_FLAG_NONE
FILTER_REQUIRE_SCALAR
FILTER_REQUIRE_ARRAY
FILTER_FORCE_ARRAY
FILTER_NULL_ON_FAILURE
FILTER_VALIDATE_INT
FILTER_VALIDATE_BOOLEAN
FILTER_VALIDATE_FLOAT
FILTER_VALIDATE_REGEXP
FILTER_VALIDATE_URL
FILTER_VALIDATE_EMAIL
FILTER_VALIDATE_IP
FILTER_DEFAULT
FILTER_UNSAFE_RAW
FILTER_SANITIZE_STRING
FILTER_SANITIZE_STRIPPED
FILTER_SANITIZE_ENCODED
FILTER_SANITIZE_SPECIAL_CHARS
FILTER_SANITIZE_EMAIL
FILTER_SANITIZE_URL
FILTER_SANITIZE_NUMBER_INT
FILTER_SANITIZE_NUMBER_FLOAT
FILTER_SANITIZE_MAGIC_QUOTES
FILTER_CALLBACK
FILTER_FLAG_ALLOW_OCTAL
FILTER_FLAG_ALLOW_HEX
FILTER_FLAG_STRIP_LOW
FILTER_FLAG_STRIP_HIGH
FILTER_FLAG_ENCODE_LOW
FILTER_FLAG_ENCODE_HIGH
FILTER_FLAG_ENCODE_AMP
FILTER_FLAG_NO_ENCODE_QUOTES
FILTER_FLAG_EMPTY_STRING_NULL
FILTER_FLAG_ALLOW_FRACTION
FILTER_FLAG_ALLOW_THOUSAND
FILTER_FLAG_ALLOW_SCIENTIFIC
FILTER_FLAG_SCHEME_REQUIRED
FILTER_FLAG_HOST_REQUIRED
FILTER_FLAG_PATH_REQUIRED
FILTER_FLAG_QUERY_REQUIRED
FILTER_FLAG_IPV4
FILTER_FLAG_IPV6
FILTER_FLAG_NO_RES_RANGE
FILTER_FLAG_NO_PRIV_RANGE
FTP_ASCII
FTP_TEXT
FTP_BINARY
FTP_IMAGE
FTP_AUTORESUME
FTP_TIMEOUT_SEC
FTP_AUTOSEEK
FTP_FAILED
FTP_FINISHED
FTP_MOREDATA
HASH_HMAC
ICONV_IMPL
ICONV_VERSION
ICONV_MIME_DECODE_STRICT
ICONV_MIME_DECODE_CONTINUE_ON_ERROR
ODBC_TYPE
ODBC_BINMODE_PASSTHRU
ODBC_BINMODE_RETURN
ODBC_BINMODE_CONVERT
SQL_ODBC_CURSORS
SQL_CUR_USE_DRIVER
SQL_CUR_USE_IF_NEEDED
SQL_CUR_USE_ODBC
SQL_CONCURRENCY
SQL_CONCUR_READ_ONLY
SQL_CONCUR_LOCK
SQL_CONCUR_ROWVER
SQL_CONCUR_VALUES
SQL_CURSOR_TYPE
SQL_CURSOR_FORWARD_ONLY
SQL_CURSOR_KEYSET_DRIVEN
SQL_CURSOR_DYNAMIC
SQL_CURSOR_STATIC
SQL_KEYSET_SIZE
SQL_FETCH_FIRST
SQL_FETCH_NEXT
SQL_CHAR
SQL_VARCHAR
SQL_LONGVARCHAR
SQL_DECIMAL
SQL_NUMERIC
SQL_BIT
SQL_TINYINT
SQL_SMALLINT
SQL_INTEGER
SQL_BIGINT
SQL_REAL
SQL_FLOAT
SQL_DOUBLE
SQL_BINARY
SQL_VARBINARY
SQL_LONGVARBINARY
SQL_DATE
SQL_TIME
SQL_TIMESTAMP
PREG_PATTERN_ORDER
PREG_SET_ORDER
PREG_OFFSET_CAPTURE
PREG_SPLIT_NO_EMPTY
PREG_SPLIT_DELIM_CAPTURE
PREG_SPLIT_OFFSET_CAPTURE
PREG_GREP_INVERT
PREG_NO_ERROR
PREG_INTERNAL_ERROR
PREG_BACKTRACK_LIMIT_ERROR
PREG_RECURSION_LIMIT_ERROR
PREG_BAD_UTF8_ERROR
PCRE_VERSION
DATE_ATOM
DATE_COOKIE
DATE_ISO8601
DATE_RFC822
DATE_RFC850
DATE_RFC1036
DATE_RFC1123
DATE_RFC2822
DATE_RFC3339
DATE_RSS
DATE_W3C
SUNFUNCS_RET_TIMESTAMP
SUNFUNCS_RET_STRING
SUNFUNCS_RET_DOUBLE
LIBXML_VERSION
LIBXML_DOTTED_VERSION
LIBXML_NOENT
LIBXML_DTDLOAD
LIBXML_DTDATTR
LIBXML_DTDVALID
LIBXML_NOERROR
LIBXML_NOWARNING
LIBXML_NOBLANKS
LIBXML_XINCLUDE
LIBXML_NSCLEAN
LIBXML_NOCDATA
LIBXML_NONET
LIBXML_COMPACT
LIBXML_NOXMLDECL
LIBXML_NOEMPTYTAG
LIBXML_ERR_NONE
LIBXML_ERR_WARNING
LIBXML_ERR_ERROR
LIBXML_ERR_FATAL
CONNECTION_ABORTED
CONNECTION_NORMAL
CONNECTION_TIMEOUT
INI_USER
INI_PERDIR
INI_SYSTEM
INI_ALL
PHP_URL_SCHEME
PHP_URL_HOST
PHP_URL_PORT
PHP_URL_USER
PHP_URL_PASS
PHP_URL_PATH
PHP_URL_QUERY
PHP_URL_FRAGMENT
M_E
M_LOG2E
M_LOG10E
M_LN2
M_LN10
M_PI
M_PI_2
M_PI_4
M_1_PI
M_2_PI
M_SQRTPI
M_2_SQRTPI
M_LNPI
M_EULER
M_SQRT2
M_SQRT1_2
M_SQRT3
INF
NAN
INFO_GENERAL
INFO_CREDITS
INFO_CONFIGURATION
INFO_MODULES
INFO_ENVIRONMENT
INFO_VARIABLES
INFO_LICENSE
INFO_ALL
CREDITS_GROUP
CREDITS_GENERAL
CREDITS_SAPI
CREDITS_MODULES
CREDITS_DOCS
CREDITS_FULLPAGE
CREDITS_QA
CREDITS_ALL
HTML_SPECIALCHARS
HTML_ENTITIES
ENT_COMPAT
ENT_QUOTES
ENT_NOQUOTES
STR_PAD_LEFT
STR_PAD_RIGHT
STR_PAD_BOTH
PATHINFO_DIRNAME
PATHINFO_BASENAME
PATHINFO_EXTENSION
PATHINFO_FILENAME
CHAR_MAX
LC_CTYPE
LC_NUMERIC
LC_TIME
LC_COLLATE
LC_MONETARY
LC_ALL
SEEK_SET
SEEK_CUR
SEEK_END
LOCK_SH
LOCK_EX
LOCK_UN
LOCK_NB
STREAM_NOTIFY_CONNECT
STREAM_NOTIFY_AUTH_REQUIRED
STREAM_NOTIFY_AUTH_RESULT
STREAM_NOTIFY_MIME_TYPE_IS
STREAM_NOTIFY_FILE_SIZE_IS
STREAM_NOTIFY_REDIRECTED
STREAM_NOTIFY_PROGRESS
STREAM_NOTIFY_FAILURE
STREAM_NOTIFY_COMPLETED
STREAM_NOTIFY_RESOLVE
STREAM_NOTIFY_SEVERITY_INFO
STREAM_NOTIFY_SEVERITY_WARN
STREAM_NOTIFY_SEVERITY_ERR
STREAM_FILTER_READ
STREAM_FILTER_WRITE
STREAM_FILTER_ALL
STREAM_CLIENT_PERSISTENT
STREAM_CLIENT_ASYNC_CONNECT
STREAM_CLIENT_CONNECT
STREAM_CRYPTO_METHOD_SSLv2_CLIENT
STREAM_CRYPTO_METHOD_SSLv3_CLIENT
STREAM_CRYPTO_METHOD_SSLv23_CLIENT
STREAM_CRYPTO_METHOD_TLS_CLIENT
STREAM_CRYPTO_METHOD_SSLv2_SERVER
STREAM_CRYPTO_METHOD_SSLv3_SERVER
STREAM_CRYPTO_METHOD_SSLv23_SERVER
STREAM_CRYPTO_METHOD_TLS_SERVER
STREAM_SHUT_RD
STREAM_SHUT_WR
STREAM_SHUT_RDWR
STREAM_PF_INET
STREAM_PF_INET6
STREAM_PF_UNIX
STREAM_IPPROTO_IP
STREAM_IPPROTO_TCP
STREAM_IPPROTO_UDP
STREAM_IPPROTO_ICMP
STREAM_IPPROTO_RAW
STREAM_SOCK_STREAM
STREAM_SOCK_DGRAM
STREAM_SOCK_RAW
STREAM_SOCK_SEQPACKET
STREAM_SOCK_RDM
STREAM_PEEK
STREAM_OOB
STREAM_SERVER_BIND
STREAM_SERVER_LISTEN
FILE_USE_INCLUDE_PATH
FILE_IGNORE_NEW_LINES
FILE_SKIP_EMPTY_LINES
FILE_APPEND
FILE_NO_DEFAULT_CONTEXT
PSFS_PASS_ON
PSFS_FEED_ME
PSFS_ERR_FATAL
PSFS_FLAG_NORMAL
PSFS_FLAG_FLUSH_INC
PSFS_FLAG_FLUSH_CLOSE
CRYPT_SALT_LENGTH
CRYPT_STD_DES
CRYPT_EXT_DES
CRYPT_MD5
CRYPT_BLOWFISH
DIRECTORY_SEPARATOR
PATH_SEPARATOR
GLOB_BRACE
GLOB_MARK
GLOB_NOSORT
GLOB_NOCHECK
GLOB_NOESCAPE
GLOB_ERR
GLOB_ONLYDIR
GLOB_AVAILABLE_FLAGS
LOG_EMERG
LOG_ALERT
LOG_CRIT
LOG_ERR
LOG_WARNING
LOG_NOTICE
LOG_INFO
LOG_DEBUG
LOG_KERN
LOG_USER
LOG_MAIL
LOG_DAEMON
LOG_AUTH
LOG_SYSLOG
LOG_LPR
LOG_NEWS
LOG_UUCP
LOG_CRON
LOG_AUTHPRIV
LOG_PID
LOG_CONS
LOG_ODELAY
LOG_NDELAY
LOG_NOWAIT
LOG_PERROR
EXTR_OVERWRITE
EXTR_SKIP
EXTR_PREFIX_SAME
EXTR_PREFIX_ALL
EXTR_PREFIX_INVALID
EXTR_PREFIX_IF_EXISTS
EXTR_IF_EXISTS
EXTR_REFS
SORT_ASC
SORT_DESC
SORT_REGULAR
SORT_NUMERIC
SORT_STRING
SORT_LOCALE_STRING
CASE_LOWER
CASE_UPPER
COUNT_NORMAL
COUNT_RECURSIVE
ASSERT_ACTIVE
ASSERT_CALLBACK
ASSERT_BAIL
ASSERT_WARNING
ASSERT_QUIET_EVAL
STREAM_USE_PATH
STREAM_IGNORE_URL
STREAM_ENFORCE_SAFE_MODE
STREAM_REPORT_ERRORS
STREAM_MUST_SEEK
STREAM_URL_STAT_LINK
STREAM_URL_STAT_QUIET
STREAM_MKDIR_RECURSIVE
STREAM_IS_URL
IMAGETYPE_GIF
IMAGETYPE_JPEG
IMAGETYPE_PNG
IMAGETYPE_SWF
IMAGETYPE_PSD
IMAGETYPE_BMP
IMAGETYPE_TIFF_II
IMAGETYPE_TIFF_MM
IMAGETYPE_JPC
IMAGETYPE_JP2
IMAGETYPE_JPX
IMAGETYPE_JB2
IMAGETYPE_SWC
IMAGETYPE_IFF
IMAGETYPE_WBMP
IMAGETYPE_JPEG2000
IMAGETYPE_XBM
T_REQUIRE_ONCE
T_REQUIRE
T_EVAL
T_INCLUDE_ONCE
T_INCLUDE
T_LOGICAL_OR
T_LOGICAL_XOR
T_LOGICAL_AND
T_PRINT
T_SR_EQUAL
T_SL_EQUAL
T_XOR_EQUAL
T_OR_EQUAL
T_AND_EQUAL
T_MOD_EQUAL
T_CONCAT_EQUAL
T_DIV_EQUAL
T_MUL_EQUAL
T_MINUS_EQUAL
T_PLUS_EQUAL
T_BOOLEAN_OR
T_BOOLEAN_AND
T_IS_NOT_IDENTICAL
T_IS_IDENTICAL
T_IS_NOT_EQUAL
T_IS_EQUAL
T_IS_GREATER_OR_EQUAL
T_IS_SMALLER_OR_EQUAL
T_SR
T_SL
T_INSTANCEOF
T_UNSET_CAST
T_BOOL_CAST
T_OBJECT_CAST
T_ARRAY_CAST
T_STRING_CAST
T_DOUBLE_CAST
T_INT_CAST
T_DEC
T_INC
T_CLONE
T_NEW
T_EXIT
T_IF
T_ELSEIF
T_ELSE
T_ENDIF
T_LNUMBER
T_DNUMBER
T_STRING
T_STRING_VARNAME
T_VARIABLE
T_NUM_STRING
T_INLINE_HTML
T_CHARACTER
T_BAD_CHARACTER
T_ENCAPSED_AND_WHITESPACE
T_CONSTANT_ENCAPSED_STRING
T_ECHO
T_DO
T_WHILE
T_ENDWHILE
T_FOR
T_ENDFOR
T_FOREACH
T_ENDFOREACH
T_DECLARE
T_ENDDECLARE
T_AS
T_SWITCH
T_ENDSWITCH
T_CASE
T_DEFAULT
T_BREAK
T_CONTINUE
T_FUNCTION
T_CONST
T_RETURN
T_TRY
T_CATCH
T_THROW
T_USE
T_GLOBAL
T_PUBLIC
T_PROTECTED
T_PRIVATE
T_FINAL
T_ABSTRACT
T_STATIC
T_VAR
T_UNSET
T_ISSET
T_EMPTY
T_HALT_COMPILER
T_CLASS
T_INTERFACE
T_EXTENDS
T_IMPLEMENTS
T_OBJECT_OPERATOR
T_DOUBLE_ARROW
T_LIST
T_ARRAY
T_CLASS_C
T_METHOD_C
T_FUNC_C
T_LINE
T_FILE
T_COMMENT
T_DOC_COMMENT
T_OPEN_TAG
T_OPEN_TAG_WITH_ECHO
T_CLOSE_TAG
T_WHITESPACE
T_START_HEREDOC
T_END_HEREDOC
T_DOLLAR_OPEN_CURLY_BRACES
T_CURLY_OPEN
T_PAAMAYIM_NEKUDOTAYIM
T_DOUBLE_COLON
FORCE_GZIP
FORCE_DEFLATE
XML_ELEMENT_NODE
XML_ATTRIBUTE_NODE
XML_TEXT_NODE
XML_CDATA_SECTION_NODE
XML_ENTITY_REF_NODE
XML_ENTITY_NODE
XML_PI_NODE
XML_COMMENT_NODE
XML_DOCUMENT_NODE
XML_DOCUMENT_TYPE_NODE
XML_DOCUMENT_FRAG_NODE
XML_NOTATION_NODE
XML_HTML_DOCUMENT_NODE
XML_DTD_NODE
XML_ELEMENT_DECL_NODE
XML_ATTRIBUTE_DECL_NODE
XML_ENTITY_DECL_NODE
XML_NAMESPACE_DECL_NODE
XML_LOCAL_NAMESPACE
XML_ATTRIBUTE_CDATA
XML_ATTRIBUTE_ID
XML_ATTRIBUTE_IDREF
XML_ATTRIBUTE_IDREFS
XML_ATTRIBUTE_ENTITY
XML_ATTRIBUTE_NMTOKEN
XML_ATTRIBUTE_NMTOKENS
XML_ATTRIBUTE_ENUMERATION
XML_ATTRIBUTE_NOTATION
DOM_PHP_ERR
DOM_INDEX_SIZE_ERR
DOMSTRING_SIZE_ERR
DOM_HIERARCHY_REQUEST_ERR
DOM_WRONG_DOCUMENT_ERR
DOM_INVALID_CHARACTER_ERR
DOM_NO_DATA_ALLOWED_ERR
DOM_NO_MODIFICATION_ALLOWED_ERR
DOM_NOT_FOUND_ERR
DOM_NOT_SUPPORTED_ERR
DOM_INUSE_ATTRIBUTE_ERR
DOM_INVALID_STATE_ERR
DOM_SYNTAX_ERR
DOM_INVALID_MODIFICATION_ERR
DOM_NAMESPACE_ERR
DOM_INVALID_ACCESS_ERR
DOM_VALIDATION_ERR
XML_ERROR_NONE
XML_ERROR_NO_MEMORY
XML_ERROR_SYNTAX
XML_ERROR_NO_ELEMENTS
XML_ERROR_INVALID_TOKEN
XML_ERROR_UNCLOSED_TOKEN
XML_ERROR_PARTIAL_CHAR
XML_ERROR_TAG_MISMATCH
XML_ERROR_DUPLICATE_ATTRIBUTE
XML_ERROR_JUNK_AFTER_DOC_ELEMENT
XML_ERROR_PARAM_ENTITY_REF
XML_ERROR_UNDEFINED_ENTITY
XML_ERROR_RECURSIVE_ENTITY_REF
XML_ERROR_ASYNC_ENTITY
XML_ERROR_BAD_CHAR_REF
XML_ERROR_BINARY_ENTITY_REF
XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF
XML_ERROR_MISPLACED_XML_PI
XML_ERROR_UNKNOWN_ENCODING
XML_ERROR_INCORRECT_ENCODING
XML_ERROR_UNCLOSED_CDATA_SECTION
XML_ERROR_EXTERNAL_ENTITY_HANDLING
XML_OPTION_CASE_FOLDING
XML_OPTION_TARGET_ENCODING
XML_OPTION_SKIP_TAGSTART
XML_OPTION_SKIP_WHITE
XML_SAX_IMPL
CURLOPT_DNS_USE_GLOBAL_CACHE
CURLOPT_DNS_CACHE_TIMEOUT
CURLOPT_PORT
CURLOPT_FILE
CURLOPT_READDATA
CURLOPT_INFILE
CURLOPT_INFILESIZE
CURLOPT_URL
CURLOPT_PROXY
CURLOPT_VERBOSE
CURLOPT_HEADER
CURLOPT_HTTPHEADER
CURLOPT_NOPROGRESS
CURLOPT_NOBODY
CURLOPT_FAILONERROR
CURLOPT_UPLOAD
CURLOPT_POST
CURLOPT_FTPLISTONLY
CURLOPT_FTPAPPEND
CURLOPT_NETRC
CURLOPT_FOLLOWLOCATION
CURLOPT_PUT
CURLOPT_USERPWD
CURLOPT_PROXYUSERPWD
CURLOPT_RANGE
CURLOPT_TIMEOUT
CURLOPT_POSTFIELDS
CURLOPT_REFERER
CURLOPT_USERAGENT
CURLOPT_FTPPORT
CURLOPT_FTP_USE_EPSV
CURLOPT_LOW_SPEED_LIMIT
CURLOPT_LOW_SPEED_TIME
CURLOPT_RESUME_FROM
CURLOPT_COOKIE
CURLOPT_COOKIESESSION
CURLOPT_AUTOREFERER
CURLOPT_SSLCERT
CURLOPT_SSLCERTPASSWD
CURLOPT_WRITEHEADER
CURLOPT_SSL_VERIFYHOST
CURLOPT_COOKIEFILE
CURLOPT_SSLVERSION
CURLOPT_TIMECONDITION
CURLOPT_TIMEVALUE
CURLOPT_CUSTOMREQUEST
CURLOPT_STDERR
CURLOPT_TRANSFERTEXT
CURLOPT_RETURNTRANSFER
CURLOPT_QUOTE
CURLOPT_POSTQUOTE
CURLOPT_INTERFACE
CURLOPT_KRB4LEVEL
CURLOPT_HTTPPROXYTUNNEL
CURLOPT_FILETIME
CURLOPT_WRITEFUNCTION
CURLOPT_READFUNCTION
CURLOPT_HEADERFUNCTION
CURLOPT_MAXREDIRS
CURLOPT_MAXCONNECTS
CURLOPT_CLOSEPOLICY
CURLOPT_FRESH_CONNECT
CURLOPT_FORBID_REUSE
CURLOPT_RANDOM_FILE
CURLOPT_EGDSOCKET
CURLOPT_CONNECTTIMEOUT
CURLOPT_SSL_VERIFYPEER
CURLOPT_CAINFO
CURLOPT_CAPATH
CURLOPT_COOKIEJAR
CURLOPT_SSL_CIPHER_LIST
CURLOPT_BINARYTRANSFER
CURLOPT_NOSIGNAL
CURLOPT_PROXYTYPE
CURLOPT_BUFFERSIZE
CURLOPT_HTTPGET
CURLOPT_HTTP_VERSION
CURLOPT_SSLKEY
CURLOPT_SSLKEYTYPE
CURLOPT_SSLKEYPASSWD
CURLOPT_SSLENGINE
CURLOPT_SSLENGINE_DEFAULT
CURLOPT_SSLCERTTYPE
CURLOPT_CRLF
CURLOPT_ENCODING
CURLOPT_PROXYPORT
CURLOPT_UNRESTRICTED_AUTH
CURLOPT_FTP_USE_EPRT
CURLOPT_TCP_NODELAY
CURLOPT_HTTP200ALIASES
CURL_TIMECOND_IFMODSINCE
CURL_TIMECOND_IFUNMODSINCE
CURL_TIMECOND_LASTMOD
CURLOPT_HTTPAUTH
CURLAUTH_BASIC
CURLAUTH_DIGEST
CURLAUTH_GSSNEGOTIATE
CURLAUTH_NTLM
CURLAUTH_ANY
CURLAUTH_ANYSAFE
CURLOPT_PROXYAUTH
CURLOPT_FTP_CREATE_MISSING_DIRS
CURLOPT_PRIVATE
CURLCLOSEPOLICY_LEAST_RECENTLY_USED
CURLCLOSEPOLICY_LEAST_TRAFFIC
CURLCLOSEPOLICY_SLOWEST
CURLCLOSEPOLICY_CALLBACK
CURLCLOSEPOLICY_OLDEST
CURLINFO_EFFECTIVE_URL
CURLINFO_HTTP_CODE
CURLINFO_HEADER_SIZE
CURLINFO_REQUEST_SIZE
CURLINFO_TOTAL_TIME
CURLINFO_NAMELOOKUP_TIME
CURLINFO_CONNECT_TIME
CURLINFO_PRETRANSFER_TIME
CURLINFO_SIZE_UPLOAD
CURLINFO_SIZE_DOWNLOAD
CURLINFO_SPEED_DOWNLOAD
CURLINFO_SPEED_UPLOAD
CURLINFO_FILETIME
CURLINFO_SSL_VERIFYRESULT
CURLINFO_CONTENT_LENGTH_DOWNLOAD
CURLINFO_CONTENT_LENGTH_UPLOAD
CURLINFO_STARTTRANSFER_TIME
CURLINFO_CONTENT_TYPE
CURLINFO_REDIRECT_TIME
CURLINFO_REDIRECT_COUNT
CURLINFO_HEADER_OUT
CURLINFO_PRIVATE
CURL_VERSION_IPV6
CURL_VERSION_KERBEROS4
CURL_VERSION_SSL
CURL_VERSION_LIBZ
CURLVERSION_NOW
CURLE_OK
CURLE_UNSUPPORTED_PROTOCOL
CURLE_FAILED_INIT
CURLE_URL_MALFORMAT
CURLE_URL_MALFORMAT_USER
CURLE_COULDNT_RESOLVE_PROXY
CURLE_COULDNT_RESOLVE_HOST
CURLE_COULDNT_CONNECT
CURLE_FTP_WEIRD_SERVER_REPLY
CURLE_FTP_ACCESS_DENIED
CURLE_FTP_USER_PASSWORD_INCORRECT
CURLE_FTP_WEIRD_PASS_REPLY
CURLE_FTP_WEIRD_USER_REPLY
CURLE_FTP_WEIRD_PASV_REPLY
CURLE_FTP_WEIRD_227_FORMAT
CURLE_FTP_CANT_GET_HOST
CURLE_FTP_CANT_RECONNECT
CURLE_FTP_COULDNT_SET_BINARY
CURLE_PARTIAL_FILE
CURLE_FTP_COULDNT_RETR_FILE
CURLE_FTP_WRITE_ERROR
CURLE_FTP_QUOTE_ERROR
CURLE_HTTP_NOT_FOUND
CURLE_WRITE_ERROR
CURLE_MALFORMAT_USER
CURLE_FTP_COULDNT_STOR_FILE
CURLE_READ_ERROR
CURLE_OUT_OF_MEMORY
CURLE_OPERATION_TIMEOUTED
CURLE_FTP_COULDNT_SET_ASCII
CURLE_FTP_PORT_FAILED
CURLE_FTP_COULDNT_USE_REST
CURLE_FTP_COULDNT_GET_SIZE
CURLE_HTTP_RANGE_ERROR
CURLE_HTTP_POST_ERROR
CURLE_SSL_CONNECT_ERROR
CURLE_FTP_BAD_DOWNLOAD_RESUME
CURLE_FILE_COULDNT_READ_FILE
CURLE_LDAP_CANNOT_BIND
CURLE_LDAP_SEARCH_FAILED
CURLE_LIBRARY_NOT_FOUND
CURLE_FUNCTION_NOT_FOUND
CURLE_ABORTED_BY_CALLBACK
CURLE_BAD_FUNCTION_ARGUMENT
CURLE_BAD_CALLING_ORDER
CURLE_HTTP_PORT_FAILED
CURLE_BAD_PASSWORD_ENTERED
CURLE_TOO_MANY_REDIRECTS
CURLE_UNKNOWN_TELNET_OPTION
CURLE_TELNET_OPTION_SYNTAX
CURLE_OBSOLETE
CURLE_SSL_PEER_CERTIFICATE
CURLE_GOT_NOTHING
CURLE_SSL_ENGINE_NOTFOUND
CURLE_SSL_ENGINE_SETFAILED
CURLE_SEND_ERROR
CURLE_RECV_ERROR
CURLE_SHARE_IN_USE
CURLE_SSL_CERTPROBLEM
CURLE_SSL_CIPHER
CURLE_SSL_CACERT
CURLE_BAD_CONTENT_ENCODING
CURLE_LDAP_INVALID_URL
CURLE_FILESIZE_EXCEEDED
CURLE_FTP_SSL_FAILED
CURLPROXY_HTTP
CURLPROXY_SOCKS5
CURL_NETRC_OPTIONAL
CURL_NETRC_IGNORED
CURL_NETRC_REQUIRED
CURL_HTTP_VERSION_NONE
CURL_HTTP_VERSION_1_0
CURL_HTTP_VERSION_1_1
CURLM_CALL_MULTI_PERFORM
CURLM_OK
CURLM_BAD_HANDLE
CURLM_BAD_EASY_HANDLE
CURLM_OUT_OF_MEMORY
CURLM_INTERNAL_ERROR
CURLMSG_DONE
CURLOPT_FTPSSLAUTH
CURLFTPAUTH_DEFAULT
CURLFTPAUTH_SSL
CURLFTPAUTH_TLS
CURLOPT_FTP_SSL
CURLFTPSSL_NONE
CURLFTPSSL_TRY
CURLFTPSSL_CONTROL
CURLFTPSSL_ALL
IMG_GIF
IMG_JPG
IMG_JPEG
IMG_PNG
IMG_WBMP
IMG_XPM
IMG_COLOR_TILED
IMG_COLOR_STYLED
IMG_COLOR_BRUSHED
IMG_COLOR_STYLEDBRUSHED
IMG_COLOR_TRANSPARENT
IMG_ARC_ROUNDED
IMG_ARC_PIE
IMG_ARC_CHORD
IMG_ARC_NOFILL
IMG_ARC_EDGED
IMG_GD2_RAW
IMG_GD2_COMPRESSED
IMG_EFFECT_REPLACE
IMG_EFFECT_ALPHABLEND
IMG_EFFECT_NORMAL
IMG_EFFECT_OVERLAY
GD_BUNDLED
IMG_FILTER_NEGATE
IMG_FILTER_GRAYSCALE
IMG_FILTER_BRIGHTNESS
IMG_FILTER_CONTRAST
IMG_FILTER_COLORIZE
IMG_FILTER_EDGEDETECT
IMG_FILTER_GAUSSIAN_BLUR
IMG_FILTER_SELECTIVE_BLUR
IMG_FILTER_EMBOSS
IMG_FILTER_MEAN_REMOVAL
IMG_FILTER_SMOOTH
GD_VERSION
GD_MAJOR_VERSION
GD_MINOR_VERSION
GD_RELEASE_VERSION
GD_EXTRA_VERSION
PNG_NO_FILTER
PNG_FILTER_NONE
PNG_FILTER_SUB
PNG_FILTER_UP
PNG_FILTER_AVG
PNG_FILTER_PAETH
PNG_ALL_FILTERS
MB_OVERLOAD_MAIL
MB_OVERLOAD_STRING
MB_OVERLOAD_REGEX
MB_CASE_UPPER
MB_CASE_LOWER
MB_CASE_TITLE
MCRYPT_ENCRYPT
MCRYPT_DECRYPT
MCRYPT_DEV_RANDOM
MCRYPT_DEV_URANDOM
MCRYPT_RAND
MCRYPT_3DES
MCRYPT_ARCFOUR_IV
MCRYPT_ARCFOUR
MCRYPT_BLOWFISH
MCRYPT_BLOWFISH_COMPAT
MCRYPT_CAST_128
MCRYPT_CAST_256
MCRYPT_CRYPT
MCRYPT_DES
MCRYPT_ENIGNA
MCRYPT_GOST
MCRYPT_LOKI97
MCRYPT_PANAMA
MCRYPT_RC2
MCRYPT_RIJNDAEL_128
MCRYPT_RIJNDAEL_192
MCRYPT_RIJNDAEL_256
MCRYPT_SAFER64
MCRYPT_SAFER128
MCRYPT_SAFERPLUS
MCRYPT_SERPENT
MCRYPT_THREEWAY
MCRYPT_TRIPLEDES
MCRYPT_TWOFISH
MCRYPT_WAKE
MCRYPT_XTEA
MCRYPT_IDEA
MCRYPT_MARS
MCRYPT_RC6
MCRYPT_SKIPJACK
MCRYPT_MODE_CBC
MCRYPT_MODE_CFB
MCRYPT_MODE_ECB
MCRYPT_MODE_NOFB
MCRYPT_MODE_OFB
MCRYPT_MODE_STREAM
MYSQL_ASSOC
MYSQL_NUM
MYSQL_BOTH
MYSQL_CLIENT_COMPRESS
MYSQL_CLIENT_SSL
MYSQL_CLIENT_INTERACTIVE
MYSQL_CLIENT_IGNORE_SPACE
MYSQLI_READ_DEFAULT_GROUP
MYSQLI_READ_DEFAULT_FILE
MYSQLI_OPT_CONNECT_TIMEOUT
MYSQLI_OPT_LOCAL_INFILE
MYSQLI_INIT_COMMAND
MYSQLI_CLIENT_SSL
MYSQLI_CLIENT_COMPRESS
MYSQLI_CLIENT_INTERACTIVE
MYSQLI_CLIENT_IGNORE_SPACE
MYSQLI_CLIENT_NO_SCHEMA
MYSQLI_CLIENT_FOUND_ROWS
MYSQLI_STORE_RESULT
MYSQLI_USE_RESULT
MYSQLI_ASSOC
MYSQLI_NUM
MYSQLI_BOTH
MYSQLI_STMT_ATTR_UPDATE_MAX_LENGTH
MYSQLI_STMT_ATTR_CURSOR_TYPE
MYSQLI_CURSOR_TYPE_NO_CURSOR
MYSQLI_CURSOR_TYPE_READ_ONLY
MYSQLI_CURSOR_TYPE_FOR_UPDATE
MYSQLI_CURSOR_TYPE_SCROLLABLE
MYSQLI_STMT_ATTR_PREFETCH_ROWS
MYSQLI_NOT_NULL_FLAG
MYSQLI_PRI_KEY_FLAG
MYSQLI_UNIQUE_KEY_FLAG
MYSQLI_MULTIPLE_KEY_FLAG
MYSQLI_BLOB_FLAG
MYSQLI_UNSIGNED_FLAG
MYSQLI_ZEROFILL_FLAG
MYSQLI_AUTO_INCREMENT_FLAG
MYSQLI_TIMESTAMP_FLAG
MYSQLI_SET_FLAG
MYSQLI_NUM_FLAG
MYSQLI_PART_KEY_FLAG
MYSQLI_GROUP_FLAG
MYSQLI_TYPE_DECIMAL
MYSQLI_TYPE_TINY
MYSQLI_TYPE_SHORT
MYSQLI_TYPE_LONG
MYSQLI_TYPE_FLOAT
MYSQLI_TYPE_DOUBLE
MYSQLI_TYPE_NULL
MYSQLI_TYPE_TIMESTAMP
MYSQLI_TYPE_LONGLONG
MYSQLI_TYPE_INT24
MYSQLI_TYPE_DATE
MYSQLI_TYPE_TIME
MYSQLI_TYPE_DATETIME
MYSQLI_TYPE_YEAR
MYSQLI_TYPE_NEWDATE
MYSQLI_TYPE_ENUM
MYSQLI_TYPE_SET
MYSQLI_TYPE_TINY_BLOB
MYSQLI_TYPE_MEDIUM_BLOB
MYSQLI_TYPE_LONG_BLOB
MYSQLI_TYPE_BLOB
MYSQLI_TYPE_VAR_STRING
MYSQLI_TYPE_STRING
MYSQLI_TYPE_CHAR
MYSQLI_TYPE_INTERVAL
MYSQLI_TYPE_GEOMETRY
MYSQLI_TYPE_NEWDECIMAL
MYSQLI_TYPE_BIT
MYSQLI_SET_CHARSET_NAME
MYSQLI_RPL_MASTER
MYSQLI_RPL_SLAVE
MYSQLI_RPL_ADMIN
MYSQLI_NO_DATA
MYSQLI_DATA_TRUNCATED
MYSQLI_REPORT_INDEX
MYSQLI_REPORT_ERROR
MYSQLI_REPORT_STRICT
MYSQLI_REPORT_ALL
MYSQLI_REPORT_OFF
SOAP_1_1
SOAP_1_2
SOAP_PERSISTENCE_SESSION
SOAP_PERSISTENCE_REQUEST
SOAP_FUNCTIONS_ALL
SOAP_ENCODED
SOAP_LITERAL
SOAP_RPC
SOAP_DOCUMENT
SOAP_ACTOR_NEXT
SOAP_ACTOR_NONE
SOAP_ACTOR_UNLIMATERECEIVER
SOAP_COMPRESSION_ACCEPT
SOAP_COMPRESSION_GZIP
SOAP_COMPRESSION_DEFLATE
SOAP_AUTHENTICATION_BASIC
SOAP_AUTHENTICATION_DIGEST
UNKNOWN_TYPE
XSD_STRING
XSD_BOOLEAN
XSD_DECIMAL
XSD_FLOAT
XSD_DOUBLE
XSD_DURATION
XSD_DATETIME
XSD_TIME
XSD_DATE
XSD_GYEARMONTH
XSD_GYEAR
XSD_GMONTHDAY
XSD_GDAY
XSD_GMONTH
XSD_HEXBINARY
XSD_BASE64BINARY
XSD_ANYURI
XSD_QNAME
XSD_NOTATION
XSD_NORMALIZEDSTRING
XSD_TOKEN
XSD_LANGUAGE
XSD_NMTOKEN
XSD_NAME
XSD_NCNAME
XSD_ID
XSD_IDREF
XSD_IDREFS
XSD_ENTITY
XSD_ENTITIES
XSD_INTEGER
XSD_NONPOSITIVEINTEGER
XSD_NEGATIVEINTEGER
XSD_LONG
XSD_INT
XSD_SHORT
XSD_BYTE
XSD_NONNEGATIVEINTEGER
XSD_UNSIGNEDLONG
XSD_UNSIGNEDINT
XSD_UNSIGNEDSHORT
XSD_UNSIGNEDBYTE
XSD_POSITIVEINTEGER
XSD_NMTOKENS
XSD_ANYTYPE
XSD_ANYXML
APACHE_MAP
SOAP_ENC_OBJECT
SOAP_ENC_ARRAY
XSD_1999_TIMEINSTANT
XSD_NAMESPACE
XSD_1999_NAMESPACE
SOAP_SINGLE_ELEMENT_ARRAYS
SOAP_WAIT_ONE_WAY_CALLS
SOAP_USE_XSI_ARRAY_TYPE
WSDL_CACHE_NONE
WSDL_CACHE_DISK
WSDL_CACHE_MEMORY
WSDL_CACHE_BOTH
AF_UNIX
AF_INET
AF_INET6
SOCK_STREAM
SOCK_DGRAM
SOCK_RAW
SOCK_SEQPACKET
SOCK_RDM
MSG_OOB
MSG_WAITALL
MSG_PEEK
MSG_DONTROUTE
SO_DEBUG
SO_REUSEADDR
SO_KEEPALIVE
SO_DONTROUTE
SO_LINGER
SO_BROADCAST
SO_OOBINLINE
SO_SNDBUF
SO_RCVBUF
SO_SNDLOWAT
SO_RCVLOWAT
SO_SNDTIMEO
SO_RCVTIMEO
SO_TYPE
SO_ERROR
SOL_SOCKET
SOMAXCONN
PHP_NORMAL_READ
PHP_BINARY_READ
SOCKET_EINTR
SOCKET_EBADF
SOCKET_EACCES
SOCKET_EFAULT
SOCKET_EINVAL
SOCKET_EMFILE
SOCKET_EWOULDBLOCK
SOCKET_EINPROGRESS
SOCKET_EALREADY
SOCKET_ENOTSOCK
SOCKET_EDESTADDRREQ
SOCKET_EMSGSIZE
SOCKET_EPROTOTYPE
SOCKET_ENOPROTOOPT
SOCKET_EPROTONOSUPPORT
SOCKET_ESOCKTNOSUPPORT
SOCKET_EOPNOTSUPP
SOCKET_EPFNOSUPPORT
SOCKET_EAFNOSUPPORT
SOCKET_EADDRINUSE
SOCKET_EADDRNOTAVAIL
SOCKET_ENETDOWN
SOCKET_ENETUNREACH
SOCKET_ENETRESET
SOCKET_ECONNABORTED
SOCKET_ECONNRESET
SOCKET_ENOBUFS
SOCKET_EISCONN
SOCKET_ENOTCONN
SOCKET_ESHUTDOWN
SOCKET_ETOOMANYREFS
SOCKET_ETIMEDOUT
SOCKET_ECONNREFUSED
SOCKET_ELOOP
SOCKET_ENAMETOOLONG
SOCKET_EHOSTDOWN
SOCKET_EHOSTUNREACH
SOCKET_ENOTEMPTY
SOCKET_EPROCLIM
SOCKET_EUSERS
SOCKET_EDQUOT
SOCKET_ESTALE
SOCKET_EREMOTE
SOCKET_EDISCON
SOCKET_SYSNOTREADY
SOCKET_VERNOTSUPPORTED
SOCKET_NOTINITIALISED
SOCKET_HOST_NOT_FOUND
SOCKET_TRY_AGAIN
SOCKET_NO_RECOVERY
SOCKET_NO_DATA
SOCKET_NO_ADDRESS
SOL_TCP
SOL_UDP
SQLITE_BOTH
SQLITE_NUM
SQLITE_ASSOC
SQLITE_OK
SQLITE_ERROR
SQLITE_INTERNAL
SQLITE_PERM
SQLITE_ABORT
SQLITE_BUSY
SQLITE_LOCKED
SQLITE_NOMEM
SQLITE_READONLY
SQLITE_INTERRUPT
SQLITE_IOERR
SQLITE_CORRUPT
SQLITE_NOTFOUND
SQLITE_FULL
SQLITE_CANTOPEN
SQLITE_PROTOCOL
SQLITE_EMPTY
SQLITE_SCHEMA
SQLITE_TOOBIG
SQLITE_CONSTRAINT
SQLITE_MISMATCH
SQLITE_MISUSE
SQLITE_NOLFS
SQLITE_AUTH
SQLITE_NOTADB
SQLITE_FORMAT
SQLITE_ROW
SQLITE_DONE
MEMCACHE_COMPRESSED
MEMCACHE_HAVE_SESSION
EACCELERATOR_VERSION
EACCELERATOR_SHM_AND_DISK
EACCELERATOR_SHM
EACCELERATOR_SHM_ONLY
EACCELERATOR_DISK_ONLY
EACCELERATOR_NONE
OPT_PASS_1
OPT_PASS_2
OPT_PASS_3
OPT_PASS_4
OPT_PASS_5
OPT_PASS_6
OPT_PASS_7
OPT_PASS_8
OPT_PASS_9
OPT_PASS_10
OPT_ALL
OPTIMIZER_VERSION
DEBUGGER_VERSION
array_change_key_case ( $[, int $case = CASE_LOWER ] ):array | Returns an array with all keys from array lowercased or uppercased. Numbered indices are left as is. 
array_chunk ( $, int $size [, bool $preserve_keys = FALSE ] ):array | Chunks an array into arrays with size elements. The last chunk may contain less than size elements. 
array_column ( $input , mixed $column_key [, mixed $index_key = NULL ] ):array | returns the values from a single column of the input, identified by the column_key. 
array_combine ( $keys , $values ):array | Creates an array by using the values from the keys array as keys and the values from the values array as the corresponding values. 
array_count_values ( $):array | returns an array using the values of array as keys and their frequency in array as values. 
array_diff_assoc ( $array1 , $array2 [, $... ] ):array | Compares array1 against array2 and returns the difference. Unlike array_diff() the array keys are also used in the comparison. 
array_diff_key ( $array1 , $array2 [, $... ] ):array | Compares the keys from array1 against the keys from array2 and returns the difference.
array_diff_uassoc ( $array1 , $array2 [, $... ], callable $key_compare_func ):array |  Returns the entries of arr1 that have values which are not present in any of the others arguments but do additional checks whether the keys are equal. 
array_diff_ukey ( $array1 , $array2 [, $... ], callable $key_compare_func ):array
array_diff ( $array1 , $array2 [, $... ] ):array | Compares array1 against one or more other arrays and returns the values in array1 that are not present in any of the other arrays. 
array_fill_keys ( $keys , mixed $value ):array | Fills an array with the value of the value parameter, using the values of the keys array as keys. 
array_fill ( int $start_index , int $num , mixed $value ):array | Fills an array with num entries of the value of the value parameter, keys starting at the start_index parameter. 
array_filter ( $[, callable $callback [, int $flag = 0 ]] ):array | Iterates over each value in the array, if the callback function returns true, the value will be returned.
array_flip ( $):array |  Return array with key <-> value flipped
array_intersect_assoc ( $array1 , $array2 [, $... ] ):array | returns an array containing all the values of array1 that are present in all the arguments.
array_intersect_key ( $array1 , $array2 [, $... ] ):array | returns an array containing all the entries of array1 which have keys that are present in all the arguments. 
array_intersect_uassoc ( $array1 , $array2 [, $... ], callable $key_compare_func ):array | returns an array containing all the values of array1 that are present in all the arguments. 
array_intersect_ukey ( $array1 , $array2 [, $... ], callable $key_compare_func ):array |  returns an array containing all the values of array1 which have matching keys that are present in all the arguments. 
array_intersect ( $array1 , $array2 [, $... ] ):array | returns an array containing all the values of array1 that are present in all the arguments. Note that keys are preserved. 
array_key_exists ( mixed $key , array $array ):bool | returns TRUE if the given key is set in the array. key can be any value possible for an array index. 
array_key_first ( array $array ):mixed | Get the first key of the given array without affecting the internal array pointer. 
array_key_last ( array $array ):mixed | Get the last key of the given array without affecting the internal array pointer. 
array_keys ( $[, mixed $search_value [, bool $strict = FALSE ]] ):array |  Return just the keys from the input array, optionally only for the specified search_value
array_map ( callable $callback , $array1 [, $... ] ):array | returns an array containing all the elements of array1 after applying the callback function to each one. 
array_merge_recursive ( $array1 [, $... ] ):array |  Recursively merges elements from passed arrays into one array
array_merge ( $array1 [, $... ] ):array |  Merges elements from passed arrays into one array
array_multisort ( array &$array1 [, mixed $array1_sort_order = SORT_ASC [, mixed $array1_sort_flags = SORT_REGULAR [, mixed $... ]]] ):bool |  Sort multiple arrays at once similar to how ORDER BY clause works in SQL
array_pad ( $, int $size , mixed $value ):array | returns a copy of the array padded to size specified by size with value value. If size is positive then the array is padded on the right,
array_pop ( array &$array ):mixed |  Pops an element off the end of the array
array_product ( array $array ):number | returns the product of values in an array. 
array_push ( array &$array [, mixed $... ] ):int |  Pushes elements onto the end of the array
array_rand ( array $array [, int $num = 1 ] ):mixed | Picks one or more pseudo random entries out of an array, and returns the key (or keys) of the random entries.
array_reduce ( array $array , callable $callback [, $initial = NULL ] ):mixed | applies iteratively the callback function to the elements of the array, so as to reduce the array to a single value. 
array_replace_recursive ( $array1 [, $... ] ):array
array_replace ( $array1 [, $... ] ):array
array_reverse ( $[, bool $preserve_keys = FALSE ] ):array | Takes an input array and returns a new array with the order of the elements reversed. 
array_search ( $needle , array $haystack [, bool $strict = FALSE ] ):mixed | Searches haystack for needle. 
array_shift ( array &$array ):mixed |  Pops an element off the beginning of the array
array_slice ( $, int $offset [, int $length = NULL [, bool $preserve_keys = FALSE ]] ):array | returns the sequence of elements from the array array as specified by the offset and length parameters. 
array_splice ( &$input , int $offset [, int $length = count($input) [, mixed $replacement = array() ]] ):array |  Removes the elements designated by offset and length and replace them with supplied array
array_sum ( array $array ):number | returns the sum of values in an array. 
array_udiff_assoc ( $array1 , $array2 [, $... ], callable $value_compare_func ):array |  callback based-Return the entries of arr1 that have values which are not present in any of the others arguments .
array_udiff_uassoc ( $array1 , $array2 [, $... ], callable $value_compare_func , callable $key_compare_func ):array |  callback-based-returns the entries of arr1 that have values which are not present in any of the others arguments. 
array_udiff ( $array1 , $array2 [, $... ], callable $value_compare_func ):array | Computes the difference of arrays by using a callback function for data comparison. 
array_uintersect_assoc ( $array1 , $array2 [, $... ], callable $value_compare_func ):array |  Returns the entries of arr1 that have values which are present in all the other arguments. 
array_uintersect_uassoc ( $array1 , $array2 [, $... ], callable $value_compare_func , callable $key_compare_func ):array | calllback based-Compute the intersection of arrays with additional index check, compares data and indexes. 
array_uintersect ( $array1 , $array2 [, $... ], callable $value_compare_func ):array | Computes the intersection of arrays, compares data by a callback function. 
array_unique ( $[, int $sort_flags = SORT_STRING ] ):array |  Removes duplicate values from array
array_unshift ( array &$array [, mixed $... ] ):int | prepends passed elements to the front of the array. 
array_values ( $):array | returns all the values from the array and indexes the array numerically. 
array_walk_recursive ( array &$array , callable $callback [, mixed $userdata = NULL ] ):bool | Applies the user-defined callback function to each element of the array. This function will recurse into deeper arrays. 
array_walk ( array &$array , callable $callback [, mixed $userdata = NULL ] ):bool |  Apply a user function to every member of an array
([ mixed $... ] ):array | Creates an array. Read the section on the array type for more information on what an array is. 
arsort ( array &$array [, int $sort_flags = SORT_REGULAR ] ):bool |  Sort an array in reverse order and maintain index association
asort ( array &$array [, int $sort_flags = SORT_REGULAR ] ):bool |  Sort an array and maintain index association
compact ( mixed $varname1 [, mixed $... ] ):array |  Creates a hash containing variables and their values
count ( mixed $array_or_countable [, $mode = COUNT_NORMAL ] ):int |  Count the number of elements in a variable (usually an array)
current ( array $array ):mixed | Every array has an internal pointer to its "current" element, which is initialized to the first element inserted into the array. 
each ( &$):array |  Return the currently pointed key..value pair in the passed array, and advance the pointer to the next element
end ( array &$array ):mixed | advances array's internal pointer to the last element, and returns its value. 
extract ( array &$array [, $flags = EXTR_OVERWRITE [, string $prefix = NULL ]] ):int |  Imports variables into symbol table from an array
in_array ( mixed $needle , array $haystack [, $strict = FALSE ] ):bool | Searches haystack for needle using loose comparison unless strict is set. 
key_exists(->) function is an alias of: array_key_exists(). :This
key ( array $array ):mixed | returns the index element of the current array position. 
krsort ( array &$array [, int $sort_flags = SORT_REGULAR ] ):bool | Sorts an array by key in reverse order, maintaining key to data correlations. This is useful mainly for associative arrays. 
ksort ( array &$array [, int $sort_flags = SORT_REGULAR ] ):bool | Sorts an array by key, maintaining key to data correlations. This is useful mainly for associative arrays. 
list ( mixed $var1 [, mixed $... ] ):array
natcasesort ( array &$array ):bool |  Sort an array using case-insensitive natural sort
natsort ( array &$array ):bool |  Sort an array using natural sort
next ( array &$array ):mixed | behaves like current(), with one difference. It advances the internal array pointer one place forward before returning the element value. 
pos(->) function is an alias of: current() :This
prev ( array &$array ):mixed |  Move array argument's internal pointer to the previous element and return it
range ( mixed $start , mixed $end [, number $step = 1 ] ):array | Create an array containing a range of elements. 
reset ( array &$array ):mixed | rewinds array's internal pointer to the first element and returns the value of the first array element. 
rsort ( array &$array [, int $sort_flags = SORT_REGULAR ] ):bool |  Sort an array in reverse order
shuffle ( array &$array ):bool | This function shuffles (randomizes the order of the elements in) an array. It uses a pseudo random number generator that is not suitable for cryptographic purposes. 
sizeof(->) function is an alias of: count(). :This
sort ( array &$array [, int $sort_flags = SORT_REGULAR ] ):bool |  Sort an array
uasort ( array &$array , callable $value_compare_func ):bool |  Sort an array with a user-defined comparison function and maintain index association
uksort ( array &$array , callable $key_compare_func ):bool |  Sort an array by keys using a user-defined comparison function
usort ( array &$array , callable $value_compare_func ):bool |  Sort an array by values using a user-defined comparison function
__autoload ( string $class ):void | You can define this function to enable classes autoloading. 
call_user_method_array ( string $method_name , object &$obj , array $params ):mixed |  Call a user method on a specific object or class using a parameter array
call_user_method ( string $method_name , object &$obj [, $parameter [, $... ]] ):mixed |  Call a user method on a specific object or class
class_alias ( string $original , string $alias [, $autoload = TRUE ] ):bool | Creates an alias named alias based on the user defined class original. The aliased class is exactly the same as the original class. 
class_exists ( string $class_name [, $autoload = TRUE ] ):bool | This function checks whether or not the given class has been defined. 
get_called_class ( void ):string | Gets the name of the class the static method is called in. 
get_class_methods ( mixed $class_name ):array | Gets the class methods names. 
get_class_vars ( string $class_name ):array | Get the default properties of the given class. 
get_class ([ object $object ] ):string | Gets the name of the class of the given object. 
get_declared_classes ( void ):array | Gets the declared classes. 
get_declared_interfaces ( void ):array | Gets the declared interfaces. 
get_declared_traits ( void ):array
get_object_vars ( object $object ):array | Gets the accessible non-static properties of the given object according to scope. 
get_parent_class ([ mixed $object ] ):string | Retrieves the parent class name for object or class. 
interface_exists ( string $interface_name [, $autoload = TRUE ] ):bool | Checks if the given interface has been defined. 
is_a ( object $object , string $class_name [, $allow_string = FALSE ] ):bool | Checks if the given object is of this class or has this class as one of its parents. 
is_subclass_of ( mixed $object , string $class_name [, $allow_string = TRUE ] ):bool | Checks if the given object has the class class_name as one of its parents or implements it. 
method_exists ( mixed $object , string $method_name ):bool | Checks if the class method exists in the given object. 
property_exists ( mixed $class , string $property ):bool
trait_exists ( string $traitname [, $autoload ] ):bool
random_bytes ( int $length ):string
random_( $min , $max ):int
checkdate ( int $month , int $day , int $year ):bool | Checks the validity of the date formed by the arguments. A date is considered valid if each parameter is properly defined. 
date_add(->) function is an alias of: DateTime::add() :This
date_create_from_format(->) function is an alias of: DateTime::createFromFormat() :This
date_create_immutable_from_format(->) function is an alias of: DateTimeImmutable::createFromFormat() :This
date_create_immutable(->) function is an alias of: DateTimeImmutable::__construct() :This
date_create(->) function is an alias of: DateTime::__construct() :This
date_date_set(->) function is an alias of: DateTime::setDate() :This
date_default_timezone_get ( void ):string
date_default_timezone_set ( string $timezone_identifier ):bool
date_diff(->) function is an alias of: DateTime::diff() :This
date_format(->) function is an alias of: DateTime::format() :This
date_get_last_errors(->) function is an alias of: DateTime::getLastErrors() :This
date_interval_create_from_date_string(->) function is an alias of: DateInterval::createFromDateString() :This
date_interval_format(->) function is an alias of: DateInterval::format() :This
date_isodate_set(->) function is an alias of: DateTime::setISODate() :This
date_modify(->) function is an alias of: DateTime::modify() :This
date_offset_get(->) function is an alias of: DateTime::getOffset() :This
date_parse_from_format ( string $format , string $date ):array | Returns associative array with detailed info about given date. 
date_parse ( string $date ):array
date_sub(->) function is an alias of: DateTime::sub() :This
date_sun_info ( int $time , float $latitude , float $longitude ):array
date_sunrise ( int $timestamp [, int $format = SUNFUNCS_RET_STRING [, float $latitude = ini_get "date.default_latitude" [, float $longitude = ini_get("date.default_longitude") [, float $zenith = ini_get "date.sunrise_zenith" [, float $gmt_offset = 0 ]]]]] ):mixed |  returns the sunrise time for a given day (specified as a timestamp) and location. 
date_sunset ( int $timestamp [, int $format = SUNFUNCS_RET_STRING [, float $latitude = ini_get "date.default_latitude" [, float $longitude = ini_get("date.default_longitude") [, float $zenith = ini_get "date.sunset_zenith" [, float $gmt_offset = 0 ]]]]] ):mixed |  returns the sunset time for a given day (specified as a timestamp) and location. 
date_time_set(->) function is an alias of: DateTime::setTime() :This
date_timestamp_get(->) function is an alias of: DateTime::getTimestamp() :This
date_timestamp_set(->) function is an alias of: DateTime::setTimestamp() :This
date_timezone_get(->) function is an alias of: DateTime::getTimezone() :This
date_timezone_set(->) function is an alias of: DateTime::setTimezone() :This
date ( $format [, int $timestamp = time() ] ):string | Returns a string formatted according to the given format string. Timestamp is optional and defaults to the value of time(). 
getdate ([ int $timestamp = time() ] ):array | Returns an associative array containing the date information of the timestamp, or the current local time if no timestamp is given. 
gettimeofday ([ bool $return_float = FALSE ] ):mixed | This is an interface to gettimeofday(2). It returns an associative array containing the data returned from the system call. 
gmdate ( $format [, int $timestamp = time() ] ):string | Identical to the date() function except that the time returned is Greenwich Mean Time (GMT). 
gmmktime ([ $hour = gmdate("H") [, $minute = gmdate("i") [, $second = gmdate("s") [, $month = gmdate("n") [, $day = gmdate("j") [, $year = gmdate("Y") [, $is_dst = -1 ]]]]]]] ):int |  Get UNIX timestamp for a GMT date
gmstrftime ( $format [, int $timestamp = time() ] ):string | like  strftime() except that the time returned is Greenwich Mean Time (GMT).
idate ( string $format [, $timestamp = time() ] ):int |  Format a local time/date as integer
localtime ([ int $timestamp = time() [, bool $is_associative = FALSE ]] ):array | returns an array identical to that of the structure returned by the C function call. 
microtime ([ bool $get_as_float = FALSE ] ):mixed | returns the current Unix timestamp with microseconds. This function is only available on operating systems that support the gettimeofday() system call. 
mktime ([ $hour = date("H") [, $minute = date("i") [, $second = date("s") [, $month = date("n") [, $day = date("j") [, $year = date("Y") [, $is_dst = -1 ]]]]]]] ):int |  Get UNIX timestamp for a date
strftime ( $format [, int $timestamp = time() ] ):string |  Format a local time/date according to locale settings
strptime ( string $date , string $format ):array
strtotime ( string $time [, $now = time() ] ):int |  Convert string representation of date and time to a timestamp
time ( void ):int | Returns the current time measured in the number of seconds since the Unix Epoch (January 1 1970 00:00:00 GMT). 
timezone_abbreviations_list(->) function is an alias of: DateTimeZone::listAbbreviations() :This
timezone_identifiers_list(->) function is an alias of: DateTimeZone::listIdentifiers() :This
timezone_location_get(->) function is an alias of: DateTimeZone::getLocation() :This
timezone_name_from_abbr ( $abbr [, int $gmtOffset = -1 [, int $isdst = -1 ]] ):string
timezone_name_get(->) function is an alias of: DateTimeZone::getName() :This
timezone_offset_get(->) function is an alias of: DateTimeZone::getOffset() :This
timezone_open(->) function is an alias of: DateTimeZone::__construct() :This
timezone_transitions_get(->) function is an alias of: DateTimeZone::getTransitions() :This
timezone_version_get ( void ):string | Returns the current version of the timezonedb. 
chdir ( string $directory ):bool | Changes PHP's current directory to directory. 
chroot ( string $directory ):bool |  Change root directory
closedir ([ resource $dir_handle ] ):void | Closes the directory stream indicated by dir_handle. The stream must have previously been opened by opendir(). 
dir ( string $directory [, resource $context ] ):Directory | A pseudo-object oriented mechanism for reading a directory. The given directory is opened. 
getcwd ( void ):string | Gets the current working directory. 
opendir ( string $path [, $context ] ):resource | Opens up a directory handle to be used in subsequent closedir(), readdir(), and rewinddir() calls. 
readdir ([ resource $dir_handle ] ):string | Returns the name of the next entry in the directory. The entries are returned in the order in which they are stored by the filesystem. 
rewinddir ([ resource $dir_handle ] ):void | Resets the directory stream indicated by dir_handle to the beginning of the directory. 
scandir ( string $directory [, int $sorting_order = SCANDIR_SORT_ASCENDING [, resource $context ]] ):array | Returns an array of files and directories from the directory. 
debug_backtrace ([ int $options = DEBUG_BACKTRACE_PROVIDE_OBJECT [, int $limit = 0 ]] ):array | generates a PHP backtrace. 
debug_print_backtrace ([ int $options = 0 [, int $limit = 0 ]] ):void | prints a PHP backtrace. It prints the function calls, included/required files and eval()ed stuff. 
error_clear_last ( ):void
error_get_last ( void ):array | Gets information about the last error that occurred. 
error_log ( string $message [, int $message_type = 0 [, string $destination [, string $extra_headers ]]] ):bool | Sends an error message to the web server's error log or to a file. 
error_reporting ([ $level ] ):int |  sets the error_reporting directive at runtime.
restore_error_handler ( void ):bool | Used after using set_error_handler() to revert to the previous error handler
restore_exception_handler ( void ):bool | Used after changing the exception handler function using set_exception_handler().
set_error_handler ( callable $error_handler [, int $error_types = E_ALL | E_STRICT ] ):mixed |  Sets a user-defined error handler function. | Returns the previously defined error handler, or false on error
set_exception_handler ( $exception_handler ):callable | Sets the default exception handler if an exception is not caught within a try/catch block. Execution will stop after the exception_handler is called. 
trigger_error ( string $error_msg [, int $error_type = E_USER_NOTICE ] ):bool |  Generates a user-level error/warning/notice message
user_error(->) function is an alias of: trigger_error(). :This
escapeshellarg ( $arg ):string |  Quote and escape an argument for use in a shell command
escapeshellcmd ( $command ):string |  Escape shell metacharacters
exec ( $command [, array &$output [, int &$return_var ]] ):string | executes the given command. 
passthru ( string $command [, int &$return_var ] ):void | Use in place of exec() or system() when the output from the Unix command is binary data 
proc_close ( resource $process ):int | similar to pclose() except that it only works on processes opened by proc_open(). 
proc_get_status ( resource $process ):array | fetches data about a process opened using proc_open(). 
proc_nice ( int $increment ):bool |  Change the priority of the current process
proc_open ( string $cmd , array $descriptorspec , array &$pipes [, string $cwd [, array $env [, array $other_options ]]] ):resource | similar to popen() but provides a much greater degree of control over the program execution. 
proc_terminate ( resource $process [, int $signal = 15 ] ):bool |  kill a process opened by proc_open
shell_exec ( $cmd ):string | This function is identical to the backtick operator. 
system ( $command [, int &$return_var ] ):string |  Execute an external program and display output
basename ( $path [, $suffix ] ):string |  Returns the filename component of the path
chgrp ( string $filename , mixed $group ):bool |  Change file group
chmod ( string $filename , int $mode ):bool | Attempts to change the mode of the specified file to that given in mode. 
chown ( string $filename , mixed $user ):bool | Attempts to change the owner of the file filename to user user. Only the superuser may change the owner of a file. 
clearstatcache ([ bool $clear_realpath_cache = FALSE [, string $filename ]] ):void |  Clear file stat cache
copy ( string $source , string $dest [, resource $context ] ):bool |  Copy a file
dirname ( $path [, int $levels = 1 ] ):string |  Returns the directory name component of the path
disk_free_space ( string $directory ):float | will return the number of bytes available on the corresponding filesystem or disk partition. 
disk_total_space ( string $directory ):float | will return the total number of bytes on the corresponding filesystem or disk partition. 
diskfreespace(->) function is an alias of: disk_free_space(). :This
fclose ( resource $handle ):bool | The file pointed to by handle is closed. 
feof ( resource $handle ):bool | Tests for end-of-file on a file pointer. 
fflush ( resource $handle ):bool | This function forces a write of all buffered output to the resource pointed to by the file handle. 
fgetc ( resource $handle ):string | Gets a character from the given file pointer. 
fgetcsv ( resource $handle [, int $length = 0 [, string $delimiter = "," [, string $enclosure = '"' [, string $escape = "\\" ]]]] ):array |  Get line from file pointer and parse for CSV fields
fgets ( resource $handle [, int $length ] ):string | Gets a line from file pointer. 
fgetss ( resource $handle [, int $length [, $allowable_tags ]] ):string | Identical to fgets(), except that fgetss() attempts to strip any NUL bytes, HTML and PHP tags from the text it reads. 
file_exists ( string $filename ):bool | Checks whether a file or directory exists. 
file_get_contents ( $filename [, bool $use_include_path = FALSE [, resource $context [, int $offset = 0 [, int $maxlen ]]]] ):string |  Read the entire file into a string
file_put_contents ( string $filename , mixed $data [, $flags = 0 [, resource $context ]] ):int |  Write/Create a file with contents data and return the number of bytes written
file ( string $filename [, int $flags = 0 [, resource $context ]] ):array |  Read entire file into an array
fileatime ( string $filename ):int | Gets the last access time of the given file. 
filectime ( string $filename ):int | Gets the inode change time of a file. 
filegroup ( string $filename ):int | Gets the file group. The group ID is returned in numerical format, use posix_getgrgid() to resolve it to a group name. 
fileinode ( string $filename ):int | Gets the file inode. 
filemtime ( string $filename ):int | This function returns the time when the data blocks of a file were being written to, that is, the time when the content of the file was changed. 
fileowner ( string $filename ):int | Gets the file owner. 
fileperms ( string $filename ):int | Gets permissions for the given file. 
filesize ( string $filename ):int | Gets the size for the given file. 
filetype ( $filename ):string | Returns the type of the given file. 
flock ( resource $handle , int $operation [, int &$wouldblock ] ):bool |  Portable file locking
fnmatch ( string $pattern , string $string [, int $flags = 0 ] ):bool | checks if the passed string would match the given shell wildcard pattern. 
fopen ( string $filename , string $mode [, bool $use_include_path = FALSE [, $context ]] ):resource | binds a named resource, specified by filename, to a stream. 
fpassthru ( resource $handle ):int |  Output all remaining data from a file pointer
fputcsv ( resource $handle , array $fields [, string $delimiter = "," [, string $enclosure = '"' [, string $escape_char = "\\" ]]] ):int |  formats a Fields array as CSV and write it to the specified file handle. 
fputs(->) function is an alias of: fwrite(). :This
fread ( resource $handle , int $length ):string |  Binary-safe file read
fscanf ( resource $handle , string $format [, &$... ] ):mixed |  Implements a mostly ANSI compatible fscanf()
fseek ( resource $handle , $offset [, $whence = SEEK_SET ] ):int |  Seek on a file pointer
fstat ( resource $handle ):array | Gathers the statistics of the file opened by the file pointer handle. 
ftell ( resource $handle ):int | Returns the position of the file pointer referenced by handle. 
ftruncate ( resource $handle , int $size ):bool | Takes the filepointer, handle, and truncates the file to length, size. 
fwrite ( resource $handle , string $string [, $length ] ):int | writes the contents of string to the file stream pointed to by handle. 
glob ( string $pattern [, int $flags = 0 ] ):array | searches for all the pathnames matching pattern according to the rules used by the libc glob() function.
is_dir ( string $filename ):bool | Tells whether the given filename is a directory. 
is_executable ( string $filename ):bool | Tells whether the filename is executable. 
is_file ( string $filename ):bool | Tells whether the given file is a regular file. 
is_link ( string $filename ):bool | Tells whether the given file is a symbolic link. 
is_readable ( string $filename ):bool | Tells whether a file exists and is readable. 
is_uploaded_file ( string $filename ):bool |  Check if file was created by rfc1867 upload
is_writable ( string $filename ):bool |  Returns true if file can be written
is_writeable(->) function is an alias of: is_writable(). :This
lchgrp ( string $filename , mixed $group ):bool
lchown ( string $filename , mixed $user ):bool
link ( string $target , string $link ):bool | creates a hard link. 
linkinfo ( string $path ):int |  Returns the st_dev field of the UNIX C stat structure describing the link
lstat ( string $filename ):array | Gathers the statistics of the file or symbolic link named by filename. 
mkdir ( string $pathname [, int $mode = 0777 [, $recursive = FALSE [, resource $context ]]] ):bool | Attempts to create the directory specified by pathname. 
move_uploaded_file ( string $filename , string $destination ):bool |  Move a file if and only if it was created by an upload
parse_ini_file ( string $filename [, bool $process_sections = FALSE [, int $scanner_mode = INI_SCANNER_NORMAL ]] ):array |  Parse configuration file
parse_ini_string ( string $ini [, bool $process_sections = FALSE [, int $scanner_mode = INI_SCANNER_NORMAL ]] ):array
pathinfo ( string $path [, int $options = PATHINFO_DIRNAME | PATHINFO_BASENAME | PATHINFO_EXTENSION | PATHINFO_FILENAME ] ):mixed |  Returns information about a certain string
pclose ( resource $handle ):int | Closes a file pointer to a pipe opened by popen(). 
popen ( string $command , string $mode ):resource | Opens a pipe to a process executed by forking the command given by command. 
readfile ( string $filename [, bool $use_include_path = FALSE [, resource $context ]] ):int | Reads a file and writes it to the output buffer. 
readlink ( $path ):string | does the same as the readlink C function. 
realpath_cache_get ( void ):array | Get the contents of the realpath cache. 
realpath_cache_size ( void ):int | Get the amount of memory used by the realpath cache. 
realpath ( $path ):string | expands all symbolic links and resolves references to /./, /../ and extra / characters in the input path and returns the canonicalized absolute pathname. 
rename ( string $oldname , string $newname [, resource $context ] ):bool | Attempts to rename oldname to newname, moving it between directories if necessary. overwrittes newname.
rewind ( resource $handle ):bool |  Rewind the position of a file pointer
rmdir ( string $dirname [, resource $context ] ):bool | Attempts to remove the directory named by dirname. The directory must be empty, and the relevant permissions must permit this. 
set_file_buffer(->) function is an alias of: stream_set_write_buffer(). :This
stat ( string $filename ):array |  Give information about a file
symlink ( string $target , string $link ):bool | creates a symbolic link to the existing target with the specified name link. 
tempnam ( $dir , $prefix ):string | Creates a file with a unique filename, with access permission set to 0600, in the specified directory. 
tmpfile ( void ):resource |  Create a temporary file that will be deleted automatically after use
touch ( string $filename [, int $time = time() [, int $atime ]] ):bool |  Set modification time of file
umask ([ $mask ] ):int | sets PHPs umask to mask & 0777 and returns the old umask.
unlink ( string $filename [, resource $context ] ):bool | Deletes filename. Similar to the Unix C unlink() function. An E_WARNING level error will be generated on failure. 
filter_has_var ( int $type , string $variable_name ):bool
filter_id ( string $filtername ):int
filter_input_array ( int $type [, $definition [, bool $add_empty = TRUE ]] ):mixed | This function is useful for retrieving many values without repetitively calling filter_input(). 
filter_input ( int $type , string $variable_name [, int $filter = FILTER_DEFAULT [, $options ]] ):mixed
filter_list ( void ):array
filter_var_array ( array $data [, $definition [, bool $add_empty = TRUE ]] ):mixed | This function is useful for retrieving many values without repetitively calling filter_var(). 
filter_var ( $variable [, int $filter = FILTER_DEFAULT [, $options ]] ):mixed
call_user_func_array ( callable $callback , array $param_arr ):mixed | Calls the callback given by the first parameter with the parameters in param_arr. 
call_user_func ( callable $callback [, $parameter [, $... ]] ):mixed | Calls the callback given by the first parameter and passes the remaining parameters as arguments. 
create_function ( $args , $code ):string |  Creates an anonymous function, and returns its name (funny, eh?)
forward_static_call_array ( callable $function , array $parameters ):mixed | Calls a user defined function or method given by the function parameter. 
 orward_static_call ( callable $function [, $parameter [, $... ]] ):mixed | Calls a user defined function with the following arguments. 
func_get_arg ( int $arg_num ):mixed |  Get the $arg_num'th argument that was passed to the function
func_get_args ( void ):array |  Get an array of the arguments that were passed to the function
func_num_args ( void ):int |  Get the number of arguments that were passed to the function
function_exists ( string $function_name ):bool | Checks the list of defined functions, both built-in (internal) and user-defined, for function_name. 
get_defined_functions ([ bool $exclude_disabled = FALSE ] ):array | Gets an array of all defined functions. 
register_shutdown_function ( callable $callback [, mixed $parameter [, mixed $... ]] ):void |  Register a user-level function to be called on request termination
register_tick_function ( callable $function [, mixed $arg [, mixed $... ]] ):bool | Registers the given function to be executed when a tick is called. 
unregister_tick_function ( string $function_name ):void | De-registers the function named by function_name so it is no longer executed when a tick is called. 
hash_algos ( void ):array
hash_copy ( $context ):HashContext
hash_equals ( string $known_string , string $user_string ):bool
hash_file ( $algo , $filename [, bool $raw_output = FALSE ] ):string
hash_final ( HashContext $context [, bool $raw_output = FALSE ] ):string
hash_hkdf ( $algo , $ikm [, int $length = 0 [, $info = '' [, $salt = '' ]]] ):string
hash_hmac_algos ( void ):array
hash_hmac_file ( $algo , $filename , $key [, bool $raw_output = FALSE ] ):string
hash_hmac ( $algo , $data , $key [, bool $raw_output = FALSE ] ):string
hash_init ( string $algo [, int $options = 0 [, string $key = NULL ]] ):HashContext
hash_pbkdf2 ( $algo , $password , $salt , int $iterations [, int $length = 0 [, bool $raw_output = FALSE ]] ):string
hash_update_file ( HashContext $hcontext , string $filename [, resource $scontext = NULL ] ):bool
hash_update_stream ( HashContext $context , resource $handle [, $length = -1 ] ):int
hash_update ( HashContext $context , string $data ):bool
hash ( $algo , $data [, bool $raw_output = FALSE ] ):string
assert_options ( int $what [, $value ] ):mixed | Set the various assert() control options or just query their current settings. 
5 and 7:PHP |  Checks if assertion is false
cli_get_process_title ( void ):string
cli_set_process_title ( string $title ):bool | Sets the process title visible in tools such as top and ps. This function is available only in CLI mode. 
dl ( string $library ):bool |  Load a PHP extension at runtime
extension_loaded ( string $name ):bool | Finds out whether the extension is loaded. 
gc_collect_cycles ( void ):int | Forces collection of any existing garbage cycles. 
gc_disable ( ):void | Deactivates the circular reference collector, setting zend.enable_gc to 0. 
gc_enable ( ):void | Activates the circular reference collector, setting zend.enable_gc to 1. 
gc_enabled ( void ):bool | Returns status of the circular reference collector. 
gc_mem_caches ( void ):int | Reclaims memory used by the Zend Engine memory manager. 
get_cfg_var ( string $option ):mixed |  Get the value of a PHP configuration option
get_current_user ( void ):string | Returns the name of the owner of the current PHP script. 
get_defined_constants ([ bool $categorize = FALSE ] ):array | Returns the names and values of all the constants currently defined. 
get_extension_funcs ( string $module_name ):array | This function returns the names of all the functions defined in the module indicated by module_name. 
get_include_path ( void ):string | Gets the current include_path configuration option value. 
get_included_files ( void ):array | Gets the names of all files that have been included using include, include_once, require or require_once. 
get_loaded_extensions ([ bool $zend_extensions = FALSE ] ):array | This function returns the names of all the modules compiled and loaded in the PHP interpreter. 
get_magic_quotes_gpc ( void ):bool |  Get the current active configuration setting of magic_quotes_gpc
get_magic_quotes_runtime ( void ):bool | Returns the current active configuration setting of magic_quotes_runtime. 
get_required_files(->) function is an alias of: get_included_files(). :This
get_resources ([ string $type ] ):array | Returns an array of all currently active resources, optionally filtered by resource type. 
getenv ( $varname [, bool $local_only = FALSE ] ):string |  Get the value of an environment variable
getlastmod ( void ):int |  Get time of last page modification
getmygid ( void ):int | Gets the group ID of the current script. 
getmyinode ( void ):int | Gets the inode of the current script. 
getmypid ( void ):int | Gets the current PHP process ID. 
getmyuid ( void ):int | Gets the user ID of the current script. 
getopt ( string $options [, $longopts [, int &$optind ]] ):array | Parses options passed to the script. 
getrusage ([ int $who = 0 ] ):array | This is an interface to getrusage(2). It gets data returned from the system call. 
ini_alter(->) function is an alias of: ini_set(). :This
ini_get_all ([ string $extension [, bool $details = TRUE ]] ):array | Returns all the registered configuration options. 
ini_get ( $varname ):string | Returns the value of the configuration option on success. 
ini_restore ( string $varname ):void | Restores a given configuration option to its original value. 
ini_set ( $varname , $newvalue ):string | Sets the value of the given configuration option for that session. 
magic_quotes_runtime(->) function is an alias of: set_magic_quotes_runtime() :This
memory_get_peak_usage ([ bool $real_usage = FALSE ] ):int | Returns the peak of memory, in bytes, that's been allocated to your PHP script. 
memory_get_usage ([ bool $real_usage = FALSE ] ):int | Returns the amount of memory, in bytes, that's currently being allocated to your PHP script. 
php_ini_loaded_file ( void ):string | Check if a php.ini file is loaded, and retrieve its path. 
php_ini_scanned_files ( void ):string |  Return comma-separated string of .ini files parsed from the additional ini dir
php_logo_guid ( void ):string |  Return the special ID used to request the PHP logo in phpinfo screens
php_sapi_name ( void ):string | Returns a lowercase string that describes the type of interface (the Server API, SAPI) that PHP is using.
php_uname ([ $mode = "a" ] ):string |  Return information about the system PHP was built on
phpcredits ([ int $flag = CREDITS_ALL ] ):bool | This function prints out the HTML credits listing the PHP developers, modules, etc. 
phpinfo ([ int $what = INFO_ALL ] ):bool |  Output a page of useful information about PHP and the current request
phpversion ([ $extension ] ):string | Returns a string containing the version of the currently running PHP parser or extension. 
putenv ( string $setting ):bool |  Set the value of an environment variable
restore_include_path ( ):void | Restores the include_path configuration option back to its original master value as set in php.ini 
set_include_path ( $new_include_path ):string | Sets the include_path configuration option for the duration of the script. 
set_magic_quotes_runtime ( $new_setting ):bool | Set the current active configuration setting of magic_quotes_runtime. 
set_time_limit ( int $seconds ):bool |  Sets the maximum time a script can run
sys_get_temp_dir ( void ):string | Returns the path of the directory PHP stores temporary files in by default. 
version_compare ( string $version1 , string $version2 ):int |  Compares two "PHP-standardized" version number strings
zend_logo_guid ( void ):string |  Return the special ID used to request the Zend logo in phpinfo screens
zend_thread_id ( void ):int | This function returns a unique identifier for the current thread. 
zend_version ( void ):string | Returns a string containing the version of the currently running Zend Engine. 
ezmlm_hash ( string $addr ):int | calculates the hash value needed when keeping EZMLM mailing lists in a MySQL database. 
mail ( string $to , string $subject , string $message [, mixed $additional_headers [, string $additional_parameters ]] ):bool | Sends an email. 
abs ( mixed $):number | Returns the absolute value of number. 
acos ( $arg ):float | Returns the arc cosine of arg in radians. acos() is the inverse function of cos(), which means that a==cos(acos(a)) for every value of a that is within acos()' range. 
acosh ( $arg ):float | Returns the inverse hyperbolic cosine of arg, i.e. the value whose hyperbolic cosine is arg. 
asin ( $arg ):float | Returns the arc sine of arg in radians. asin() is the inverse function of sin(), which means that a==sin(asin(a)) for every value of a that is within asin()'s range. 
asinh ( $arg ):float | Returns the inverse hyperbolic sine of arg, i.e. the value whose hyperbolic sine is arg. 
atan2 ( $y , $x ):float |  Returns the arc tangent of y/x, with the resulting quadrant determined by the signs of y and x
atan ( $arg ):float | Returns the arc tangent of arg in radians. atan() is the inverse function of tan(), which means that a==tan(atan(a)) for every value of a that is within atan()'s range. 
atanh ( $arg ):float | Returns the inverse hyperbolic tangent of arg, i.e. the value whose hyperbolic tangent is arg. 
base_convert ( $number , int $frombase , int $tobase ):string |  Converts a number in a string from any base <= 36 to any base <= 36
bindec ( string $binary_string ):number |  Returns the decimal equivalent of the binary number
ceil ( $value ):float | Returns the next highest integer value by rounding up value if necessary. 
cos ( $arg ):float | returns the cosine of the arg parameter. The arg parameter is in radians. 
cosh ( $arg ):float | Returns the hyperbolic cosine of arg, defined as (exp(arg) + exp(-arg))/2. 
decbin ( int $number ):string | Returns a string containing a binary representation of the given number argument. 
dechex ( int $number ):string |  Returns a string containing a hexadecimal representation of the given number
decoct ( int $number ):string | Returns a string containing an octal representation of the given number argument. 
deg2rad ( $number ):float | This function converts number from degrees to the radian equivalent. 
exp ( $arg ):float |  Returns e raised to the power of the number
expm1 ( $arg ):float | returns the equivalent to 'exp(arg) - 1' computed in a way that is accurate even if the value of arg is near zero.
floor ( $value ):float | Returns the next lowest integer value (as float) by rounding down value if necessary. 
fmod ( $x , $y ):float | Returns the floating point remainder of dividing the dividend (x) by the divisor (y). 
getrandmax ( void ):int | Returns the maximum value that can be returned by a call to rand(). 
hexdec ( string $hex_string ):number |  Returns the decimal equivalent of the hexadecimal number
hypot ( $x , $y ):float | returns the length of the hypotenuse of a right-angle triangle or the distance of the point (x, y) from the origin.  
intdiv ( $dividend , $divisor ):int | Returns the integer quotient of the division of dividend by divisor. 
is_finite ( float $val ):bool | Checks whether val is a legal finite on this platform. 
is_infinite ( float $val ):bool | Returns TRUE if val is infinite (positive or negative), like the result of log(0) or any value too big to fit into a float on this platform. 
is_nan ( float $val ):bool | Checks whether val is 'not a number', like the result of acos(1.01). 
lcg_value ( void ):float |  Returns a value from the combined linear congruential generator
log10 ( $arg ):float | Returns the base-10 logarithm of arg. 
log1p ( $number ):float | returns log(1 + number) computed in a way that is accurate even when the value of number is close to zero. 
log ( $arg [, $base = M_E ] ):float | If the optional base parameter is specified, log() returns logbase arg, otherwise log() returns the natural logarithm of arg. 
max ( array $values ):mixed |  Return the highest value in an array or a series of arguments
min ( array $values ):mixed |  Return the lowest value in an array or a series of arguments
mt_getrandmax ( void ):int | Returns the maximum value that can be returned by a call to mt_rand(). 
mt_rand ( void ):int |  Returns a random number from Mersenne Twister
mt_srand ([ int $seed [, int $mode = MT_RAND_MT19937 ]] ):void |  Seeds Mersenne Twister random number generator
octdec ( string $octal_string ):number | Returns the decimal equivalent of the octal number represented by the octal_string argument. 
pi ( void ):float | Returns an approximation of pi. The returned float has a precision based on the precision directive in php.ini, which defaults to 14. 
pow ( $base , $exp ):number |  Returns base raised to the power of exponent. Returns integer result when possible
rad2deg ( $number ):float | This function converts number from radian to degrees. 
rand ( void ):int |  Returns a random number
round ( $val [, int $precision = 0 [, int $mode = PHP_ROUND_HALF_UP ]] ):float |  Returns the number rounded to specified precision
sin ( $arg ):float | returns the sine of the arg parameter. The arg parameter is in radians. 
sinh ( $arg ):float | Returns the hyperbolic sine of arg, defined as (exp(arg) - exp(-arg))/2. 
sqrt ( $arg ):float | Returns the square root of arg. 
srand(->) srand ([ int $seed ] ):void |  Seeds random number generator
tan ( $arg ):float | returns the tangent of the arg parameter. The arg parameter is in radians. 
tanh ( $arg ):float | Returns the hyperbolic tangent of arg, defined as sinh(arg)/cosh(arg). 
connection_aborted ( void ):int | Checks whether the client disconnected. 
connection_status ( void ):int | Gets the connection status bitfield. 
constant ( string $name ):mixed |  Given the name of a constant this function will return the constants associated value
define ( string $name , mixed $value [, $case_insensitive = FALSE ] ):bool | Defines a named constant at runtime. 
defined ( string $name ):bool |  Check whether a constant exists
eval ( string $code ):mixed
exit ([ string $status ] ):void
get_browser ([ string $user_agent [, bool $return_array = FALSE ]] ):mixed | Attempts to determine the capabilities of the user's browser, see browscap.ini file. 
__halt_compiler ( ):void
highlight_file ( string $filename [, bool $return = FALSE ] ):mixed |  Syntax highlight a source file
highlight_string ( string $str [, bool $return = FALSE ] ):mixed | Outputs or returns html markup for a syntax highlighted version of the given PHP code.
hrtime ([ bool $get_as_number = FALSE ] ):mixed | Returns the system's high resolution time, counted from an arbitrary point in time. 
ignore_user_abort ([ bool $value ] ):int |  Set whether we want to ignore a user abort event or not
pack ( $format [, mixed $args [, mixed $... ]] ):string |  Takes one or more arguments and packs them into a binary string according to the format argument
php_check_syntax(->) php_check_syntax ( string $filename [, string &$error_message ] ):bool |  Check the syntax of the specified file.
php_strip_whitespace ( $filename ):string | Returns the PHP source code in filename with PHP comments and whitespace removed. (see php -w)
sapi_windows_cp_conv ( int|$in_codepage , int|$out_codepage , $subject ):string | Convert string from one codepage to another. 
sapi_windows_cp_get ( string $kind ):int | Get the identifier of the codepage of the current process. 
sapi_windows_cp_is_utf8 ( void ):bool | Indicates whether the codepage of the current process is UTF-8 compatible. 
sapi_windows_cp_set ( int $cp ):bool | Set the codepage of the current process. 
sapi_windows_vt100_support ( resource $stream [, $enable ] ):bool
show_source(->) function is an alias of: highlight_file(). :This
sleep ( $seconds ):int | Delays the program execution for the given number of seconds. 
sys_getloadavg ( void ):array | Returns three samples containing the number of processes in the system run queue over the last 1, 5 and 15 minutes.
time_nanosleep ( int $seconds , int $nanoseconds ):mixed | Delays program execution for the given number of seconds and nanoseconds. 
time_sleep_until ( float $timestamp ):bool | Makes the script sleep until the specified timestamp. 
uniqid ([ $prefix = "" [, bool $more_entropy = FALSE ]] ):string |  Generates a unique ID
unpack ( string $format , string $data [, int $offset = 0 ] ):array |  Unpack binary string into named array elements according to format argument
usleep ( int $micro_seconds ):void | Delays program execution for the given number of microseconds. 
checkdnsrr ( string $host [, string $type = "MX" ] ):bool | Searches DNS for records of type type corresponding to host. 
closelog ( void ):bool | closes the descriptor being used to write to the system logger. The use of closelog() is optional. 
define_syslog_variables ( ):void | Initializes all variables used in the syslog functions. 
dns_check_record(->) function is an alias of: checkdnsrr(). :This |  Check DNS records corresponding to a given Internet host name or IP address
dns_get_mx(->) function is an alias of: getmxrr(). :This |  Get MX records corresponding to a given Internet host name
dns_get_record ( string $hostname [, int $type = DNS_ANY [, &$authns [, &$addtl [, bool $raw = FALSE ]]]] ):array | Fetch DNS Resource Records associated with the given hostname. 
fsockopen ( string $hostname [, int $port = -1 [, int &$errno [, string &$errstr [, float $timeout = ini_get("default_socket_timeout") ]]]] ):resource |  Open Internet or Unix domain socket connection
gethostbyaddr ( $ip_address ):string | Returns the host name of the Internet host specified by ip_address. 
gethostbyname ( $hostname ):string | Returns the IPv4 address of the Internet host specified by hostname. 
gethostbynamel ( string $hostname ):array | Returns a list of IPv4 addresses to which the Internet host specified by hostname resolves. 
gethostname ( void ):string | gets the standard host name for the local machine. 
getmxrr ( string $hostname , array &$mxhosts [, array &$weight ] ):bool | Searches DNS for MX records corresponding to hostname. 
getprotobyname ( string $name ):int | returns the protocol number associated with the protocol name as per /etc/protocols. 
getprotobynumber ( int $number ):string | returns the protocol name associated with protocol number as per /etc/protocols. 
getservbyname ( string $service , string $protocol ):int | returns the Internet port which corresponds to service for the specified protocol as per /etc/services. 
getservbyport ( int $port , $protocol ):string | returns the Internet service associated with port for the specified protocol as per /etc/services. 
header_register_callback ( callable $callback ):bool
header_remove ([ string $name ] ):void | Removes an HTTP header previously set using header(). 
header ( string $header [, bool $replace = TRUE [, int $http_response_code ]] ):void |  Sends a raw HTTP header
headers_list ( void ):array | will return a list of headers to be sent to the browser / client. To determine whether or not these headers have been sent yet, use headers_sent(). 
headers_sent ([ string &$file [, int &$line ]] ):bool |  Returns true if headers have already been sent, false otherwise
http_response_code ([ int $response_code ] ):mixed | Gets or sets the HTTP response status code. 
inet_ntop ( $in_addr ):string | This function converts a 32bit IPv4, or 128bit IPv6 address (if PHP was built with IPv6 support enabled) into an address family appropriate string representation. 
inet_pton ( $address ):string | This function converts a human readable IPv4 or IPv6 address (if PHP was built with IPv6 support enabled) into an address family appropriate 32bit or 128bit binary structure. 
ip2long ( string $ip_address ):int |  Converts a string containing an (IPv4) Internet Protocol dotted address into a proper address
long2ip ( int $proper_address ):string | generates an Internet address in dotted format (i.e.: aaa.bbb.ccc.ddd) from the long integer representation. 
openlog ( string $ident , int $option , int $facility ):bool |  Open connection to system logger
pfsockopen ( string $hostname [, int $port = -1 [, int &$errno [, string &$errstr [, float $timeout = ini_get("default_socket_timeout") ]]]] ):resource | like fsockopen() but the connection is not closed after the script finishes.
setcookie ( string $name [, string $value = "" [, int $expires = 0 [, string $path = "" [, string $domain = "" [, $secure = FALSE [, $httponly = FALSE ]]]]]] ):bool |  Send a cookie
setrawcookie ( string $name [, string $value [, int $expires = 0 [, string $path [, string $domain [, $secure = FALSE [, $httponly = FALSE ]]]]]] ):bool |  Send a cookie with no url encoding of the value
socket_get_status(->) function is an alias of: stream_get_meta_data(). :This
socket_set_blocking(->) function is an alias of: stream_set_blocking(). :This
socket_set_timeout(->) function is an alias of: stream_set_timeout(). :This
syslog ( int $priority , string $message ):bool |  Generate a system log message
flush ( ):void |  Flush the output buffer
ob_clean ( ):void |  Clean (delete) the current output buffer
ob_end_clean ( void ):bool |  Clean the output buffer, and delete current output buffer
ob_end_flush ( void ):bool |  Flush (send) the output buffer, and delete current output buffer
ob_flush ( ):void |  Flush (send) contents of the output buffer. The last buffer content is sent to next buffer
ob_get_clean ( void ):string |  Get current buffer contents and delete current output buffer
ob_get_contents ( void ):string | Gets the contents of the output buffer without clearing it. 
ob_get_flush ( void ):string |  Get current buffer contents, flush (send) the output buffer, and delete current output buffer
ob_get_length ( void ):int | This will return the length of the contents in the output buffer, in bytes. 
ob_get_level ( void ):int | Returns the nesting level of the output buffering mechanism. 
ob_get_status ([ bool $full_status = FALSE ] ):array | returns status information on either the top level output buffer or all active output buffer levels if full_status is set to TRUE. 
ob_gzhandler ( $buffer , int $mode ):string | intended to be used as a callback function for ob_start() to help facilitate sending gz-encoded data to web browsers that support compressed web pages.
ob_implicit_flush ([ int $flag = 1 ] ):void | will turn implicit flushing on or off. Implicit flushing will result in a flush operation after every output call, so that explicit calls to flush() will no longer be needed. 
ob_list_handlers ( void ):array | Lists all output handlers in use. 
ob_start ([ callable $output_callback = NULL [, int $chunk_size = 0 [, int $flags = PHP_OUTPUT_HANDLER_STDFLAGS ]]] ):bool |  Turn on Output Buffering (specifying an optional output handler).
output_add_rewrite_var ( string $name , string $value ):bool |  Add URL rewriter values
output_reset_rewrite_vars ( void ):bool | This function resets the URL rewriter and removes all rewrite variables previously set by the output_add_rewrite_var() function. 
password_get_info ( string $hash ):array | When passed in a valid hash created by an algorithm supported by password_hash(), this function will return an array of information about that hash. 
password_hash(->) password_hash ( $password , int $algo [, array $options ] ):string
password_needs_rehash ( string $hash , int $algo [, array $options ] ):bool |  checks to see if the supplied hash implements the algorithm and options provided.
password_verify ( string $password , string $hash ):bool
ereg_replace ( $pattern , $replacement , $):string | This function scans string for matches to pattern, then replaces the matched text with replacement. 
ereg ( string $pattern , string $string [, array &$regs ] ):int | Searches a string for matches to the regular expression given in pattern in a case-sensitive way. 
eregi_replace ( $pattern , $replacement , $):string | This function is identical to ereg_replace() except that this ignores case distinction when matching alphabetic characters. 
eregi ( string $pattern , string $string [, array &$regs ] ):int | This function is identical to ereg() except that it ignores case distinction when matching alphabetic characters. 
split ( string $pattern , string $string [, int $limit = -1 ] ):array | Splits a string into array by regular expression. 
spliti ( string $pattern , string $string [, int $limit = -1 ] ):array |  Split string into array by regular expression case-insensitive
sql_regcase ( $):string | Creates a regular expression for a case insensitive match. 
session_abort ( void ):bool | finishes session without saving data. Thus the original values in session data are kept. 
session_cache_expire ([ string $new_cache_expire ] ):int |  Return the current cache expire. If new_cache_expire is given, the current cache_expire is replaced with new_cache_expire
session_cache_limiter ([ $cache_limiter ] ):string |  Return the current cache limiter. If new_cache_limited is given, the current cache_limiter is replaced with new_cache_limiter
session_commit(->) function is an alias of: session_write_close(). :This
session_create_id ([ $prefix ] ):string
session_decode ( string $data ):bool |  Deserializes data and reinitializes the variables
session_destroy ( void ):bool |  Destroy the current session and all data associated with it
session_encode ( void ):string |  Serializes the current setup and returns the serialized representation
session_gc ( void ):int
session_get_cookie_params ( void ):array | Gets the session cookie parameters. 
session_id ([ $id ] ):string |  Return the current session id. If newid is given, the session id is replaced with newid
session_is_registered ( string $name ):bool |  Checks if a variable is registered in session
session_module_name ([ $module ] ):string | gets the name of the current session module. 
session_name ([ $name ] ):string |  Return the current session name. If newname is given, the session name is replaced with newname
session_regenerate_id ([ $delete_old_session = FALSE ] ):bool |  Update the current session id with a newly generated one.
session_register_shutdown ( ):void | Registers session_write_close() as a shutdown function. 
session_register(->) session_register ( mixed $name [, mixed $... ] ):bool |  Adds varname(s) to the list of variables which are freezed at the session end
session_reset ( void ):bool | reinitializes a session with original values stored in session storage. This function requires an active session and discards changes in $_SESSION. 
session_save_path ([ $path ] ):string | returns the path of the current directory used to save session data. 
session_set_cookie_params ( int $lifetime [, string $path [, string $domain [, $secure = FALSE [, $httponly = FALSE ]]]] ):bool |  Set session cookie parameters
session_set_save_handler ( callable $open , callable $close , callable $read , callable $write , callable $destroy , callable $gc [, callable $create_sid [, callable $validate_sid [, callable $update_timestamp ]]] ):bool |  Sets user-level functions
session_start ([ array $options = array() ] ):bool |  Begin session - reinitializes freezed variables, registers browsers etc
session_status ( void ):int | is used to return the current session status. 
session_unregister ( string $name ):bool |  Removes varname from the list of variables which are freezed at the session end
session_unset ( void ):bool | frees all session variables currently registered. 
session_write_close ( void ):bool |  Write session data and end session
class_implements ( mixed $class [, bool $autoload = TRUE ] ):array | This function returns an array with the names of the interfaces that the given class and its parents implement. 
class_parents ( mixed $class [, bool $autoload = TRUE ] ):array | This function returns an array with the name of the parent classes of the given class. 
class_uses ( mixed $class [, bool $autoload = TRUE ] ):array | This function returns an array with the names of the traits that the given class uses.
iterator_apply ( Traversable $iterator , callable $function [, array $args = NULL ] ):int | Calls a function for every element in an iterator. 
iterator_count ( Traversable $iterator ):int | Count the elements in an iterator. iterator_count() is not guaranteed to retain the current position of the iterator. 
iterator_to_( Traversable $iterator [, bool $use_keys = TRUE ] ):array | Copy the elements of an iterator into an array. 
spl_autoload_call ( string $class_name ):void | This function can be used to manually search for a class or interface using the registered __autoload functions. 
spl_autoload_extensions ([ $file_extensions ] ):string | This function can modify and check the file extensions that the built in __autoload() fallback function spl_autoload() will be using. 
spl_autoload_functions ( void ):array | Get all registered __autoload() functions. 
spl_autoload_register ([ callable $autoload_function [, $throw = TRUE [, $prepend = FALSE ]]] ):bool
spl_autoload_unregister ( mixed $autoload_function ):bool
spl_autoload ( string $class_name [, string $file_extensions = spl_autoload_extensions() ] ):void | default implementation for __autoload(). 
spl_classes ( void ):array | This function returns an array with the current available SPL classes. 
spl_object_hash ( object $obj ):string | This function returns a unique identifier for the object. This id can be used as a hash key for storing or for identifying an object, as long as the object is not destroyed. 
spl_object_id ( object $obj ):int | This function returns a unique identifier for the object. The object id is unique for the lifetime of the object. 
set_socket_blocking(->) function is an alias of: stream_set_blocking() :This |  Set blocking/non-blocking mode on a socket
stream_bucket_append ( resource $brigade , object $bucket ):void |  Append bucket to brigade
stream_bucket_make_writeable ( resource $brigade ):object |  Return a bucket object from the brigade for operating on
stream_bucket_new ( resource $stream , string $buffer ):object |  Create a new bucket for use on the current stream
stream_bucket_prepend ( resource $brigade , object $bucket ):void | This function can be called to prepend a bucket to a bucket brigade. It is typically called from php_user_filter::filter(). 
stream_context_create ([ array $options [, array $params ]] ):resource | Creates and returns a stream context with any options supplied in options preset. 
stream_context_get_default ([ array $options ] ):resource | Returns the default stream context which is used whenever file operations are called without a context parameter. 
stream_context_get_options ( resource $stream_or_context ):array | Returns an array of options on the specified stream or context. 
stream_context_get_params ( resource $stream_or_context ):array | Retrieves parameter and options information from the stream or context. 
stream_context_set_default ( array $options ):resource | Set the default stream context which will be used whenever file operations are called without a context parameter. 
stream_context_set_option ( resource $stream_or_context , string $wrapper , string $option , mixed $value ):bool |  Set an option for a wrapper
stream_context_set_params ( resource $stream_or_context , array $params ):bool | Sets parameters on the specified context. 
stream_copy_to_stream ( resource $source , resource $dest [, $maxlength = -1 [, $offset = 0 ]] ):int | Makes a copy of up to maxlength bytes of data from the current position (or from the offset position, if specified) in source to dest. 
stream_filter_append ( $stream , string $filtername [, int $read_write [, mixed $params ]] ):resource | Adds filtername to the list of filters attached to stream. 
stream_filter_prepend ( $stream , string $filtername [, int $read_write [, mixed $params ]] ):resource | Adds filtername to the list of filters attached to stream. 
stream_filter_register ( string $filtername , string $classname ):bool | allows you to implement your own filter on any registered stream used with all the other filesystem functions (such as fopen(), fread() etc.). 
stream_filter_remove ( resource $stream_filter ):bool | Removes a stream filter previously added to a stream with stream_filter_prepend() or stream_filter_append(). 
stream_get_contents ( resource $handle [, int $maxlength = -1 [, int $offset = -1 ]] ):string | Identical to file_get_contents(), except that stream_get_contents() operates on an already open stream resource.
stream_get_filters ( void ):array | Retrieve the list of registered filters on the running system. 
stream_get_line ( resource $handle , int $length [, $ending ] ):string |  Read up to maxlen bytes from a stream or until the ending string is found
stream_get_meta_data ( resource $stream ):array | Returns information about an existing stream. 
stream_get_transports ( void ):array | Returns an indexed array containing the name of all socket transports available on the running system. 
stream_get_wrappers ( void ):array | Retrieve list of registered streams available on the running system. 
stream_is_local ( mixed $stream_or_url ):bool | Checks if a stream, or a URL, is a local one or not. 
stream_isatty ( resource $stream ):bool | Determines if stream stream refers to a valid terminal type device. This is a more portable version of posix_isatty(), since it works on Windows systems too. 
stream_notification_callback ( int $notification_code , int $severity , string $message , int $message_code , int $bytes_transferred , int $bytes_max ):void
stream_register_wrapper(->) function is an alias of: stream_wrapper_register(). :This
stream_resolve_include_path ( $filename ):string | Resolve filename against the include path according to the same rules as fopen()/include. 
stream_select ( array &$read , array &$write , array &$except , $tv_sec [, $tv_usec = 0 ] ):int | accepts arrays of streams and waits for them to change status. Like socket_select() except in that it acts on streams. 
stream_set_blocking ( resource $stream , $mode ):bool |  Set blocking/non-blocking mode on a socket or stream
stream_set_chunk_size ( resource $fp , $chunk_size ):int | Set the stream chunk size. 
stream_set_read_buffer ( resource $stream , $buffer ):int | Sets the read buffer. It's the equivalent of stream_set_write_buffer(), but for read operations. 
stream_set_timeout ( resource $stream , int $seconds [, int $microseconds = 0 ] ):bool |  Set timeout on stream read to seconds |  |  | microseonds
stream_set_write_buffer ( resource $stream , $buffer ):int | Sets the buffering for write operations on the given stream to buffer bytes. 
stream_socket_accept ( $server_socket [, float $timeout = ini_get("default_socket_timeout") [, string &$peername ]] ):resource | Accept a connection on a socket previously created by stream_socket_server(). 
stream_socket_client ( string $remote_socket [, int &$errno [, string &$errstr [, float $timeout = ini_get("default_socket_timeout") [, int $flags = STREAM_CLIENT_CONNECT [, $context ]]]]] ):resource |  Open a client connection to a remote address
stream_socket_enable_crypto ( resource $stream , bool $enable [, int $crypto_type [, resource $session_stream ]] ):mixed
stream_socket_get_name ( resource $handle , bool $want_peer ):string | Returns the local or remote name of a given socket connection. 
stream_socket_pair ( int $domain , int $type , int $protocol ):array | creates a pair of connected, indistinguishable socket streams. This function is commonly used in IPC (Inter-Process Communication). 
stream_socket_recvfrom ( resource $socket , int $length [, int $flags = 0 [, &$address ]] ):string | accepts data from a remote socket up to length bytes. 
stream_socket_sendto ( resource $socket , string $data [, $flags = 0 [, string $address ]] ):int | Sends the specified data through the socket. 
stream_socket_server ( string $local_socket [, int &$errno [, string &$errstr [, int $flags = STREAM_SERVER_BIND | STREAM_SERVER_LISTEN [, $context ]]]] ):resource |  Create a server socket bound to localaddress
stream_socket_shutdown ( resource $stream , int $how ):bool
stream_supports_lock ( resource $stream ):bool | Tells whether the stream supports locking through flock(). 
stream_wrapper_register ( string $protocol , string $classname [, int $flags = 0 ] ):bool | Allows you to implement your own protocol handlers and streams for use with all the other filesystem functions. 
stream_wrapper_restore ( string $protocol ):bool | Restores a built-in wrapper previously unregistered with stream_wrapper_unregister(). 
stream_wrapper_unregister ( string $protocol ):bool | Allows you to disable an already defined stream wrapper.
addcslashes ( $str , $charlist ):string | Returns a string with backslashes before characters that are listed in charlist parameter. 
addslashes ( $str ):string |  Escapes single quote, double quotes and backslash characters in a string with backslashes
bin2hex ( $str ):string | Returns an ASCII string containing the hexadecimal representation of str. The conversion is done byte-wise with the high-nibble first. 
chop(->) function is an alias of: rtrim(). :This
chr ( int $bytevalue ):string |  Converts ASCII code to a character
chunk_split ( $body [, int $chunklen = 76 [, $end = "\r\n" ]] ):string | Can be used to split a string into smaller chunks. It inserts end every chunklen characters. 
convert_cyr_( $str , $from , $to ):string | Converts from one Cyrillic character set to another. 
convert_uudecode ( $data ):string
convert_uuencode ( $data ):string
count_chars ( string $string [, int $mode = 0 ] ):mixed | Counts the number of occurrences of every byte-value (0..255) in string and returns it in various ways. 
crc32 ( string $str ):int |  Calculate the crc32 polynomial of a string
crypt ( $str [, $salt ] ):string |  Encrypt a string
echo ( string $arg1 [, string $... ] ):void
explode ( string $delimiter , string $string [, int $limit = PHP_INT_MAX ] ):array | Returns an array of strings by splitting it on boundaries formed by the string delimiter. 
fprintf ( resource $handle , string $format [, mixed $args [, mixed $... ]] ):int | Write a string produced according to format to the stream resource specified by handle. 
get_html_translation_table ([ int $table = HTML_SPECIALCHARS [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = "UTF-8" ]]] ):array |  Returns the internal translation table used by htmlspecialchars and htmlentities
hebrev ( $hebrew_text [, int $max_chars_per_line = 0 ] ):string |  Converts logical Hebrew text to visual text
hebrevc ( $hebrew_text [, int $max_chars_per_line = 0 ] ):string |  Converts logical Hebrew text to visual text with newline conversion
hex2bin ( $data ):string
html_entity_decode ( $[, int $flags = ENT_COMPAT | ENT_HTML401 [, $encoding = ini_get("default_charset") ]] ):string |  Convert all HTML entities to their applicable characters
htmlentities ( $[, int $flags = ENT_COMPAT | ENT_HTML401 [, $encoding = ini_get("default_charset") [, bool $double_encode = TRUE ]]] ):string |  Convert all applicable characters to HTML entities
htmlspecialchars_decode ( $[, int $flags = ENT_COMPAT | ENT_HTML401 ] ):string
htmlspecialchars ( $[, int $flags = ENT_COMPAT | ENT_HTML401 [, $encoding = ini_get("default_charset") [, bool $double_encode = TRUE ]]] ):string |  Convert special characters to HTML entities
implode ( $glue , array $pieces ):string |  Joins array elements placing glue string between items and return one string
join(->) function is an alias of: implode() |  An alias for implode
lcfirst ( $str ):string
levenshtein ( string $str1 , string $str2 ):int |  Calculate Levenshtein distance between two strings
localeconv ( void ):array | Returns an associative array containing localized numeric and monetary formatting information. 
ltrim ( $str [, $character_mask ] ):string | Strip whitespace (or other characters) from the beginning of a string. 
md5_file ( $filename [, bool $raw_output = FALSE ] ):string | Calculates the MD5 hash of the file specified by the filename parameter using the RSA- MD5 Message-Digest Algorithm.
md5 ( $str [, bool $raw_output = FALSE ] ):string | Calculates the MD5 hash of str using the  RSA Data Security, Inc. MD5 Message-Digest Algorithm, and returns that hash. 
metaphone ( $str [, int $phonemes = 0 ] ):string |  Break english phrases down into their phonemes
money_format ( $format , float $number ):string | returns a formatted version of number.
nl_langinfo ( int $item ):string | used to access individual elements of the locale categories. 
nl2br ( $[, bool $is_xhtml = TRUE ] ):string | Returns string with <br /> or <br> inserted before all newlines (\r\n, \n\r, \n and \r). 
number_format ( float $number [, int $decimals = 0 ] ):string |  Formats a number with grouped thousands
ord ( string $string ):int |  Returns ASCII value of character
parse_str ( string $encoded_string [, array &$result ] ):void | Parses encoded_string as if it were the query string passed via a URL and sets variables in the current scope or within result
pr( string $arg ):int
printf ( string $format [, mixed $args [, mixed $... ]] ):int | Produces output according to format. 
quoted_printable_decode ( $str ):string |  Convert a quoted-printable string to an 8 bit string
quoted_printable_encode ( $str ):string
quotemeta ( $str ):string |  Quotes meta characters
rtrim ( $str [, $character_mask ] ):string |  Removes trailing whitespace
setlocale ( int $category , $locale [, $... ] ):string |  Set locale information
sha1_file ( $filename [, bool $raw_output = FALSE ] ):string | Calculates the sha1 hash of the file specified by filename using the US Secure Hash Algorithm 1.
sha1 ( $str [, bool $raw_output = FALSE ] ):string | Calculates the sha1 hash of str using the US Secure Hash Algorithm 1. 
similar_text ( string $first , string $second [, float &$percent ] ):int | This calculates the similarity between two strings
soundex ( $str ):string |  Calculate the soundex key of a string
sprintf ( $format [, mixed $args [, mixed $... ]] ):string | Returns a string produced according to the formatting string format. 
sscanf ( string $str , string $format [, &$... ] ):mixed |  Implements an ANSI C compatible sscanf
str_getcsv ( string $input [, string $delimiter = "," [, string $enclosure = '"' [, string $escape = "\\" ]]] ):array
str_ireplace ( $search , $replace , $subject [, int &$count ] ):mixed | returns a string or an array with all occurrences of search in subject (ignoring case) replaced with the given replace value. 
str_pad ( $input , int $pad_length [, $pad_= " " [, int $pad_type = STR_PAD_RIGHT ]] ):string | returns the input string padded on the left, the right, or both sides to the specified padding length. 
str_repeat ( $input , int $multiplier ):string | Returns input repeated multiplier times. 
str_replace ( $search , $replace , $subject [, int &$count ] ):mixed |  Replaces all occurrences of search in haystack with replace
str_rot13 ( $str ):string |  Perform the rot13 transform on a string
str_shuffle ( $str ):string |  Shuffles string. One permutation of all possible is created
str_split ( string $string [, int $split_length = 1 ] ):array | Converts a string to an array. 
str_word_count ( string $string [, int $format = 0 [, string $charlist ]] ):mixed |  Counts the number of words inside a string. 
strcasecmp ( string $str1 , string $str2 ):int | Binary safe case-insensitive string comparison. 
strchr(->) function is an alias of: strstr(). :This |  An alias for strstr
strcmp ( string $str1 , string $str2 ):int | Note that this comparison is case sensitive. 
strcoll ( string $str1 , string $str2 ):int |  Compares two strings using the current locale
strcspn ( string $subject , string $mask [, $start [, $length ]] ):int |  Finds length of initial segment consisting entirely of characters not found in mask. 
strip_tags ( $str [, $allowable_tags ] ):string | This function tries to return a string with all NULL bytes, HTML and PHP tags stripped from a given str.
stripcslashes ( $str ):string | Returns a string with backslashes stripped off. Recognizes C-like \n, \r ..., octal and hexadecimal representation. 
stripos ( string $haystack , mixed $needle [, $offset = 0 ] ):int |  Finds position of first occurrence of a string within another, case insensitive
stripslashes ( $str ):string |  Strips backslashes from a string
stristr ( $haystack , mixed $needle [, bool $before_needle = FALSE ] ):string | Returns all of haystack starting from and including the first occurrence of needle to the end. 
strlen ( string $string ):int | Returns the length of the given string. 
strnatcasecmp ( string $str1 , string $str2 ):int | This function implements a comparison algorithm that orders alphanumeric strings in the way a human being would. 
strnatcmp ( string $str1 , string $str2 ):int | This function implements a comparison algorithm that orders alphanumeric strings in the way a human being would, 
strncasecmp ( string $str1 , string $str2 , $len ):int | like strcasecmp(), but you can specify the number of characters from each string to be used in the comparison. 
strncmp ( string $str1 , string $str2 , $len ):int |  Binary safe string comparison
strpbrk ( $haystack , $char_list ):string | searches the haystack string for a char_list. 
strpos ( string $haystack , mixed $needle [, $offset = 0 ] ):int | Find the numeric position of the first occurrence of needle in the haystack string. 
strrchr ( $haystack , mixed $needle ):string | This function returns the portion of haystack which starts at the last occurrence of needle and goes until the end of haystack. 
strrev ( $):string | Returns string, reversed. 
strripos ( string $haystack , mixed $needle [, $offset = 0 ] ):int |  Finds position of last occurrence of a string within another string
strrpos ( string $haystack , mixed $needle [, $offset = 0 ] ):int | Find the numeric position of the last occurrence of needle in the haystack string. 
strspn ( string $subject , string $mask [, $start [, $length ]] ):int |  Finds length of initial segment consisting entirely of characters found in mask. 
strstr ( $haystack , mixed $needle [, bool $before_needle = FALSE ] ):string |  Finds first occurrence of a string within another
strtok ( $str , $token ):string |  Tokenize a string
strtolower ( $):string |  Makes a string lowercase
strtoupper ( $):string |  Makes a string uppercase
strtr ( $str , $from , $to ):string |  Translates characters in str using given translation tables
substr_compare ( string $main_str , string $str , $offset [, $length [, bool $case_insensitivity = FALSE ]] ):int | compares main_str from position offset with str up to length characters. 
substr_count ( string $haystack , string $needle [, $offset = 0 [, $length ]] ):int |  Returns the number of times a substring occurs in the string
substr_replace ( $string , $replacement , $start [, $length ] ):mixed |  replaces a copy of string delimited by the start and (optionally) length parameters with the string given in replacement. 
substr ( $, int $start [, int $length ] ):string | Returns the portion of string specified by the start and length parameters. 
trim ( $str [, $character_mask = "  | \r\0\x0B" ] ):string |  Strips whitespace from the beginning and end of a string
ucfirst ( $str ):string |  Makes a string's first character uppercase
ucwords ( $str [, $delimiters = " \t\r\n\f\v" ] ):string |  Uppercase the first character of every word in a string
vfprintf ( resource $handle , string $format , array $args ):int |  Output a formatted string into a stream
vprintf ( string $format , array $args ):int |  Output a formatted string
vsprintf ( $format , array $args ):string | Operates as sprintf() but accepts an array of arguments, rather than a variable number of arguments. 
wordwrap ( $str [, int $width = 75 [, $break = "\n" [, bool $cut = FALSE ]]] ):string | Wraps a string to a given number of characters using a string break character. 
token_get_all ( string $source [, int $flags = 0 ] ):array
token_name ( int $token ):string | gets the symbolic name for a PHP token value. 
base64_decode ( $data [, bool $strict = FALSE ] ):string | Decodes a base64 encoded data. 
base64_encode ( $data ):string |  Encodes string using MIME base64 algorithm
get_headers ( string $url [, int $format = 0 [, resource $context ]] ):array | returns an array with the headers sent by the server in response to a HTTP request. 
get_meta_tags ( string $filename [, bool $use_include_path = FALSE ] ):array | Opens filename and parses it line by line for <meta> tags in the file. The parsing stops at </head>. 
http_build_query ( mixed $query_data [, $numeric_prefix [, $arg_separator [, int $enc_type = PHP_QUERY_RFC1738 ]]] ):string | Generates a URL-encoded query string from the associative (or indexed) array provided. 
parse_url ( string $url [, int $component = -1 ] ):mixed |  Parse a URL and return its components
rawurldecode ( $str ):string | Returns a string in which the sequences with percent (%) signs followed by two hex digits have been replaced with literal characters. 
rawurlencode ( $str ):string | Encodes the given string according to RFC 3986. 
urldecode ( $str ):string | Decodes any %## encoding in the given string. Plus symbols ('+') are decoded to a space character. 
urlencode ( $str ):string | This function is convenient when encoding a string to be used in a query part of a URL, as a convenient way to pass variables to the next page. 
boolval ( mixed $var ):bool | Returns the boolean value of var. 
debug_zval_dump ( mixed $variable [, mixed $... ] ):void | Dumps a string representation of an internal zend value to output. 
doubleval(->) function is an alias of: floatval(). :This
empty ( mixed $var ):bool | Determine whether a variable is considered to be empty.
floatval ( mixed $var ):float | Gets the float value of var. 
get_defined_vars ( void ):array | This function returns a multidimensional array containing a list of all defined variables.
get_resource_type ( resource $handle ):string | This function gets the type of the given resource. 
gettype ( mixed $var ):string | Returns the type of the PHP variable var. For type checking, use is_* functions. 
import_request_variables ( string $types [, string $prefix ] ):bool |  Import GET/POST/Cookie variables into the global scope
intval ( mixed $var [, $base = 10 ] ):int | Returns the integer value of var, using the specified base for the conversion (the default is base 10).
is_array ( mixed $var ):bool | Finds whether the given variable is an array. 
is_( mixed $var ):bool | Finds whether the given variable is a boolean. 
is_callable ( mixed $var [, $syntax_only = FALSE [, string &$callable_name ]] ):bool | Verify that the contents of a variable can be called as a function. 
is_countable ( mixed $var ):bool | Verify that the contents of a variable is an array or an object implementing Countable 
is_double(->) function is an alias of: is_float(). :This
is_float ( mixed $var ):bool |  Returns true if variable is float point
is_int ( mixed $var ):bool
is_integer(->) function is an alias of: is_int(). :This
is_iterable ( mixed $var ):bool | Verify that the contents of a variable is accepted by the iterable pseudo-type, i.e. that it is an array or an object implementing Traversable 
is_long(->) function is an alias of: is_int(). :This |  Returns true if variable is a long (integer)
is_null ( mixed $var ):bool | Finds whether the given variable is NULL. 
is_numeric ( mixed $var ):bool | Finds whether the given variable is numeric. 
is_object ( mixed $var ):bool | Finds whether the given variable is an object. 
is_real(->) function is an alias of: is_float(). :This
is_resource ( mixed $var ):bool | Finds whether the given variable is a resource. 
is_scalar ( mixed $var ):bool |  Returns true if value is a scalar
is_string ( mixed $var ):bool | Finds whether the type of the given variable is string. 
isset ( mixed $var [, mixed $... ] ):bool
print_r ( $expression [, bool $return = FALSE ] ):mixed |  Prints out or returns information about the specified variable
serialize ( mixed $value ):string |  Returns a string representation of variable (which can later be unserialized)
settype ( mixed &$var , string $type ):bool | Set the type of variable var to type. 
strval ( mixed $var ):string |  Get the string value of a variable
unserialize ( string $str [, array $options ] ):mixed |  Takes a string representation of variable and recreates it
unset ( mixed $var [, mixed $... ] ):void
var_dump ( mixed $expression [, mixed $... ] ):void |  Dumps a string representation of variable to output
var_export ( $expression [, bool $return = FALSE ] ):mixed | var_export() gets structured, valid php code, information about the given variable.
apache_child_terminate ( void ):bool |  It may be used to terminate a process after a script with high memory consumption has been run.
apache_get_modules ( void ):array | Get a list of loaded Apache modules.
apache_get_version ( void ):string | Fetch the Apache version.
apache_getenv ( $variable [, bool $walk_to_top = FALSE ] ):string |  Get an Apache subprocess_env variable
apache_lookup_uri ( string $filename ):object |  Perform a partial request of the given URI to obtain information about it
apache_note ( $note_name [, $note_value = "" ] ):string |  Get and set Apache request notes
apache_request_headers ( void ):array | Fetches all HTTP request headers from the current request.
apache_reset_timeout ( void ):bool
apache_response_headers ( void ):array | Fetch all HTTP response headers.
apache_setenv ( string $variable , string $value [, $walk_to_top = FALSE ] ):bool |  Set an Apache subprocess_env variable
getallheaders ( void ):array |  Fetch all HTTP request headers
virtual ( string $filename ):bool |  Perform an Apache sub-request
cal_days_in_month ( $calendar , $month , $year ):int | This function will return the number of days in the month of year for the specified calendar.
cal_from_jd ( int $jd , int $calendar ):array | converts the Julian day given in jd into a date of the specified calendar. Supported calendar values are CAL_GREGORIAN, CAL_JULIAN, CAL_JEWISH and CAL_FRENCH.
cal_info ([ int $calendar = -1 ] ):array |  Returns information about a particular calendar
cal_to_jd ( $calendar , $month , $day , $year ):int |  calculates the Julian day count for a date in the specified calendar. Supported calendars are CAL_GREGORIAN, CAL_JULIAN, CAL_JEWISH and CAL_FRENCH.
easter_date ([ $year = date("Y") ] ):int |  Return the timestamp of midnight on Easter of a given year (defaults to current year)
easter_days ([ $year = date("Y") [, $method = CAL_EASTER_DEFAULT ]] ):int |  Return the number of days after March 21 that Easter falls on for a given year (defaults to current year)
frenchtojd ( $month , $day , $year ):int |  Converts a french republic calendar date to julian day count
gregoriantojd ( $month , $day , $year ):int |  Converts a gregorian calendar date to julian day count
jddayofweek ( int $julianday [, int $mode = CAL_DOW_DAYNO ] ):mixed | Returns the day of the week. Can return a string or an integer depending on the mode.
jdmonthname ( int $julianday , int $mode ):string |  Returns name of month for julian day count
jdtofrench ( int $juliandaycount ):string | Converts a Julian Day Count to the French Republican Calendar.
jdtogregorian ( int $julianday ):string | Converts Julian Day Count to a string containing the Gregorian date in the format of "month/day/year".
jdtojewish ( int $juliandaycount [, bool $hebrew = FALSE [, int $fl = 0 ]] ):string | Converts a Julian Day Count to the Jewish Calendar.
jdtojulian ( int $julianday ):string | Converts Julian Day Count to a string containing the Julian Calendar Date in the format of "month/day/year".
jdtounix ( $jday ):int | This function will return a Unix timestamp corresponding to the Julian Day given in jday or FALSE if jday is not inside the Unix epoch (Gregorian years between 1970 and 2037 or 2440588 <= jday <= 2465342 ). The time returned is UTC.
jewishtojd ( $month , $day , $year ):int | handle dates all the way back to the year 1 (3761 B.C.)
juliantojd ( $month , $day , $year ):int |  Converts a julian calendar date to julian day count
unixtojd ([ $timestamp = time() ] ):int | Return the Julian Day for a Unix timestamp (seconds since 1.1.1970), or for the current day if no timestamp is given. Either way, the time is regarded as local time (not UTC).
com_create_guid ( void ):string |  Generate a globally unique identifier (GUID)
com_event_sink ( variant $comobject , object $sinkobject [, mixed $sinkinterface ] ):bool |  Connect events from a COM object to a PHP object
com_get_active_object ( string $progid [, int $code_page ] ):variant | similar of creating a new instance of a COM object, except that it will only return an object to your script if the object is already running.
com_load_typelib ( string $typelib_name [, $case_insensitive = TRUE ] ):bool |  | Loads a Typelibrary and registers its constants
com_message_pump ([ int $timeoutms = 0 ] ):bool |  Process COM messages, sleeping for up to timeoutms milliseconds
com_print_typeinfo ( object $comobject [, string $dispinterface [, $wantsink = FALSE ]] ):bool |  generate a dump of any COM object, provided that it supports enough of the introspection interfaces,
variant_abs ( $val ):mixed | Returns the absolute value of a variant.
variant_add ( $left , $right ):mixed |  "Adds" two variant values together and returns the result
variant_and ( $left , $right ):mixed | Performs a bitwise AND operation. Note that this is slightly different from a regular AND operation.
variant_cast ( $, int $type ):variant |  Convert a variant into a new variant object of another type
variant_cat ( $left , $right ):mixed |  concatenates two variant values together and returns the result
variant_cmp ( mixed $left , mixed $right [, $lcid [, $flags ]] ):int |  Compares two variants
variant_date_from_timestamp ( int $timestamp ):variant | Converts timestamp from a unix timestamp value into a variant of type VT_DATE. This allows easier interopability between the unix-ish parts of PHP and COM.
variant_date_to_timestamp ( variant $variant ):int | Converts variant from a VT_DATE (or similar) value into a Unix timestamp. This allows easier interopability between the Unix-ish parts of PHP and COM.
variant_div ( $left , $right ):mixed | Divides left by right and returns the result.
variant_eqv ( $left , $right ):mixed | Performs a bitwise equivalence on two variants.
variant_fix ( $variant ):mixed | Gets the integer portion of a variant.
variant_get_type ( variant $variant ):int | Returns the type of a variant object.
variant_idiv ( $left , $right ):mixed | Converts left and right to integer values, and then performs integer division.
variant_imp ( $left , $right ):mixed | Performs a bitwise implication operation.
variant_int ( $variant ):mixed | Gets the integer portion of a variant.
variant_mod ( $left , $right ):mixed | Divides left by right and returns the remainder.
variant_mul ( $left , $right ):mixed | Multiplies left by right.
variant_neg ( $variant ):mixed | Performs logical negation of variant.
variant_not ( $variant ):mixed | Performs bitwise not negation on variant and returns the result.
variant_or ( $left , $right ):mixed | Performs a bitwise OR operation. Note that this is slightly different from a regular OR operation.
variant_pow ( $left , $right ):mixed | Returns the result of left to the power of right.
variant_round ( $variant , int $decimals ):mixed | Returns the value of variant rounded to decimals decimal places.
variant_set_type ( variant $variant , int $type ):void | This function is similar to variant_cast() except that the variant is modified "in-place"; no new variant is created. The parameters for this function have identical meaning to those of variant_cast().
variant_set ( variant $variant , mixed $value ):void | Converts value to a variant and assigns it to the variant object; no new variant object is created, and the old value of variant is freed/released.
variant_sub ( $left , $right ):mixed | Subtracts right from left.
variant_xor ( $left , $right ):mixed | Performs a logical exclusion.
ctype_alnum ( string $text ):bool | Checks if all of the characters in the provided string, text, are alphanumeric.
ctype_alpha ( string $text ):bool | Checks if all of the characters in the provided string, text, are alphabetic.
ctype_cntrl ( string $text ):bool | Checks if all of the characters in the provided string, text, are control characters. Control characters are e.g. line feed, tab, escape.
ctype_digit ( string $text ):bool | Checks if all of the characters in the provided string, text, are numerical.
ctype_graph ( string $text ):bool | Checks if all of the characters in the provided string, text, creates visible output.
ctype_lower ( string $text ):bool | Checks if all of the characters in the provided string, text, are lowercase letters.
ctype_print ( string $text ):bool | Checks if all of the characters in the provided string, text, are printable.
ctype_punct ( string $text ):bool | Checks if all of the characters in the provided string, text, are punctuation character.
ctype_space ( string $text ):bool | Checks if all of the characters in the provided string, text, creates whitespace.
ctype_upper ( string $text ):bool | Checks if all of the characters in the provided string, text, are uppercase characters.
ctype_xdigit ( string $text ):bool | Checks if all of the characters in the provided string, text, are hexadecimal 'digits'.
dba_close ( resource $handle ):void | closes the established database and frees all resources of the specified database handle.
dba_delete ( string $key , resource $handle ):bool | deletes the specified entry from the database.
dba_exists ( string $key , resource $handle ):bool | checks whether the specified key exists in the database.
dba_fetch ( $key , resource $handle ):string |  Fetches the data associated with key
dba_firstkey ( resource $handle ):string |  returns the first key of the database and resets the internal key pointer. This permits a linear search through the whole database.
dba_handlers ([ bool $full_info = FALSE ] ):array |  list all the handlers supported by this extension.
dba_insert ( string $key , string $value , resource $handle ):bool |  inserts the entry described with key and value into the database.
dba_key_split ( $key ):mixed | splits a key (string representation) into an array representation.
dba_list ( void ):array | list all open database files.
dba_nextkey ( resource $handle ):string | returns the next key of the database and advances the internal key pointer.
dba_open ( string $path , string $mode [, string $handler [, mixed $... ]] ):resource | establishes a database instance for path with mode using handler.
dba_optimize ( resource $handle ):bool | optimizes the underlying database.
dba_popen ( string $path , string $mode [, string $handler [, mixed $... ]] ):resource | destablishes a persistent database instance for path with mode using handler.
dba_replace ( string $key , string $value , resource $handle ):bool | replaces or inserts the entry described with key and value into the database specified by handle.
dba_sync ( resource $handle ):bool | synchronizes the database. This will probably trigger a physical write to the disk, if supported.
exif_imagetype ( string $filename ):int |  Get the type of an image
exif_read_data ( mixed $stream [, string $sections = NULL [, bool $arrays = FALSE [, bool $thumbnail = FALSE ]]] ):array |  Reads header data from the JPEG/TIFF image filename and optionally reads the internal thumbnails
exif_tagname ( int $index ):string |  Get headername for index or false if not defined
exif_thumbnail ( mixed $stream [, int &$width [, int &$height [, int &$imagetype ]]] ):string |  Reads the embedded thumbnail
read_exif_data(->) function is an alias of: exif_read_data(). :This
finfo_buffer ( resource $finfo , $= NULL [, int $options = FILEINFO_NONE [, resource $context = NULL ]] ):string
finfo_close ( resource $finfo ):bool | This function closes the resource opened by finfo_open().
finfo_file ( resource $finfo , $file_name = NULL [, int $options = FILEINFO_NONE [, resource $context = NULL ]] ):string
finfo_open ([ int $options = FILEINFO_NONE [, string $magic_file = NULL ]] ):resource
finfo_set_flags ( resource $finfo , int $options ):bool
mime_content_type ( $filename ):string | Returns the MIME content type for a file as determined by using information from the magic.mime file.
ftp_alloc ( resource $ftp_stream , int $filesize [, string &$result ] ):bool |  Attempt to allocate space on the remote FTP server
ftp_append ( resource $ftp , string $remote_file , string $local_file [, int $mode = FTP_IMAGE ] ):bool
ftp_cdup ( resource $ftp_stream ):bool | Changes to the parent directory.
ftp_chdir ( resource $ftp_stream , string $directory ):bool | Changes the current directory to the specified one.
ftp_chmod ( resource $ftp_stream , $mode , string $filename ):int | Sets the permissions on the specified remote file to mode.
ftp_close ( resource $ftp_stream ):bool |  Closes the FTP stream
ftp_connect ( string $host [, int $port = 21 [, int $timeout = 90 ]] ):resource | opens an FTP connection to the specified host.
ftp_delete ( resource $ftp_stream , string $path ):bool | deletes the file specified by path from the FTP server.
ftp_exec ( resource $ftp_stream , string $command ):bool | Sends a SITE EXEC command request to the FTP server.
ftp_fget ( resource $ftp_stream , resource $handle , string $remote_file [, int $mode = FTP_IMAGE [, int $resumepos = 0 ]] ):bool |retrieves remote_file from the FTP server, and writes it to the given file pointer.
ftp_fput ( resource $ftp_stream , string $remote_file , resource $handle [, int $mode = FTP_IMAGE [, int $startpos = 0 ]] ):bool | uploads the data from a file pointer to a remote file on the FTP server.
ftp_get_option ( resource $ftp_stream , int $option ):mixed | This function returns the value for the requested option from the specified FTP connection.
ftp_get ( resource $ftp_stream , string $local_file , string $remote_file [, int $mode = FTP_BINARY [, int $resumepos = 0 ]] ):bool |  retrieves a remote file from the FTP server, and saves it into a local file.
ftp_login ( resource $ftp_stream , string $username , string $password ):bool | Logs in to the given FTP stream.
ftp_mdtm ( resource $ftp_stream , string $remote_file ):int |  Returns the last modification time of the file, or -1 on error
ftp_mkdir ( resource $ftp_stream , $directory ):string | Creates the specified directory on the FTP server.
ftp_mlsd ( resource $ftp_stream , string $directory ):array
ftp_nb_continue ( resource $ftp_stream ):int | Continues retrieving/sending a file non-blocking.
ftp_nb_fget ( resource $ftp_stream , resource $handle , string $remote_file [, $mode = FTP_IMAGE [, $resumepos = 0 ]] ):int |  Retrieves a file from the FTP server asynchronly and writes it to an open file
ftp_nb_fput ( resource $ftp_stream , string $remote_file , resource $handle [, $mode = FTP_IMAGE [, $startpos = 0 ]] ):int |  Stores a file from an open file to the FTP server nbronly
ftp_nb_get ( resource $ftp_stream , string $local_file , string $remote_file [, $mode = FTP_IMAGE [, $resumepos = 0 ]] ):int |  Retrieves a file from the FTP server nbhronly and writes it to a local file
ftp_nb_put ( resource $ftp_stream , string $remote_file , string $local_file [, $mode = FTP_IMAGE [, $startpos = 0 ]] ):int |  Stores a file on the FTP server
ftp_nlist ( resource $ftp_stream , string $directory ):array |  Returns an array of filenames in the given directory
ftp_pasv ( resource $ftp_stream , $pasv ):bool |  Turns passive mode on or off
ftp_put ( resource $ftp_stream , string $remote_file , string $local_file [, int $mode = FTP_IMAGE [, int $startpos = 0 ]] ):bool | stores a local file on the FTP server.
ftp_pwd ( resource $ftp_stream ):string |  Returns the present working directory
ftp_quit(->) function is an alias of: ftp_close(). :This
ftp_raw ( resource $ftp_stream , string $command ):array | Sends an arbitrary command to the FTP server.
ftp_rawlist ( resource $ftp_stream , string $directory [, bool $recursive = FALSE ] ):array | executes the FTP LIST command, and returns the result as an array.
ftp_rename ( resource $ftp_stream , string $oldname , string $newname ):bool | renames a file or a directory on the FTP server.
ftp_rmdir ( resource $ftp_stream , string $directory ):bool | Removes the specified directory on the FTP server.
ftp_set_option ( resource $ftp_stream , int $option , mixed $value ):bool | This function controls various runtime options for the specified FTP stream.
ftp_site ( resource $ftp_stream , string $command ):bool |  Sends a SITE command to the server
ftp_size ( resource $ftp_stream , string $remote_file ):int |  Returns the size of the file, or -1 on error
ftp_ssl_connect ( string $host [, int $port = 21 [, int $timeout = 90 ]] ):resource |  Opens a FTP-SSL stream
ftp_systype ( resource $ftp_stream ):string | Returns the system type identifier of the remote FTP server.
iconv_get_encoding ([ string $type = "all" ] ):mixed | Retrieve internal configuration variables of iconv extension.
iconv_mime_decode_headers ( string $encoded_headers [, int $mode = 0 [, string $charset = ini_get("iconv.internal_encoding") ]] ):array | Decodes multiple MIME header fields at once.
iconv_mime_decode ( $encoded_header [, int $mode = 0 [, $charset = ini_get("iconv.internal_encoding") ]] ):string | Decodes a MIME header field.
iconv_mime_encode ( $field_name , $field_value [, array $preferences = NULL ] ):string |  Composes a mime header field with field_name and field_value in a specified scheme
iconv_set_encoding ( string $type , string $charset ):bool | Changes the value of the internal configuration variable specified by type to charset.
iconv_strlen ( string $str [, string $charset = ini_get("iconv.internal_encoding") ] ):int | In contrast to strlen(), iconv_strlen() counts the occurrences of characters in the given byte sequence str on the basis of the specified character set,
iconv_strpos ( string $haystack , string $needle [, $offset = 0 [, string $charset = ini_get("iconv.internal_encoding") ]] ):int |  Finds position of first occurrence of needle within part of haystack beginning with offset
iconv_strrpos ( string $haystack , string $needle [, string $charset = ini_get("iconv.internal_encoding") ] ):int |  Finds position of last occurrence of needle within part of haystack beginning with offset
iconv_substr ( $str , int $offset [, int $length = iconv_strlen($str, $charset) [, $charset = ini_get("iconv.internal_encoding") ]] ):string | Cuts a portion of str specified by the offset and length parameters.
iconv ( $in_charset , $out_charset , $str ):string | Performs a character set conversion on the string str from in_charset to out_charset.
ob_iconv_handler ( $contents , int $status ):string |  Returns str in output buffer converted to the iconv.output_encoding character set
gd_info ( void ):array | Gets information about the version and capabilities of the installed GD library.
getimagesize ( string $filename [, &$imageinfo ] ):array |  Get the size of an image as 4-element array
getimagesizefromstring ( string $imagedata [, &$imageinfo ] ):array
image_type_to_extension ( int $imagetype [, bool $include_dot = TRUE ] ):string | Returns the extension for the given IMAGETYPE_XXX constant.
image_type_to_mime_type ( int $imagetype ):string |  will determine the Mime-Type for an IMAGETYPE constant.
image2wbmp ( resource $image [, string $filename [, int $foreground ]] ):bool | outputs or save a WBMP version of the given image.
imageaffine ( $image , array $affine [, array $clip ] ):resource
imageaffinematrixconcat ( $m1 , $m2 ):array | Returns the concatenation of two affine transformation matrices, what is useful if multiple transformations should be applied to the same image in one go.
imageaffinematrixget ( int $type [, mixed $options ] ):array | Returns an affine transformation matrix.
imagealphablending ( resource $image , $blendmode ):bool | allows for two different modes of drawing on truecolor images. In blending mode, the resulting pixel is opaque.\t\nIn non-blending mode, the drawing color is copied literally with its alpha channel information, replacing the destination pixel.
imageantialias ( resource $image , $enabled ):bool |  Should antialiased functions used or not
imagearc ( resource $image , int $cx , int $cy , int $width , int $height , int $start , int $end , int $color ):bool | draws an arc of circle centered at the given coordinates.
imagebmp ( resource $image [, mixed $to = NULL [, $compressed = TRUE ]] ):bool | Outputs or saves a BMP version of the given image.
imagechar ( resource $image , int $font , int $x , int $y , string $c , int $color ):bool | draws the first character of c in the image identified by image with its upper-left at x,y (top left is 0, 0) with the color color.
imagecharup ( resource $image , int $font , int $x , int $y , string $c , int $color ):bool | Draws the character c vertically at the specified coordinate on the given image.
imagecolorallocate ( resource $image , $red , $green , $blue ):int |  Allocate a color for an image
imagecolorallocatealpha ( resource $image , $red , $green , $blue , $alpha ):int | like imagecolorallocate() with the addition of the transparency parameter alpha.
imagecolorat ( resource $image , $x , $y ):int |  Get the index of the color of a pixel
imagecolorclosest ( resource $image , $red , $green , $blue ):int |  Get the index of the closest color to the specified color
imagecolorclosestalpha ( resource $image , $red , $green , $blue , $alpha ):int | Returns the index of the color in the palette of the image which is "closest" to the specified RGB value and alpha level.
imagecolorclosesthwb ( resource $image , $red , $green , $blue ):int | Get the index of the color which has the hue, white and blackness nearest the given color.
imagecolordeallocate ( resource $image , int $color ):bool | De-allocates a color previously allocated with imagecolorallocate() or imagecolorallocatealpha().
imagecolorexact ( resource $image , $red , $green , $blue ):int |  Get the index of the specified color
imagecolorexactalpha ( resource $image , $red , $green , $blue , $alpha ):int | Returns the index of the specified color+alpha in the palette of the image.
imagecolormatch ( resource $image1 , resource $image2 ):bool | Makes the colors of the palette version of an image more closely match the true color version.
imagecolorresolve ( resource $image , $red , $green , $blue ):int |  Get the index of the specified color or its closest possible alternative
imagecolorresolvealpha ( resource $image , $red , $green , $blue , $alpha ):int | This function is guaranteed to return a color index for a requested color, either the exact color or the closest possible alternative.
imagecolorset ( resource $image , int $index , int $red , int $green , int $blue [, int $alpha = 0 ] ):void | This sets the specified index in the palette to the specified color. This is useful for creating flood-fill-like effects in palleted images without the overhead of performing the actual flood-fill.
imagecolorsforindex ( resource $image , int $index ):array | Gets the color for a specified index.
imagecolorstotal ( resource $image ):int | Returns the number of colors in an image palette.
imagecolortransparent ( resource $image [, $color ] ):int | Sets the transparent color in the given image.
imageconvolution ( resource $image , array $matrix , float $div , float $offset ):bool | Applies a convolution matrix on the image, using the given coefficient and offset.
imagecopy ( resource $dst_im , resource $src_im , int $dst_x , int $dst_y , int $src_x , int $src_y , int $src_w , int $src_h ):bool | Copy a part of src_im onto dst_im starting at the x,y coordinates src_x, src_y with a width of src_w and a height of src_h. The portion defined will be copied onto the x,y coordinates, dst_x and dst_y.
imagecopymerge ( resource $dst_im , resource $src_im , int $dst_x , int $dst_y , int $src_x , int $src_y , int $src_w , int $src_h , int $pct ):bool | Copy a part of src_im onto dst_im starting at the x,y coordinates src_x, src_y with a width of src_w and a height of src_h. The portion defined will be copied onto the x,y coordinates, dst_x and dst_y.
imagecopymergegray ( resource $dst_im , resource $src_im , int $dst_x , int $dst_y , int $src_x , int $src_y , int $src_w , int $src_h , int $pct ):bool |  Merge one part of an image with another
imagecopyresampled ( resource $dst_image , resource $src_image , int $dst_x , int $dst_y , int $src_x , int $src_y , int $dst_w , int $dst_h , int $src_w , int $src_h ):bool |  Copy and resize part of an image using resampling to help ensure clarity
imagecopyresized ( resource $dst_image , resource $src_image , int $dst_x , int $dst_y , int $src_x , int $src_y , int $dst_w , int $dst_h , int $src_w , int $src_h ):bool |  Copy and resize part of an image
imagecreate ( int $width , int $height ):resource |  Create a new image
imagecreatefrombmp ( string $filename ):resource
imagecreatefromgd2 ( string $filename ):resource |  Create a new image from GD2 file or URL
imagecreatefromgd2part ( string $filename , int $srcX , int $srcY , int $width , int $height ):resource |  Create a new image from a given part of GD2 file or URL
imagecreatefromgd ( string $filename ):resource |  Create a new image from GD file or URL
imagecreatefromgif ( string $filename ):resource |  Create a new image from GIF file or URL
imagecreatefromjpeg ( string $filename ):resource |  Create a new image from JPEG file or URL
imagecreatefrompng ( string $filename ):resource |  Create a new image from PNG file or URL
imagecreatefromstring ( string $image ):resource |  returns an image identifier representing the image obtained from the given image. Depends on that your build of PHP supports them: JPEG, PNG, GIF, BMP, WBMP, and GD2.
imagecreatefromwbmp ( string $filename ):resource |  Create a new image from WBMP file or URL
imagecreatefromwebp ( string $filename ):resource
imagecreatefromxbm ( string $filename ):resource |  Create a new image from XBM file or URL
imagecreatefromxpm ( string $filename ):resource |  Create a new image from XPM file or URL
imagecreatetruecolor ( int $width , int $height ):resource | returns an image identifier representing a black image of the specified size.
imagecrop ( $image , array $rect ):resource | Crops an image to the given rectangular area and returns the resulting image. The given image is not modified.
imagecropauto ( $image [, int $mode = -1 [, float $threshold = .5 [, int $color = -1 ]]] ):resource | Automatically crops an image according to the given mode.
imagedashedline(->) imagedashedline ( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color ):bool | This function is deprecated. Use combination of imagesetstyle() and imageline() instead.
imagedestroy ( resource $image ):bool | frees any memory associated with image image.
imageellipse ( resource $image , int $cx , int $cy , int $width , int $height , int $color ):bool | Draws an ellipse centered at the specified coordinates.
imagefill ( resource $image , int $x , int $y , int $color ):bool | Performs a flood fill starting at the given coordinate (top left is 0, 0) with the given color in the image.
imagefilledarc ( resource $image , int $cx , int $cy , int $width , int $height , int $start , int $end , int $color , int $style ):bool | Draws a partial arc centered at the specified coordinate in the given image.
imagefilledellipse ( resource $image , int $cx , int $cy , int $width , int $height , int $color ):bool | Draws an ellipse centered at the specified coordinate on the given image.
imagefilledpolygon ( resource $image , array $points , int $num_points , int $color ):bool | creates a filled polygon in the given image.
imagefilledrectangle ( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color ):bool | Creates a rectangle filled with color in the given image starting at point 1 and ending at point 2. 0, 0 is the top left corner of the image.
imagefilltoborder ( resource $image , int $x , int $y , int $border , int $color ):bool | performs a flood fill whose border color is defined by border.
imagefilter ( resource $image , int $filtertype [, int $arg1 [, int $arg2 [, int $arg3 [, int $arg4 ]]]] ):bool | applies the given filter filtertype on the image.
imageflip ( resource $image , int $mode ):bool | Flips the image image using the given mode.
imagefontheight ( $font ):int | Returns the pixel height of a character in the specified font.
imagefontwidth ( $font ):int | Returns the pixel width of a character in font.
imageftbbox ( float $size , float $angle , string $fontfile , string $text [, $extrainfo ] ):array |  Give the bounding box of a text using fonts via freetype2
imagefttext ( resource $image , float $size , float $angle , int $x , int $y , int $color , string $fontfile , string $text [, $extrainfo ] ):array |  Write text to the image using fonts via freetype2
imagegammacorrect ( resource $image , float $inputgamma , float $outputgamma ):bool | Applies gamma correction to the given gd image given an input and an output gamma.
imagegd2 ( resource $image [, mixed $to = NULL [, int $chunk_size = 128 [, int $type = IMG_GD2_RAW ]]] ):bool | Outputs a GD2 image to the given to.
imagegd ( resource $image [, mixed $to = NULL ] ):bool | Outputs a GD image to the given to.
imagegetclip ( resource $im ):array | retrieves the current clipping rectangle, i.e. the area beyond which no pixels will be drawn.
imagegif ( resource $image [, mixed $to ] ):bool |  Output GIF image to browser or file
imagegrabscreen ( void ):resource
imagegrabwindow ( int $window_handle [, int $client_area = 0 ] ):resource
imageinterlace ( resource $image [, $interlace = 0 ] ):int |  Enable or disable interlace
imageistruecolor ( resource $image ):bool | finds whether the image image is a truecolor image.
imagejpeg ( resource $image [, mixed $to [, int $quality ]] ):bool |  creates a JPEG file from the given image.
imagelayereffect ( resource $image , int $effect ):bool | Set the alpha blending flag to use layering effects.
imageline ( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color ):bool | Draws a line between the two given points.
imageloadfont ( string $file ):int | loads a user-defined bitmap and returns its identifier.
imageopenpolygon ( resource $image , array $points , int $num_points , int $color ):bool | draws an open polygon on the given image. Contrary to imagepolygon(), no line is drawn between the last and the first point.
imagepalettecopy ( resource $destination , resource $source ):void |  copies the palette from the source image to the destination image.
imagepalettetotruecolor ( resource $src ):bool | Converts a palette based image, created by functions like imagecreate() to a true color image, like imagecreatetruecolor().
imagepng ( resource $image [, mixed $to [, int $quality [, int $filters ]]] ):bool | Outputs or saves a PNG image from the given image.
imagepolygon ( resource $image , array $points , int $num_points , int $color ):bool | creates a polygon in the given image.
imagepsbbox ( string $text , resource $font , int $size ):array |  Return the bounding box needed by a string if rasterized
imagepsencodefont ( resource $font_index , string $encodingfile ):bool |  To change a fonts character encoding vector
imagepsextendfont ( resource $font_index , float $extend ):bool | Extend or condense a font (font_index), if the value of the extend parameter is less than one you will be condensing the font.
imagepsfreefont ( resource $font_index ):bool | frees memory used by a PostScript Type 1 font.
imagepsloadfont ( string $filename ):resource | Load a PostScript Type 1 font from the given filename.
imagepsslantfont ( resource $font_index , float $slant ):bool | Slant a given font.
imagepstext ( resource $image , string $text , resource $font_index , int $size , int $foreground , int $background , int $x , int $y [, int $space = 0 [, int $tightness = 0 [, float $angle = 0.0 [, int $antialias_steps = 4 ]]]] ):array |  Rasterize a string over an image
imagerectangle ( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color ):bool | creates a rectangle starting at the specified coordinates.
imageresolution ( resource $image [, int $res_x [, int $res_y ]] ):mixed
imagerotate ( $image , float $angle , int $bgd_color [, int $ignore_transparent = 0 ] ):resource |  Rotate an image using a custom angle
imagesavealpha ( resource $image , $saveflag ):bool |  Include alpha channel to a saved image
imagescale ( $image , int $new_width [, int $new_height = -1 [, int $mode = IMG_BILINEAR_FIXED ]] ):resource | scales an image using the given interpolation algorithm.
imagesetbrush ( resource $image , resource $brush ):bool |  sets the brush image to be used by all line drawing functions (such as imageline() and imagepolygon()) when drawing with the special colors IMG_COLOR_BRUSHED or IMG_COLOR_STYLEDBRUSHED.
imagesetclip ( resource $im , int $x1 , int $y1 , int $x2 , int $y2 ):bool | sets the current clipping rectangle, i.e. the area beyond which no pixels will be drawn.
imagesetinterpolation ( resource $image [, int $method = IMG_BILINEAR_FIXED ] ):bool | Sets the interpolation method, setting an interpolation method affects the rendering of various functions in GD, such as the imagerotate() function.
imagesetpixel ( resource $image , int $x , int $y , int $color ):bool |  draws a pixel at the specified coordinate.
imagesetstyle ( resource $image , array $style ):bool | sets the style to be used by all line drawing functions (such as imageline() and imagepolygon())
imagesetthickness ( resource $image , int $thickness ):bool | sets the thickness of the lines drawn when drawing rectangles, polygons, arcs etc. to thickness pixels.
imagesettile ( resource $image , resource $tile ):bool |  Set the tile image to $tile when filling $image with the "IMG_COLOR_TILED" color
imagestring ( resource $image , int $font , int $x , int $y , string $string , int $color ):bool | Draws a string at the given coordinates.
imagestringup ( resource $image , int $font , int $x , int $y , string $string , int $color ):bool | Draws a string vertically at the given coordinates.
imagesx ( resource $image ):int | Returns the width of the given image resource.
imagesy ( resource $image ):int | Returns the height of the given image resource.
imagetruecolortopalette ( resource $image , $dither , int $ncolors ):bool | converts a truecolor image to a palette image.
imagettfbbox ( float $size , float $angle , string $fontfile , string $text ):array |  Give the bounding box of a text using TrueType fonts
imagettftext ( resource $image , float $size , float $angle , int $x , int $y , int $color , string $fontfile , string $text ):array |  Write text to the image using a TrueType font
imagetypes ( void ):int | Returns the image types supported by the current PHP installation.
imagewbmp ( resource $image [, mixed $to [, int $foreground ]] ):bool |  outputs or save a WBMP version of the given image.
imagewebp ( resource $image [, mixed $to = NULL [, int $quality = 80 ]] ):bool | Outputs or saves a WebP version of the given image.
imagexbm ( resource $image , string $filename [, int $foreground ] ):bool |  Output XBM image to browser or file
iptcembed ( string $iptcdata , string $jpeg_file_name [, int $spool = 0 ] ):mixed | Embeds binary IPTC data into a JPEG image.
iptcparse ( string $iptcblock ):array | Parses an  IPTC block into its single tags.
jpeg2wbmp ( string $jpegname , string $wbmpname , int $dest_height , int $dest_width , int $threshold ):bool | Converts a JPEG file into a WBMP file.
png2wbmp ( string $pngname , string $wbmpname , int $dest_height , int $dest_width , int $threshold ):bool | Converts a PNG file into a WBMP file.
intl_error_name ( int $error_code ):string | Return ICU error code name.
intl_get_error_code ( void ):int | Useful to handle errors occurred in static methods when there's no object to get error code from.
intl_get_error_message ( void ):string | Get error message from last internationalization function called.
intl_is_failure ( int $error_code ):bool
json_decode ( string $json [, bool $assoc = FALSE [, int $depth = 512 [, int $options = 0 ]]] ):mixed | Takes a JSON encoded string and converts it into a PHP variable.
json_encode ( mixed $value [, int $options = 0 [, int $depth = 512 ]] ):string
json_last_error_msg ( void ):string
json_last_error ( void ):int | Returns the last error (if any) occurred during the last JSON encoding/decoding.
mb_check_encoding ([ string $var = NULL [, string $encoding = mb_internal_encoding() ]] ):bool | Checks if the specified byte stream is valid for the specified encoding. It is useful to prevent so-called "Invalid Encoding Attack".
mb_chr ( int $cp [, $encoding ] ):string
mb_convert_case ( $str , int $mode [, $encoding = mb_internal_encoding() ] ):string | Performs case folding on a string, converted in the way specified by mode.
mb_convert_encoding ( $str , $to_encoding [, mixed $from_encoding = mb_internal_encoding() ] ):string | Converts the character encoding of string str to to_encoding from optionally from_encoding.
mb_convert_kana ( $str [, $option = "KV" [, $encoding = mb_internal_encoding() ]] ):string | Performs a "han-kaku" - "zen-kaku" conversion for string str. This function is only useful for Japanese.
mb_convert_variables ( $to_encoding , mixed $from_encoding , mixed &$vars [, mixed &$... ] ):string |  Converts the string resource in variables to desired encoding
mb_decode_mimeheader ( $str ):string | Decodes encoded-word string str in MIME header.
mb_decode_numericentity ( $str , array $convmap [, $encoding = mb_internal_encoding() [, bool $is_hex = FALSE ]] ):string | Convert numeric string reference of string str in a specified block to character.
mb_detect_encoding ( $str [, mixed $encoding_list = mb_detect_order() [, bool $strict = FALSE ]] ):string | Detects character encoding in string str.
mb_detect_order ([ $encoding_list = mb_detect_order() ] ):mixed | Sets the automatic character encoding detection order to encoding_list.
mb_encode_mimeheader ( $str [, $charset = determined by mb_language() [, $transfer_encoding = "B" [, $linefeed = "\r\n" [, int $indent = 0 ]]]] ):string | Encodes a given string str by the MIME header encoding scheme.
mb_encode_numericentity ( $str , array $convmap [, $encoding = mb_internal_encoding() [, bool $is_hex = FALSE ]] ):string | Converts specified character codes in string str from character code to HTML numeric character reference.
mb_encoding_aliases ( string $encoding ):array | Returns an array of aliases for a known encoding type.
mb_ereg_match ( string $pattern , string $string [, string $option = "msr" ] ):bool | A regular expression match for a multibyte string
mb_ereg_replace_callback ( $pattern , callable $callback , $[, $option = "msr" ] ):string
mb_ereg_replace ( $pattern , $replacement , $[, $option = "msr" ] ):string | Scans string for matches to pattern, then replaces the matched text with replacement
mb_ereg_search_getpos ( void ):int | Returns the start point for the next regular expression match.
mb_ereg_search_getregs ( void ):array | Retrieve the result from the last multibyte regular expression match
mb_ereg_search_init ( string $string [, string $pattern [, string $option = "msr" ]] ):bool | sets string and pattern for a multibyte regular expression. These values are used for mb_ereg_search(), mb_ereg_search_pos(), and mb_ereg_search_regs().
mb_ereg_search_pos ([ string $pattern [, string $option = "ms" ]] ):array |  Regular expression search for multibyte string
mb_ereg_search_regs ([ string $pattern [, string $option = "ms" ]] ):array | Returns the matched part of a multibyte regular expression.
mb_ereg_search_setpos ( int $position ):bool | sets the starting point of a match for mb_ereg_search().
mb_ereg_search ([ string $pattern [, string $option = "ms" ]] ):bool | Performs a multibyte regular expression match for a predefined multibyte string.
mb_ereg ( string $pattern , string $string [, array &$regs ] ):int | Executes the regular expression match with multibyte support.
mb_eregi_replace ( $pattern , $replace , $[, $option = "msri" ] ):string | Scans string for matches to pattern, then replaces the matched text with replacement.
mb_eregi ( string $pattern , string $string [, array &$regs ] ):int | Executes the case insensitive regular expression match with multibyte support.
mb_get_info ([ string $type = "all" ] ):mixed | returns the internal setting parameters of mbstring.
mb_http_input ([ string $type = "" ] ):mixed | Detects the HTTP input character encoding.
mb_http_output ([ string $encoding = mb_http_output() ] ):mixed | Set/Get the HTTP output character encoding. Output after this function is called will be converted from the set internal encoding to encoding.
mb_internal_encoding ([ string $encoding = mb_internal_encoding() ] ):mixed | Set/Get the internal character encoding
mb_language ([ string $language = mb_language() ] ):mixed | Set/Get the current language.
mb_list_encodings ( void ):array | Returns an array containing all supported encodings.
mb_ord ( string $str [, string $encoding ] ):int
mb_output_handler ( $contents , int $status ):string | The ob_start() callback function.  Converts characters in the output buffer from internal character encoding to HTTP output character encoding.
mb_parse_str ( string $encoded_string [, array &$result ] ):bool | Parses GET data and sets global variables.
mb_preferred_mime_name ( $encoding ):string | Get a MIME charset string for a specific encoding.
mb_regex_encoding ([ string $encoding = mb_regex_encoding() ] ):mixed | Set/Get character encoding for a multibyte regex.
mb_regex_set_options ([ $options = mb_regex_set_options() ] ):string | Sets the default options described by options for multibyte regex functions.
mb_scrub ( $str [, $encoding ] ):string
mb_send_mail ( string $to , string $subject , string $message [, mixed $additional_headers = NULL [, string $additional_parameter = NULL ]] ):bool | Sends email. Headers and messages are converted and encoded according to the mb_language() setting. see mail().
mb_split ( string $pattern , string $string [, int $limit = -1 ] ):array | Split a multibyte string using regular expression pattern and returns the result as an array.
mb_strcut ( $str , int $start [, int $length = NULL [, $encoding = mb_internal_encoding() ]] ):string | extracts a substring from a string similarly to mb_substr(), but operates on bytes instead of characters.
mb_strimwidth ( $str , int $start , int $width [, $trimmarker = "" [, $encoding = mb_internal_encoding() ]] ):string | Truncates string str to specified width.
mb_stripos ( string $haystack , string $needle [, $offset = 0 [, string $encoding = mb_internal_encoding() ]] ):int |  returns the numeric position of the first occurrence of needle in the haystack string. case-insensitive. If needle is not found, it returns FALSE.
mb_stristr ( $haystack , $needle [, bool $before_needle = FALSE [, $encoding = mb_internal_encoding() ]] ):string | finds the first occurrence of needle in haystack and returns the portion of haystack. case-insensitive. If needle is not found, it returns FALSE.
mb_strlen ( string $str [, string $encoding = mb_internal_encoding() ] ):int | Gets the length of a string.
mb_strpos ( string $haystack , string $needle [, $offset = 0 [, string $encoding = mb_internal_encoding() ]] ):int |  Find position of first occurrence of a string within another
mb_strrchr ( $haystack , $needle [, bool $part = FALSE [, $encoding = mb_internal_encoding() ]] ):string |  finds the last occurrence of needle in haystack and returns the portion of haystack. If needle is not found, it returns FALSE.
mb_strrichr ( $haystack , $needle [, bool $part = FALSE [, $encoding = mb_internal_encoding() ]] ):string |  finds the last occurrence of needle in haystack and returns the portion of haystack. - case-insensitive.
mb_strripos ( string $haystack , string $needle [, $offset = 0 [, string $encoding = mb_internal_encoding() ]] ):int | performs case-insensitive multi-byte safe strripos() operation based on number of characters.
mb_strrpos ( string $haystack , string $needle [, $offset = 0 [, string $encoding = mb_internal_encoding() ]] ):int | Performs a multibyte safe strrpos() operation based on the number of characters. First character's position is 0. case_sensitive
mb_strstr ( $haystack , $needle [, bool $before_needle = FALSE [, $encoding = mb_internal_encoding() ]] ):string | finds the first occurrence of needle in haystack and returns the portion of haystack. If needle is not found, it returns FALSE. case-sensitive
mb_strtolower ( $str [, $encoding = mb_internal_encoding() ] ):string | Returns str with all alphabetic characters converted to lowercase.
mb_strtoupper ( $str [, $encoding = mb_internal_encoding() ] ):string | Returns str with all alphabetic characters converted to uppercase.
mb_strwidth ( string $str [, string $encoding = mb_internal_encoding() ] ):int |  Gets terminal width of a string
mb_substitute_character ([ $substchar = mb_substitute_character() ] ):mixed |  Sets the current substitute_character or returns the current substitute_character
mb_substr_count ( string $haystack , string $needle [, string $encoding = mb_internal_encoding() ] ):int | Counts the number of times the needle substring occurs in the haystack string.
mb_substr ( $str , int $start [, int $length = NULL [, $encoding = mb_internal_encoding() ]] ):string | Performs a multi-byte safe substr() operation based on number of characters. Position is counted from the beginning of str. First character's position is 0. Second character position is 1, and so on.
nsapi_request_headers ( void ):array |  Get all headers from the request
nsapi_response_headers ( void ):array | Gets all the NSAPI response headers.
nsapi_virtual ( string $uri ):bool |  Perform an NSAPI sub-request
opcache_compile_file ( string $file ):bool | This function compiles a PHP script and adds it to the opcode cache without executing it. This can be used to prime the cache after a Web server restart by pre-caching files that will be included in later requests.
opcache_get_configuration ( void ):array | This function returns configuration information about the cache instance
opcache_get_status ([ bool $get_scripts = TRUE ] ):array | This function returns state information about the cache instance
opcache_invalidate ( string $script [, $force = FALSE ] ):bool | This function invalidates a particular script from the opcode cache. If force is unset or FALSE, the script will only be invalidated if the modification time of the script is newer than the cached opcodes.
opcache_is_script_cached ( string $file ):bool | This function checks if a PHP script has been cached in OPCache. This can be used to more easily detect the "warming" of the cache for a particular script.
opcache_reset ( void ):bool | This function resets the entire opcode cache. After calling, all scripts will be reloaded and reparsed the next time they are hit.
pcntl_alarm ( $seconds ):int | Creates a timer that will send a SIGALRM signal to the process after the given number of seconds. Any call to pcntl_alarm() will cancel any previously set alarm.
pcntl_async_signals ([ $on = NULL ] ):bool | If the on parameter is omitted, pcntl_async_signals() returns whether asynchronous signal handling is enabled. Otherwise, asynchronous signal handling is enabled or disabled.
pcntl_errno(->) function is an alias of: pcntl_get_last_error() :This
pcntl_exec ( string $path [, array $args [, array $envs ]] ):void | Executes the program with the given arguments.
pcntl_fork ( void ):int | creates a child process that differs from the parent process only in its PID and PPID. (see forks manpage)
pcntl_get_last_error ( void ):int
pcntl_getpriority ([ $pid = getmypid() [, $process_identifier = PRIO_PROCESS ]] ):int | gets the priority of pid. see your system's getpriority(2) man page for specific details.
pcntl_setpriority ( int $priority [, int $pid = getmypid() [, int $process_identifier = PRIO_PROCESS ]] ):bool | pcntl_setpriority() sets the priority of pid.
pcntl_signal_dispatch ( void ):bool | calls the signal handlers installed by pcntl_signal() for each pending signal.
pcntl_signal_get_handler ( int $signo ):mixed | will get the current handler for the specified signo.
pcntl_signal ( int $signo , callable|int $handler [, $restart_syscalls = TRUE ] ):bool | installs a new signal handler or replaces the current signal handler for the signal indicated by signo.
pcntl_sigprocmask ( int $how , array $set [, array &$oldset ] ):bool | adds, removes or sets blocked signals, depending on the how parameter.
pcntl_sigtimedwait ( array $set [, array &$siginfo [, $seconds = 0 [, $nanoseconds = 0 ]]] ):int |  like pcntl_sigwaitinfo() except that it takes two additional parameters, seconds and nanoseconds to be placed on the time for which the script is suspended.
pcntl_sigwaitinfo ( array $set [, array &$siginfo ] ):int |  suspends execution of the calling script until one of the signals given in set are delivered. If one of the signal is already pending, it will return immediately.
pcntl_strerror ( int $errno ):string
pcntl_wait ( &$status [, $options = 0 [, array &$rusage ]] ):int |  Waits on or returns the status of a forked child as defined by the waitpid() system call
pcntl_waitpid ( $pid , &$status [, $options = 0 [, array &$rusage ]] ):int |  Waits on or returns the status of a forked child as defined by the waitpid() system call
pcntl_wexitstatus ( $status ):int | Returns the return code of a terminated child. This function is only useful if pcntl_wifexited() returned TRUE.
pcntl_wifexited ( int $status ):bool | Checks whether the child status code represents a normal exit.
pcntl_wifsignaled ( int $status ):bool | Checks whether the child process exited because of a signal which was not caught.
pcntl_wifstopped ( int $status ):bool | Checks whether the child process which caused the return is currently stopped; this is only possible if the call to pcntl_waitpid() was done using the option WUNTRACED.
pcntl_wstopsig ( $status ):int | Returns the number of the signal which caused the child to stop. This function is only useful if pcntl_wifstopped() returned TRUE.
pcntl_wtermsig ( $status ):int | Returns the number of the signal that caused the child process to terminate. This function is only useful if pcntl_wifsignaled() returned TRUE.
preg_filter ( $pattern , $replacement , $subject [, int $limit = -1 [, int &$count ]] ):mixed |  identical to preg_replace(), except it only returns the (possibly transformed) subjects where there was a match.
preg_grep ( string $pattern , $input [, int $flags = 0 ] ):array | Returns the array consisting of the elements of the input array that match the given pattern.
preg_last_error ( void ):int
preg_match_all ( string $pattern , string $subject [, array &$matches [, $flags = PREG_PATTERN_ORDER [, $offset = 0 ]]] ):int |  Perform a Perl-style global regular expression match
preg_match ( string $pattern , string $subject [, array &$matches [, $flags = 0 [, $offset = 0 ]]] ):int | Searches subject for a match to the regular expression given in pattern.
preg_quote ( $str [, $delimiter = NULL ] ):string |  Quote regular expression characters plus an optional character
preg_replace_callback_array ( array $patterns_and_callbacks , $subject [, int $limit = -1 [, int &$count ]] ):mixed | like preg_replace_callback(), except that callbacks are executed on a per-pattern basis.
preg_replace_callback ( $pattern , callable $callback , $subject [, int $limit = -1 [, int &$count ]] ):mixed | like preg_replace(), except for the fact that instead of replacement parameter, one should specify a callback.
preg_replace ( $pattern , $replacement , $subject [, int $limit = -1 [, int &$count ]] ):mixed | Searches subject for matches to pattern and replaces them with replacement.
preg_split ( string $pattern , string $subject [, int $limit = -1 [, int $flags = 0 ]] ):array | Split the given string by a regular expression.
posix_access ( string $file [, int $mode = POSIX_F_OK ] ):bool | checks the user's permission of a file.
posix_ctermid ( void ):string | Generates a string which is the pathname for the current controlling terminal for the process. On error this will set errno, which can be checked using posix_get_last_error()
posix_errno(->) function is an alias of: posix_get_last_error(). :This
posix_get_last_error ( void ):int | Retrieve the error number set by the last posix function that failed. The system error message associated with the errno may be checked with posix_strerror().
posix_getcwd ( void ):string | Gets the absolute pathname of the script's current working directory. On error, it sets errno which can be checked using posix_get_last_error()
posix_getegid ( void ):int | Return the numeric effective group ID of the current process.
posix_geteuid ( void ):int | Return the numeric effective user ID of the current process. See also posix_getpwuid() for information on how to convert this into a useable username.
posix_getgid ( void ):int | Return the numeric real group ID of the current process.
posix_getgrgid ( int $gid ):array | Gets information about a group provided its id.
posix_getgrnam ( string $name ):array | Gets information about a group provided its name.
posix_getgroups ( void ):array | Gets the group set of the current process.
posix_getlogin ( void ):string | Returns the login name of the user owning the current process.
posix_getpgid ( $pid ):int | Returns the process group identifier of the process pid or FALSE on failure.
posix_getpgrp ( void ):int | Return the process group identifier of the current process.
posix_getpid ( void ):int | Return the process identifier of the current process.
posix_getppid ( void ):int | Return the process identifier of the parent process of the current process.
posix_getpwnam ( string $username ):array | Returns an array of information about the given user.
posix_getpwuid ( int $uid ):array | Returns an array of information about the user referenced by the given user ID.
posix_getrlimit ( void ):array |  Get system resource consumption limits (This is not a POSIX function, but a BSDism and a SVR4ism. We compile conditionally)
posix_getsid ( $pid ):int | Return the session id of the process pid. The session id of a process is the process group id of the session leader.
posix_getuid ( void ):int | Return the numeric real user ID of the current process.
posix_initgroups ( string $name , int $base_group_id ):bool | Calculates the group access list for the user specified in name.
posix_isatty ( mixed $fd ):bool | Determines if the file descriptor fd refers to a valid terminal type device.
posix_kill ( int $pid , int $sig ):bool | Send the signal sig to the process with the process identifier pid.
posix_mkfifo ( string $pathname , int $mode ):bool | creates a special FIFO file which exists in the file system and acts as a bidirectional communication endpoint for processes.
posix_mknod ( string $pathname , int $mode [, int $major = 0 [, int $minor = 0 ]] ):bool | Creates a special or ordinary file.
posix_setegid ( int $gid ):bool | Set the effective group ID of the current process. This is a privileged function and needs appropriate privileges (usually root) on the system to be able to perform this function.
posix_seteuid ( int $uid ):bool | Set the effective user ID of the current process. This is a privileged function and needs appropriate privileges (usually root) on the system to be able to perform this function.
posix_setgid ( int $gid ):bool |  Set group id (POSIX.1, 4.2.2)
posix_setpgid ( int $pid , int $pgid ):bool | Let the process pid join the process group pgid.
posix_setrlimit ( int $resource , int $softlimit , int $hardlimit ):bool
posix_setsid ( void ):int | Make the current process a session leader.
posix_setuid ( int $uid ):bool | Set the real user ID of the current process. This is a privileged function that needs appropriate privileges (usually root) on the system to be able to perform this function.
posix_strerror ( int $errno ):string | Returns the POSIX system error message associated with the given errno. You may get the errno parameter by calling posix_get_last_error().
posix_times ( void ):array | Gets information about the current CPU usage.
posix_ttyname ( mixed $fd ):string | Returns a string for the absolute path to the current terminal device that is open on the file descriptor fd.
posix_uname ( void ):array |  Get system name (POSIX.1, 4.4.1)
ftok ( string $pathname , string $proj ):int | The function converts the pathname of an existing accessible file and a project identifier into an integer for use with for example shmop_open() and other System V IPC keys.
msg_get_queue ( int $key [, int $perms = 0666 ] ):resource | returns an id that can be used to access the System V message queue with the given key.
msg_queue_exists ( int $key ):bool | Checks whether the message queue key exists.
msg_receive ( resource $queue , int $desiredmsgtype , int &$msgtype , int $maxsize , mixed &$message [, $unserialize = TRUE [, int $flags = 0 [, int &$errorcode ]]] ):bool | will receive the first message from the specified queue of the type specified by desiredmsgtype.
msg_remove_queue ( resource $queue ):bool |  destroys the message queue specified by the queue. Only use this function when all processes have finished working with the message queue.
msg_send ( resource $queue , int $msgtype , mixed $message [, $serialize = TRUE [, $blocking = TRUE [, int &$errorcode ]]] ):bool | sends a message of type msgtype (MUST be greater than 0) to the message queue specified by queue.
msg_set_queue ( resource $queue , array $data ):bool |  Set information for a message queue
msg_stat_queue ( resource $queue ):array |  returns the message queue meta data for the message queue specified by the queue.
sem_acquire ( resource $sem_identifier [, $nowait = FALSE ] ):bool |  Acquires the semaphore with the given id, blocking if necessary
sem_get ( int $key [, int $max_acquire = 1 [, int $perm = 0666 [, int $auto_release = 1 ]]] ):resource |  Return an id for the semaphore with the given key, and allow max_acquire (default 1) processes to acquire it simultaneously
sem_release ( resource $sem_identifier ):bool |  Releases the semaphore with the given id
sem_remove ( resource $sem_identifier ):bool |  Removes semaphore from Unix systems
shm_attach ( int $key [, int $memsize [, int $perm = 0666 ]] ):resource |  Creates or open a shared memory segment
shm_detach ( resource $shm_identifier ):bool | disconnects from the shared memory given by the shm_identifier created by shm_attach().
shm_get_var ( resource $shm_identifier , int $variable_key ):mixed | returns the variable with a given variable_key, in the given shared memory segment. The variable is still present in the shared memory.
shm_has_var ( resource $shm_identifier , int $variable_key ):bool | Checks whether a specific key exists inside a shared memory segment.
shm_put_var ( resource $shm_identifier , int $variable_key , mixed $variable ):bool |  Inserts or updates a variable in shared memory
shm_remove_var ( resource $shm_identifier , int $variable_key ):bool | Removes a variable with a given variable_key and frees the occupied memory.
shm_remove ( resource $shm_identifier ):bool | removes the shared memory shm_identifier. All data will be destroyed.
shmop_close ( resource $shmid ):void |  used to close a shared memory block.
shmop_delete ( resource $shmid ):bool |  used to delete a shared memory block.
shmop_open ( int $key , string $flags , int $mode , int $size ):resource |  can create or open a shared memory block.
shmop_read ( resource $shmid , int $start , int $count ):string | will read a string from shared memory block.
shmop_size ( resource $shmid ):int | used to get the size, in bytes of the shared memory block.
shmop_write ( resource $shmid , string $data , $offset ):int | will write a string into shared memory block.
socket_accept ( $socket ):resource |  Accepts a connection on the listening socket fd
socket_addrinfo_bind ( $addr ):resource | Create a Socket resource, and bind it to the provided AddrInfo resource. The return value of this function may be used with socket_listen().
socket_addrinfo_connect ( $addr ):resource | Create a Socket resource, and connect it to the provided AddrInfo resource. The return value of this function may be used with the rest of the socket functions.
socket_addrinfo_explain ( resource $addr ):array | exposes the underlying addrinfo structure.
socket_addrinfo_lookup ( string $host [, string $service [, $hints ]] ):array | Lookup different ways we can connect to host. The returned array contains a set of resources that we can bind to using socket_addrinfo_bind().
socket_bind ( resource $socket , string $address [, int $port = 0 ] ):bool | Binds the name given in address to the socket described by socket.
socket_clear_error ([ resource $socket ] ):void |  Clears the error on the socket or the last error code.
socket_close ( resource $socket ):void | closes the socket resource given by socket.
socket_cmsg_space ( $level , $type [, $n = 0 ] ):int
socket_connect ( resource $socket , string $address [, int $port = 0 ] ):bool | Initiate a connection to address using the socket resource socket,  created with socket_create().
socket_create_listen ( int $port [, int $backlog = 128 ] ):resource |  Opens a socket on port to accept connections
socket_create_pair ( int $domain , int $type , int $protocol , array &$fd ):bool | creates two connected and indistinguishable sockets, and stores them in fd. This function is commonly used in IPC (InterProcess Communication).
socket_create ( int $domain , int $type , int $protocol ):resource | Creates and returns a socket resource.
socket_export_stream ( $socket ):resource
socket_get_option ( resource $socket , int $level , int $optname ):mixed | retrieves the value for the option specified by the optname parameter for the specified socket.
socket_getopt(->) function is an alias of: socket_get_option(). :This
socket_getpeername ( resource $socket , string &$address [, int &$port ] ):bool | Queries the remote side of the given socket which may either result in host/port or in a Unix filesystem path, dependent on its type.
socket_getsockname ( resource $socket , string &$addr [, int &$port ] ):bool | should only be used for sockets created with socket_accept() or a primary server socket following a call to socket_bind().
socket_import_stream ( $stream ):resource | Imports a stream that encapsulates a socket into a socket extension resource.
socket_last_error ([ resource $socket ] ):int |  Returns the last socket error (either the last used or the provided socket resource)
socket_listen ( resource $socket [, int $backlog = 0 ] ):bool |  Sets the maximum number of connections allowed to be waited for on the socket specified by fd
socket_read ( resource $socket , int $length [, int $type = PHP_BINARY_READ ] ):string | reads from the socket resource socket created by the socket_create() or socket_accept() functions.
socket_recv ( resource $socket , string &$buf , $len , $flags ):int |  Receives data from a connected socket
socket_recvfrom ( resource $socket , string &$buf , $len , $flags , string &$name [, &$port ] ):int |  Receives data from a socket, connected or not
socket_recvmsg ( resource $socket , array &$message [, $flags = 0 ] ):int
socket_select ( array &$read , array &$write , array &$except , $tv_sec [, $tv_usec = 0 ] ):int | accepts arrays of sockets and waits for them to change status.
socket_send ( resource $socket , string $buf , $len , $flags ):int | sends len bytes to the socket socket from buf.
socket_sendmsg ( resource $socket , array $message [, $flags = 0 ] ):int
socket_sendto ( resource $socket , string $buf , $len , $flags , string $addr [, $port = 0 ] ):int |  sends len bytes from buf through the socket socket to the port at the address addr.
socket_set_block ( resource $socket ):bool |  Sets blocking mode on a socket resource
socket_set_nonblock ( resource $socket ):bool |  Sets nonblocking mode on a socket resource
socket_set_option ( resource $socket , int $level , int $optname , mixed $optval ):bool | sets the option specified by the optname parameter, at the specified protocol level, to the value pointed to by the optval parameter for the socket.
socket_setopt(->) function is an alias of: socket_set_option(). :This
socket_shutdown ( resource $socket [, int $how = 2 ] ):bool |  Shuts down a socket for receiving, sending, or both.
socket_strerror ( int $errno ):string |  Returns a string describing an error
socket_write ( resource $socket , string $buffer [, $length = 0 ] ):int | writes to the socket from the given buffer.
xmlrpc_decode_request ( string $xml , string &$method [, string $encoding ] ):mixed |  Decodes XML into native PHP types
xmlrpc_decode ( string $xml [, string $encoding = "iso-8859-1" ] ):mixed |  Decodes XML into native PHP types
xmlrpc_encode_request ( $method , mixed $params [, array $output_options ] ):string |  Generates XML for a method request
xmlrpc_encode ( mixed $value ):string |  Generates XML for a PHP value
xmlrpc_get_type ( mixed $value ):string |  Gets xmlrpc type for a PHP value. Especially useful for base64 and datetime strings
xmlrpc_is_fault ( array $arg ):bool |  Determines if an array value represents an XMLRPC fault.
xmlrpc_parse_method_descriptions ( string $xml ):array |  Decodes XML into a list of method descriptions
xmlrpc_server_add_introspection_data ( resource $server , array $desc ):int |  Adds introspection documentation
xmlrpc_server_call_method ( resource $server , $xml , mixed $user_data [, array $output_options ] ):string |  Parses XML requests and call methods
xmlrpc_server_create ( void ):resource |  Creates an xmlrpc server
xmlrpc_server_destroy ( resource $server ):bool |  Destroys server resources
xmlrpc_server_register_introspection_callback ( resource $server , string $function ):bool |  Register a PHP function to generate documentation
xmlrpc_server_register_method ( resource $server , string $method_name , string $function ):bool |  Register a PHP function to handle method matching method_name
xmlrpc_set_type ( string &$value , string $type ):bool |  Sets xmlrpc type, base64 or datetime, for a PHP string value
deflate_add ( resource $context , $data [, int $flush_mode = ZLIB_SYNC_FLUSH ] ):string | Incrementally deflates data in the specified context.
deflate_init ( int $encoding [, array $options = array() ] ):resource
gzclose ( resource $zp ):bool | Closes the given gz-file pointer.
gzcompress ( $data [, int $level = -1 [, int $encoding = ZLIB_ENCODING_DEFLATE ]] ):string | Gzip-compress a string
gzdecode ( $data [, int $length ] ):string | This function returns a decoded version of the input data.
gzdeflate ( $data [, int $level = -1 [, int $encoding = ZLIB_ENCODING_RAW ]] ):string | Gzip-compress a string
gzencode ( $data [, int $level = -1 [, int $encoding_mode = FORCE_GZIP ]] ):string | GZ encode a string
gzeof ( resource $zp ):int | Tests the given GZ file pointer for EOF.
gzfile ( string $filename [, int $use_include_path = 0 ] ):array | like readgzfile(), except that it returns the file in an array.
gzgetc ( resource $zp ):string | Returns a string containing a single (uncompressed) character read from the given gz-file pointer.
gzgets ( resource $zp [, int $length ] ):string | Gets a (uncompressed) string of up to length - 1 bytes read from the given file pointer. Reading ends when length - 1 bytes have been read, on a newline, or on EOF.
gzgetss ( resource $zp , int $length [, $allowable_tags ] ):string | Identical to gzgets(), except that gzgetss() attempts to strip any HTML and PHP tags from the text it reads.
gzinflate ( $data [, int $length = 0 ] ):string | This function inflates a deflated string.
gzopen ( string $filename , string $mode [, int $use_include_path = 0 ] ):resource |  Open a .gz-file and return a .gz-file pointer
gzpassthru ( resource $zp ):int
gzputs(->) function is an alias of: gzwrite(). :This
gzread ( resource $zp , int $length ):string | reads up to length bytes from the given gz-file pointer. Reading stops when length (uncompressed) bytes have been read or EOF is reached.
gzrewind ( resource $zp ):bool | Sets the file position indicator of the given gz-file pointer to the beginning of the file stream.
gzseek ( resource $zp , $offset [, $whence = SEEK_SET ] ):int
gztell ( resource $zp ):int | Gets the position of the given file pointer; i.e., its offset into the uncompressed file stream.
gzuncompress ( $data [, int $length = 0 ] ):string | This function uncompress a compressed string.
gzwrite ( resource $zp , string $string [, $length ] ):int | writes the contents of string to the given gz-file.
inflate_add ( resource $context , $encoded_data [, int $flush_mode = ZLIB_SYNC_FLUSH ] ):string
inflate_get_read_len ( resource $resource ):int
inflate_get_status ( resource $resource ):int | Usually returns either ZLIB_OK or ZLIB_STREAM_END.
inflate_init ( int $encoding [, array $options = array() ] ):resource | Initialize an incremental inflate context with the specified encoding.
readgzfile ( string $filename [, $use_include_path = 0 ] ):int |  Output a .gz-file
zlib_decode ( $data [, $max_decoded_len ] ):string
zlib_encode ( $data , int $encoding [, int $level = -1 ] ):string
zlib_get_coding_type ( void ):string | Returns the coding type used for output compression.
apc_add ( string $key , mixed $var [, int $ttl = 0 ] ):bool
apc_bin_dump ([ array $files = NULL [, array $user_vars = NULL ]] ):string | Returns a binary dump of the given files and user variables from the APC cache. A NULL for files or user_vars signals a dump of every entry, whereas array() will dump nothing. 
apc_bin_dumpfile ( array $files , array $user_vars , string $filename [, $flags = 0 [, resource $context = NULL ]] ):int | Outputs a binary dump of the given files and user variables from the APC cache to the named file. 
apc_bin_load ( string $data [, int $flags = 0 ] ):bool | Loads the given binary dump into the APC file/user cache. 
apc_bin_loadfile ( string $filename [, resource $context = NULL [, int $flags = 0 ]] ):bool | Loads a binary dump from a file into the APC file/user cache. 
apc_cache_info ([ string $cache_type = "" [, bool $limited = FALSE ]] ):array | Retrieves cached information and meta-data from APC's data store. 
apc_cas ( string $key , int $old , int $new ):bool | apc_cas() updates an already existing integer value if the old parameter matches the currently stored value with the value of the new parameter. 
apc_clear_cache ([ string $cache_type = "" ] ):bool | Clears the user/system cache. 
apc_compile_file ( string $filename [, bool $atomic = TRUE ] ):mixed | Stores a file in the bytecode cache, bypassing all filters. 
apc_dec ( string $key [, $step = 1 [, bool &$success ]] ):int | Decreases a stored integer value. 
apc_define_constants ( string $key , array $constants [, $case_sensitive = TRUE ] ):bool
apc_delete_file ( $keys ):mixed | Deletes the given files from the opcode cache. 
apc_delete ( string $key ):mixed | Removes a stored variable from the cache. 
apc_exists ( $keys ):mixed | Checks if one or more APC keys exist. 
apc_fetch ( $key [, bool &$success ] ):mixed | Fetchs a stored variable from the cache. 
apc_inc ( string $key [, $step = 1 [, bool &$success ]] ):int | Increases a stored number. 
apc_load_constants ( string $key [, $case_sensitive = TRUE ] ):bool | Loads a set of constants from the cache. 
apc_sma_info ([ bool $limited = FALSE ] ):array | Retrieves APC's Shared Memory Allocation information. 
apc_store ( string $key , mixed $var [, int $ttl = 0 ] ):bool
apd_breakpoint ( int $debug_level ):bool | This can be used to stop the running of your script, and await responses on the connected socket. To step the program, just send enter (a blank line), or enter a php command to be executed. 
apd_callstack ( void ):array | Returns the current call stack as an array 
apd_clunk ( string $warning [, string $delimiter = "<BR />" ] ):void | Behaves like perl's Carp::cluck. Throw a warning and a callstack. 
apd_continue ( int $debug_level ):bool | Usually sent via the socket to restart the interpreter. 
apd_croak ( string $warning [, string $delimiter = "<BR />" ] ):void | Behaves like perl's Carp::croak. Throw an error, a callstack and then exit. 
apd_dump_function_table ( ):void | Outputs the current function table. 
apd_dump_persistent_resources ( void ):array | Return all persistent resources as an array. 
apd_dump_regular_resources ( void ):array | Return all current regular resources as an array. 
apd_echo ( string $output ):bool | Usually sent via the socket to request information about the running script. 
apd_get_active_symbols ( void ):array | Returns the names of all the variables defined in the active scope, (not their values). 
apd_set_pprof_trace ([ $dump_directory = ini_get("apd.dumpdir") [, $fragment = "pprof" ]] ):string | Starts debugging to pprof_{process_id} in the dump directory. 
apd_set_session_trace_socket ( string $tcp_server , int $socket_type , int $port , int $debug_level ):bool | Connects to the specified tcp_server (eg. tcplisten) and sends debugging data to the socket. 
apd_set_session_trace ( int $debug_level [, string $dump_directory = ini_get("apd.dumpdir") ] ):void | Starts debugging to apd_dump_{process_id} in the dump directory. 
apd_set_session ( int $debug_level ):void | This can be used to increase or decrease debugging in a different area of your application. 
override_function ( string $function_name , string $function_args , string $function_code ):bool | Overrides built-in functions by replacing them in the symbol table. 
rename_function ( string $original_name , string $new_name ):bool | Renames a orig_name to new_name in the global function table. Useful for temporarily overriding built-in functions. 
cairo_create ( CairoSurface $surface ):CairoContext
cairo_font_options_create ( void ):CairoFontOptions
cairo_font_options_equal ( CairoFontOptions $options , CairoFontOptions $other ):bool
cairo_font_options_get_antialias ( CairoFontOptions $options ):int
cairo_font_options_get_hint_metrics ( CairoFontOptions $options ):int
cairo_font_options_get_hint_style ( CairoFontOptions $options ):int
cairo_font_options_get_subpixel_order ( CairoFontOptions $options ):int
cairo_font_options_hash ( CairoFontOptions $options ):int
cairo_font_options_merge ( CairoFontOptions $options , CairoFontOptions $other ):void
cairo_font_options_set_antialias ( CairoFontOptions $options , int $antialias ):void
cairo_font_options_set_hint_metrics ( CairoFontOptions $options , int $hint_metrics ):void
cairo_font_options_set_hint_style ( CairoFontOptions $options , int $hint_style ):void
cairo_font_options_set_subpixel_order ( CairoFontOptions $options , int $subpixel_order ):void
cairo_font_options_status ( CairoFontOptions $options ):int
cairo_format_stride_for_width ( $format , $width ):int
cairo_image_surface_create_for_data ( string $data , int $format , int $width , int $height [, int $stride = -1 ] ):CairoImageSurface
cairo_image_surface_create_from_png ( mixed $file ):CairoImageSurface
cairo_image_surface_create ( int $format , int $width , int $height ):CairoImageSurface
cairo_image_surface_get_data ( CairoImageSurface $surface ):string
cairo_image_surface_get_format ( CairoImageSurface $surface ):int
cairo_image_surface_get_height ( CairoImageSurface $surface ):int
cairo_image_surface_get_stride ( CairoImageSurface $surface ):int
cairo_image_surface_get_width ( CairoImageSurface $surface ):int
cairo_matrix_create_scale(->) function is an alias of: CairoMatrix::initScale(). :This | This function alias is deprecated and only exists for backwards compatibility reasons. 
cairo_matrix_create_translate(->) function is an alias of: CairoMatrix::initTranslate(). :This | This function alias is deprecated and only exists for backwards compatibility reasons. 
cairo_matrix_invert ( CairoMatrix $matrix ):void
cairo_matrix_multiply ( $matrix1 , $matrix2 ):CairoMatrix
cairo_matrix_transform_distance ( CairoMatrix $matrix , float $dx , float $dy ):array
cairo_matrix_transform_point ( CairoMatrix $matrix , float $dx , float $dy ):array
cairo_matrix_translate ( CairoMatrix $matrix , float $tx , float $ty ):void
cairo_pattern_add_color_stop_rgb ( CairoGradientPattern $pattern , float $offset , float $red , float $green , float $blue ):void
cairo_pattern_add_color_stop_rgba ( CairoGradientPattern $pattern , float $offset , float $red , float $green , float $blue , float $alpha ):void
cairo_pattern_create_for_surface ( CairoSurface $surface ):CairoPattern
cairo_pattern_create_linear ( float $x0 , float $y0 , float $x1 , float $y1 ):CairoPattern
cairo_pattern_create_radial ( float $x0 , float $y0 , float $r0 , float $x1 , float $y1 , float $r1 ):CairoPattern
cairo_pattern_create_rgb ( float $red , float $green , float $blue ):CairoPattern
cairo_pattern_create_rgba ( float $red , float $green , float $blue , float $alpha ):CairoPattern
cairo_pattern_get_color_stop_count ( CairoGradientPattern $pattern ):int
cairo_pattern_get_color_stop_rgba ( CairoGradientPattern $pattern , int $index ):array
cairo_pattern_get_extend ( string $pattern ):int
cairo_pattern_get_filter ( CairoSurfacePattern $pattern ):int
cairo_pattern_get_linear_points ( CairoLinearGradient $pattern ):array
cairo_pattern_get_matrix ( CairoPattern $pattern ):CairoMatrix
cairo_pattern_get_radial_circles ( CairoRadialGradient $pattern ):array
cairo_pattern_get_rgba ( CairoSolidPattern $pattern ):array
cairo_pattern_get_surface ( CairoSurfacePattern $pattern ):CairoSurface
cairo_pattern_get_type ( CairoPattern $pattern ):int
cairo_pattern_set_extend ( string $pattern , string $extend ):void
cairo_pattern_set_filter ( CairoSurfacePattern $pattern , int $filter ):void
cairo_pattern_set_matrix ( CairoPattern $pattern , CairoMatrix $matrix ):void
cairo_pattern_status ( CairoPattern $pattern ):int
cairo_pdf_surface_create ( string $file , float $width , float $height ):CairoPdfSurface
cairo_pdf_surface_set_size ( CairoPdfSurface $surface , float $width , float $height ):void
cairo_ps_get_levels ( void ):array
cairo_ps_level_to_( int $level ):string
cairo_ps_surface_create ( string $file , float $width , float $height ):CairoPsSurface
cairo_ps_surface_dsc_begin_page_setup ( CairoPsSurface $surface ):void
cairo_ps_surface_dsc_begin_setup ( CairoPsSurface $surface ):void
cairo_ps_surface_dsc_comment ( CairoPsSurface $surface , string $comment ):void
cairo_ps_surface_get_eps ( CairoPsSurface $surface ):bool
cairo_ps_surface_restrict_to_level ( CairoPsSurface $surface , int $level ):void
cairo_ps_surface_set_eps ( CairoPsSurface $surface , bool $level ):void
cairo_ps_surface_set_size ( CairoPsSurface $surface , float $width , float $height ):void
cairo_scaled_font_create ( CairoFontFace $fontface , CairoMatrix $matrix , CairoMatrix $ctm , CairoFontOptions $fontoptions ):CairoScaledFont
cairo_scaled_font_extents ( CairoScaledFont $scaledfont ):array
cairo_scaled_font_get_ctm ( CairoScaledFont $scaledfont ):CairoMatrix
cairo_scaled_font_get_font_face ( CairoScaledFont $scaledfont ):CairoFontFace
cairo_scaled_font_get_font_matrix ( CairoScaledFont $scaledfont ):CairoFontOptions
cairo_scaled_font_get_font_options ( CairoScaledFont $scaledfont ):CairoFontOptions
cairo_scaled_font_get_scale_matrix ( CairoScaledFont $scaledfont ):CairoMatrix
cairo_scaled_font_get_type ( CairoScaledFont $scaledfont ):int
cairo_scaled_font_glyph_extents ( CairoScaledFont $scaledfont , $glyphs ):array
cairo_scaled_font_status ( CairoScaledFont $scaledfont ):int
cairo_scaled_font_text_extents ( CairoScaledFont $scaledfont , string $text ):array
cairo_surface_copy_page ( CairoSurface $surface ):void
cairo_surface_create_similar ( $surface , int $content , float $width , float $height ):CairoSurface
cairo_surface_finish ( CairoSurface $surface ):void
cairo_surface_flush ( CairoSurface $surface ):void
cairo_surface_get_content ( CairoSurface $surface ):int
cairo_surface_get_device_offset ( CairoSurface $surface ):array
cairo_surface_get_font_options ( CairoSurface $surface ):CairoFontOptions
cairo_surface_get_type ( CairoSurface $surface ):int
cairo_surface_mark_dirty_rectangle ( CairoSurface $surface , float $x , float $y , float $width , float $height ):void
cairo_surface_mark_dirty ( CairoSurface $surface ):void
cairo_surface_set_device_offset ( CairoSurface $surface , float $x , float $y ):void
cairo_surface_set_fallback_resolution ( CairoSurface $surface , float $x , float $y ):void
cairo_surface_show_page ( CairoSurface $surface ):void
cairo_surface_status ( CairoSurface $surface ):int
cairo_surface_write_to_png ( CairoSurface $surface , resource $stream ):void
cairo_svg_surface_create ( string $file , float $width , float $height ):CairoSvgSurface
cairo_svg_surface_restrict_to_version ( CairoSvgSurface $surface , int $version ):void
cairo_svg_version_to_( int $version ):string
chdb_create ( string $pathname , array $data ):bool
classkit_import ( string $filename ):array
classkit_method_add ( string $classname , string $methodname , string $args , string $code [, int $flags = CLASSKIT_ACC_PUBLIC ] ):bool
classkit_method_copy ( string $dClass , string $dMethod , string $sClass [, string $sMethod ] ):bool
classkit_method_redefine ( string $classname , string $methodname , string $args , string $code [, int $flags = CLASSKIT_ACC_PUBLIC ] ):bool
classkit_method_remove ( string $classname , string $methodname ):bool
classkit_method_rename ( string $classname , string $methodname , string $newname ):bool
crack_check ( resource $dictionary , string $password ):bool
crack_closedict ([ resource $dictionary ] ):bool
crack_getlastmessage ( void ):string
crack_opendict ( string $dictionary ):resource
cubrid_bind ( resource $req_identifier , int $bind_index , mixed $bind_value [, string $bind_value_type ] ):bool
cubrid_close_prepare(->) cubrid_close_prepare ( resource $req_identifier ):bool | closes the request handle given by the req_identifier argument, and releases the memory region related to the handle. It is an alias of cubrid_close_request(). 
cubrid_close_request(->) cubrid_close_request ( resource $req_identifier ):bool | closes the request handle given by the req_identifier argument, and releases the memory region related to the handle. It is an alias of cubrid_close_prepare(). 
cubrid_col_get ( resource $conn_identifier , string $oid , string $attr_name ):array | used to get contents of the elements of the collection type (set, multiset, sequence) attribute you requested as an array. 
cubrid_col_size ( resource $conn_identifier , string $oid , string $attr_name ):int | used to get the number of elements in a collection type (set, multiset, sequence) attribute. 
cubrid_column_names ( resource $req_identifier ):array | used to get the column names of the query result by using req_identifier. 
cubrid_column_types ( resource $req_identifier ):array | gets column types of query results by using req_identifier. 
cubrid_commit ( resource $conn_identifier ):bool
cubrid_connect_with_url ( string $conn_url [, string $userid [, string $passwd [, bool $new_link = FALSE ]]] ):resource
cubrid_connect ( string $host , int $port , string $dbname [, string $userid [, string $passwd [, bool $new_link = FALSE ]]] ):resource | used to establish the environment for connecting to your server by using your server address, port number, database name, user name, and password. If the user name and password is not given, then the "PUBLIC" connection will be made by default. 
cubrid_current_oid ( resource $req_identifier ):string | used to get the oid of the current cursor location from the query result. To use cubrid_current_oid(), the query executed must be a updatable query, and the CUBRID_INCLUDE_OID option must be included during the query execution. 
cubrid_disconnect ([ resource $conn_identifier ] ):bool | closes the connection handle and disconnects from server. If any request handle is not closed at this point, it will be closed. It is similar to the CUBRID MySQL compatible function cubrid_close(). 
cubrid_drop ( resource $conn_identifier , string $oid ):bool | used to delete an instance from database by using the oid of the instance. 
cubrid_error_code_facility ( void ):int | used to get the facility code (level in which the error occurred) from the error code of the error that occurred during the API execution. Usually, you can get the error code when API returns false as its return value. 
cubrid_error_code ( void ):int | used to get the error code of the error that occurred during the API execution. Usually, it gets the error code when API returns false as its return value. 
cubrid_error_msg ( void ):string | used to get the error message that occurred during the use of CUBRID API. Usually, it gets error message when API returns false as its return value. 
cubrid_execute ( $conn_identifier , string $sql [, int $option = 0 ] ):resource
cubrid_fetch ( resource $result [, int $type = CUBRID_BOTH ] ):mixed | used to get a single row from the query result. The cursor automatically moves to the next row after getting the result. 
cubrid_free_result ( resource $req_identifier ):bool | This function frees the memory occupied by the result data. It returns TRUE on success or FALSE on failure. Note that it can only frees the client fetch buffer now, and if you want free all memory, use function cubrid_close_request(). 
cubrid_get_autocommit ( resource $conn_identifier ):bool
cubrid_get_charset ( resource $conn_identifier ):string | This function returns the current CUBRID connection charset and is similar to the CUBRID MySQL compatible function cubrid_client_encoding(). 
cubrid_get_class_name ( resource $conn_identifier , $oid ):string | used to get the class name from oid. It doesn't work when selecting data from the system tables, for example db_class. 
cubrid_get_client_info ( void ):string | This function returns a string that represents the client library version. 
cubrid_get_db_parameter ( resource $conn_identifier ):array
cubrid_get_query_timeout ( resource $req_identifier ):int | used to get the query timeout of the request. 
cubrid_get_server_info ( resource $conn_identifier ):string | This function returns a string that represents the CUBRID server version. 
cubrid_get ( resource $conn_identifier , string $oid [, $attr ] ):mixed | used to get the attribute of the instance of the given oid. You can get single attribute by using string data type for the attr argument, or many attributes by using array data type for the attr argument. 
cubrid_insert_id ([ resource $conn_identifier ] ):string
cubrid_is_instance ( resource $conn_identifier , string $oid ):int | used to check whether the instance pointed by the given oid exists or not. 
cubrid_lob_close ( array $lob_identifier_array ):bool | used to close all BLOB/CLOB returned from cubrid_lob_get(). 
cubrid_lob_export ( resource $conn_identifier , resource $lob_identifier , string $path_name ):bool | used to get BLOB/CLOB data from CUBRID database, and saves its contents to a file. To use this function, you must use cubrid_lob_get() first to get BLOB/CLOB info from CUBRID. 
cubrid_lob_get ( resource $conn_identifier , string $sql ):array
cubrid_lob_send ( resource $conn_identifier , resource $lob_identifier ):bool | reads BLOB/CLOB data and passes it straight through to the browser. To use this function, you must use cubrid_lob_get() first to get BLOB/CLOB info from CUBRID. 
cubrid_lob_size ( resource $lob_identifier ):string | used to get BLOB/CLOB data size. 
cubrid_lob2_bind ( resource $req_identifier , int $bind_index , mixed $bind_value [, string $bind_value_type ] ):bool | bind BLOB/CLOB datas to a corresponding question mark placeholder in the SQL statement that was passed to cubrid_prepare(). If bind_value_type is not given, string will be "BLOB" as the default. 
cubrid_lob2_close ( resource $lob_identifier ):bool | used to close LOB object returned from cubrid_lob2_new() or got from the result set. 
cubrid_lob2_export ( resource $lob_identifier , string $file_name ):bool | used to save the contents of BLOB/CLOB data to a file. To use this function, you must use cubrid_lob2_new() or fetch a lob object from CUBRID database first. If the file already exists, the operation will fail. This function will not influence the cursor position of the lob object. It operates the entire lob object. 
cubrid_lob2_import ( resource $lob_identifier , string $file_name ):bool | used to save the contents of BLOB/CLOB data from a file. To use this function, you must use cubrid_lob2_new() or fetch a lob object from CUBRID database first. If the file already exists, the operation will fail. This function will not influence the cursor position of the lob object. It operates the entire lob object. 
cubrid_lob2_new ([ $conn_identifier [, string $type = "BLOB" ]] ):resource |  used to create a lob object (both BLOB and CLOB). This function should be used before you bind a lob object. 
cubrid_lob2_read ( resource $lob_identifier , int $len ):string | reads len bytes from the LOB data and returns the bytes read. 
cubrid_lob2_seek64 ( resource $lob_identifier , string $offset [, int $origin = CUBRID_CURSOR_CURRENT ] ):bool
cubrid_lob2_seek ( resource $lob_identifier , int $offset [, int $origin = CUBRID_CURSOR_CURRENT ] ):bool
cubrid_lob2_size64 ( resource $lob_identifier ):string | used to get the size of a lob object. If the size of a lob object is larger than an integer data can be stored, you can use this function and it will return the size as a string. 
cubrid_lob2_size ( resource $lob_identifier ):int | used to get the size of a lob object. 
cubrid_lob2_tell64 ( resource $lob_identifier ):string | used to tell the cursor position of the LOB object. If the size of a lob object is larger than an integer data can be stored, you can use this function and it will return the position information as a string. 
cubrid_lob2_tell ( resource $lob_identifier ):int | used to tell the cursor position of the LOB object. 
cubrid_lob2_write ( resource $lob_identifier , string $buf ):bool | reads as much as data from buf and stores it to the LOB object. Note that this function can only append characters now. 
cubrid_lock_read ( resource $conn_identifier , string $oid ):bool |  used to put read lock on the instance pointed by given oid. 
cubrid_lock_write ( resource $conn_identifier , string $oid ):bool | used to put write lock on the instance pointed by the given oid. 
cubrid_move_cursor ( resource $req_identifier , int $offset [, int $origin = CUBRID_CURSOR_CURRENT ] ):bool
cubrid_next_result ( resource $result ):bool | used to get results of next query if multiple SQL statements are executed and CUBRID_EXEC_QUERY_ALL flag is set upon cubrid_execute(). 
cubrid_num_cols ( resource $result ):int | used to get the number of columns from the query result. It can only be used when the query executed is a select statement. 
cubrid_num_rows ( resource $result ):int
cubrid_pconnect_with_url ( string $conn_url [, string $userid [, string $passwd ]] ):resource
cubrid_pconnect ( string $host , int $port , string $dbname [, string $userid [, string $passwd ]] ):resource
cubrid_prepare ( $conn_identifier , string $prepare_stmt [, int $option = 0 ] ):resource
cubrid_put ( resource $conn_identifier , string $oid [, string $attr ], mixed $value ):bool
cubrid_rollback ( resource $conn_identifier ):bool
cubrid_schema ( resource $conn_identifier , int $schema_type [, string $class_name [, string $attr_name ]] ):array
cubrid_seq_drop ( resource $conn_identifier , string $oid , string $attr_name , int $index ):bool | used to delete an element you request from the given sequence type attribute in the database. 
cubrid_seq_insert ( resource $conn_identifier , string $oid , string $attr_name , int $index , string $seq_element ):bool | used to insert an element to a sequence type attribute in a requested location. 
cubrid_seq_put ( resource $conn_identifier , string $oid , string $attr_name , int $index , string $seq_element ):bool | used to update the content of the requested element in a sequent type attribute using OID. 
cubrid_set_add ( resource $conn_identifier , string $oid , string $attr_name , string $set_element ):bool | used to insert a single element to a set type attribute (set, multiset, sequence) you requested. 
cubrid_set_autocommit ( resource $conn_identifier , $mode ):bool
cubrid_set_db_parameter ( resource $conn_identifier , int $param_type , int $param_value ):bool
cubrid_set_drop ( resource $conn_identifier , string $oid , string $attr_name , string $set_element ):bool | used to delete an element that you request from the given set type (set, multiset) attribute of the database. 
cubrid_set_query_timeout ( resource $req_identifier , int $timeout ):bool | used to set the timeout time of query execution. 
cubrid_version ( void ):string | used to get the CUBRID PHP module's version. 
cyrus_authenticate ( resource $connection [, string $mechlist [, string $service [, string $user [, int $minssf [, int $maxssf [, string $authname [, string $password ]]]]]]] ):void
cyrus_bind ( resource $connection , array $callbacks ):bool | Binds callbacks to a Cyrus IMAP connection. 
cyrus_close ( resource $connection ):bool | Closes the connection to a Cyrus IMAP server. 
cyrus_connect ([ string $host [, string $port [, int $flags ]]] ):resource | Connects to a Cyrus IMAP server. 
cyrus_query ( resource $connection , string $query ):array | Sends a query to a Cyrus IMAP server. 
cyrus_unbind ( resource $connection , string $trigger_name ):bool
dbplus_add ( resource $relation , array $tuple ):int | Adds a tuple to a relation. 
dbplus_aql ( string $query [, string $server [, string $dbpath ]] ):resource | Executes an AQL query on the given server and dbpath. 
dbplus_chdir ([ $newdir ] ):string | Changes the virtual current directory where relation files will be looked for by dbplus_open(). 
dbplus_close ( resource $relation ):mixed | Closes a relation previously opened by dbplus_open(). 
dbplus_curr ( resource $relation , array &$tuple ):int | Reads the data for the current tuple for the given relation. 
dbplus_errcode ([ int $errno ] ):string | Returns a clear error string for the given error code. 
dbplus_errno ( void ):int | Returns the error code returned by the last db++ operation. 
dbplus_find ( resource $relation , array $constraints , mixed $tuple ):int
dbplus_first ( resource $relation , array &$tuple ):int | Reads the data for the first tuple for the given relation, makes it the current tuple and pass it back as an associative array in tuple. 
dbplus_flush ( resource $relation ):int | Writes all changes applied to relation since the last flush to disk. 
dbplus_freealllocks ( void ):int | Frees all tuple locks held by this client. 
dbplus_freelock ( resource $relation , string $tuple ):int | Releases a write lock on the given tuple previously obtained by dbplus_getlock(). 
dbplus_freerlocks ( resource $relation ):int | Frees all tuple locks held on the given relation. 
dbplus_getlock ( resource $relation , string $tuple ):int | Requests a write lock on the specified tuple. 
dbplus_getunique ( resource $relation , $uniqueid ):int | Obtains a number guaranteed to be unique for the given relation and will pass it back in the variable given as uniqueid. 
dbplus_info ( resource $relation , string $key , array &$result ):int
dbplus_last ( resource $relation , array &$tuple ):int | Reads the data for the last tuple for the given relation, makes it the current tuple and pass it back as an associative array in tuple. 
dbplus_lockrel ( resource $relation ):int
dbplus_next ( resource $relation , array &$tuple ):int | Reads the data for the next tuple for the given relation, makes it the current tuple and will pass it back as an associative array in tuple. 
dbplus_open ( string $name ):resource | Opens the given relation file. 
dbplus_prev ( resource $relation , array &$tuple ):int | Reads the data for the previous tuple for the given relation, makes it the current tuple and will pass it back as an associative array in tuple. 
dbplus_rchperm ( resource $relation , $mask , string $user , string $group ):int | Changes access permissions as specified by mask, user and group. The values for these are operating system specific. 
dbplus_rcreate ( string $name , mixed $domlist [, bool $overwrite ] ):resource | Creates a new relation. Any existing relation sharing the same name will be overwritten if the relation is currently not in use and overwrite is set to TRUE. 
dbplus_rcrtexact ( string $name , resource $relation [, bool $overwrite ] ):mixed | will create an exact but empty copy of the given relation under a new name. 
dbplus_rcrtlike ( string $name , resource $relation [, int $overwrite ] ):mixed | will create an empty copy of the given relation under a new name, but with default indices. 
dbplus_resolve ( string $relation_name ):array | will try to resolve the given relation_name and find out internal server id, real hostname and the database path on this host. 
dbplus_restorepos ( resource $relation , array $tuple ):int
dbplus_rkeys ( resource $relation , $domlist ):mixed | will replace the current primary key for relation with the combination of domains specified by domlist. 
dbplus_ropen ( string $name ):resource | will open the relation file locally for quick access without any client/server overhead. Access is read only and only dbplus_curr() and dbplus_next() may be applied to the returned relation. 
dbplus_rquery ( string $query [, string $dbpath ] ):resource | performs a local (raw) AQL query using an AQL interpreter embedded into the db++ client library. dbplus_rquery() is faster than dbplus_aql() but will work on local data only. 
dbplus_rrename ( resource $relation , string $name ):int | will change the name of relation to name. 
dbplus_rsecindex ( resource $relation , $domlist , int $type ):mixed | will create a new secondary index for relation with consists of the domains specified by domlist and is of type type 
dbplus_runlink ( resource $relation ):int | dbplus_runlink() will close and remove the relation. 
dbplus_rzap ( resource $relation ):int | dbplus_rzap() will remove all tuples from relation. 
dbplus_savepos ( resource $relation ):int
dbplus_setindex ( resource $relation , string $idx_name ):int
dbplus_setindexbynumber ( resource $relation , $idx_number ):int
dbplus_sql ( string $query [, string $server [, string $dbpath ]] ):resource
dbplus_tcl ( int $sid , $script ):string
dbplus_tremove ( resource $relation , array $tuple [, array &$current ] ):int | removes tuple from relation if it perfectly matches a tuple within the relation. current, if given, will contain the data of the new current tuple after calling dbplus_tremove(). 
dbplus_undo ( resource $relation ):int
dbplus_undoprepare ( resource $relation ):int
dbplus_unlockrel ( resource $relation ):int | Release a write lock previously obtained by dbplus_lockrel(). 
dbplus_unselect ( resource $relation ):int | will remove a constraint previously set by dbplus_find() on relation. 
dbplus_update ( resource $relation , array $old , array $new ):int | replaces the old tuple with the data from the new one, only if the old completely matches a tuple within relation. 
dbplus_xlockrel ( resource $relation ):int | Request an exclusive lock on relation preventing even read access from other clients. 
dbplus_xunlockrel ( resource $relation ):int | Releases an exclusive lock previously obtained by dbplus_xlockrel(). 
dbx_close ( object $link_identifier ):int |  Returns success or failure
dbx_compare ( array $row_a , array $row_b , string $column_key [, $flags = DBX_CMP_ASC | DBX_CMP_NATIVE ] ):int | a helper function for dbx_sort() to ease the make and use of the custom sorting function. 
dbx_connect ( mixed $module , string $host , string $database , string $username , string $password [, int $persistent ] ):object | Opens a connection to a database. 
dbx_error ( object $link_identifier ):string | returns the last error message. 
dbx_escape_( object $link_identifier , $text ):string | Escape the given string so that it can safely be used in an sql-statement. 
dbx_fetch_row ( object $result_identifier ):mixed |  Returns a row (index and assoc based on query) on success and returns 0 on failure or no more rows
dbx_query ( object $link_identifier , string $sql_statement [, int $flags ] ):mixed | Sends a query and fetch all results. 
dbx_sort ( object $result , string $user_compare_function ):bool | Sort a result from a dbx_query() call with a custom sort function. 
dio_close ( resource $fd ):void | The function dio_close() closes the file descriptor fd. 
dio_fcntl ( resource $fd , int $cmd [, $args ] ):mixed | performs the operation specified by cmd on the file descriptor fd. Some commands require additional arguments args to be supplied. 
dio_open ( string $filename , int $flags [, int $mode = 0 ] ):resource | opens a file and returns a new file descriptor for it. 
dio_read ( resource $fd [, int $len = 1024 ] ):string | The function reads and returns len bytes from file with descriptor fd. 
dio_seek ( resource $fd , $pos [, $whence = SEEK_SET ] ):int | The function is used to change the file position of the given file descriptor. 
dio_stat ( resource $fd ):array | returns information about the given file descriptor. 
dio_tcsetattr ( resource $fd , array $options ):bool | sets the terminal attributes and baud rate of the open fd. 
dio_truncate ( resource $fd , int $offset ):bool |  Truncate file descriptor fd to offset bytes
dio_write ( resource $fd , string $data [, $len = 0 ] ):int | writes up to len bytes from data to file fd. 
eio_busy ( int $delay [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] ):resource | artificially increases load taking delay seconds to execute. May be used for debugging, or benchmarking. 
eio_cancel ( resource $req ):void | cancels a request specified by req 
eio_chmod ( string $path , int $mode [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] ):resource | changes file, or direcrory permissions. The new permissions are specified by mode. 
eio_chown ( string $path , int $uid [, int $gid = -1 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]]] ):resource | Changes file, or directory permissions. 
eio_close ( mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] ):resource | closes file specified by fd. 
eio_custom ( callable $execute , int $pri , callable $callback [, mixed $data = NULL ] ):resource | executes custom function specified by execute processing it just like any other eio_* call. 
eio_dup2 ( mixed $fd , mixed $fd2 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] ):resource | duplicates file descriptor. 
eio_event_loop ( void ):bool | polls libeio until all requests proceeded. 
eio_fallocate ( mixed $fd , int $mode , int $offset , int $length [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] ):resource
eio_fchmod ( mixed $fd , int $mode [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] ):resource | changes permissions for the file specified by fd file descriptor. 
eio_fchown ( mixed $fd , int $uid [, int $gid = -1 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]]] ):resource | changes ownership of the file specified by fd file descriptor. 
eio_fdatasync ( mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] ):resource | synchronizes a file's in-core state with storage device. 
eio_fstat ( mixed $fd , int $pri , callable $callback [, mixed $data ] ):resource | returns file status information in result argument of callback 
eio_fstatvfs ( mixed $fd , int $pri , callable $callback [, mixed $data ] ):resource | returns file system statistics in result of callback. 
eio_fsync ( mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] ):resource | Synchronize a file's in-core state with storage device 
eio_ftruncate ( mixed $fd [, int $offset = 0 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]]] ):resource | causes a regular file referenced by fd file descriptor to be truncated to precisely length bytes. 
eio_futime ( mixed $fd , float $atime , float $mtime [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] ):resource | changes file last access and modification times. 
eio_get_event_stream ( void ):mixed | acquires stream representing a variable used in internal communications with libeio. Could be used to bind with some event loop provided by other PECL extension, for example libevent. 
eio_get_last_error ( resource $req ):string | returns string describing the last error associated with req. 
eio_grp_add ( resource $grp , resource $req ):void | adds a request to the request group. 
eio_grp_cancel ( resource $grp ):void | cancels a group request specified by grp request group resource. 
eio_grp_limit ( resource $grp , int $limit ):void | Limit number of requests in the request group. 
eio_grp ( callable $callback [, string $data = NULL ] ):resource | creates a request group. 
eio_init(->) eio_init ( ):void
eio_link ( string $path , string $new_path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] ):resource | creates a hardlink new_path for a file specified by path. 
eio_lstat ( string $path , int $pri , callable $callback [, mixed $data = NULL ] ):resource | returns file status information in result argument of callback 
eio_mkdir ( string $path , int $mode [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] ):resource | creates directory with specified access mode. 
eio_mknod ( string $path , int $mode , int $dev [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] ):resource
eio_nop ([ int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] ):resource | does nothing, except go through the whole request cycle. Could be useful in debugging. 
eio_npending ( void ):int | returns number of finished, but unhandled requests 
eio_nready ( void ):int
eio_nreqs ( void ):int | could be called in a custom loop calling eio_poll(). 
eio_nthreads ( void ):int
eio_open ( string $path , int $flags , int $mode , int $pri , callable $callback [, mixed $data = NULL ] ):resource | opens file specified by path in access mode mode with 
eio_poll ( void ):int
eio_read ( mixed $fd , int $length , int $offset , int $pri , callable $callback [, mixed $data = NULL ] ):resource | reads up to length bytes from fd file descriptor at offset. The read bytes are stored in result argument of callback. 
eio_readahead ( mixed $fd , int $offset , int $length [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] ):resource | populates the page cache with data from a file so that subsequent reads from that file will not block on disk I/O. See READAHEAD(2) man page for details. 
eio_readdir ( string $path , int $flags , int $pri , callable $callback [, string $data = NULL ] ):resource | Reads through a whole directory(via the opendir, readdir and closedir system calls) and returns either the names or an array in result argument of callback function, depending on the flags argument. 
eio_readlink ( string $path , int $pri , callable $callback [, string $data = NULL ] ):resource
eio_realpath ( string $path , int $pri , callable $callback [, string $data = NULL ] ):resource | returns the canonicalized absolute pathname in result argument of callback function. 
eio_rename ( string $path , string $new_path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] ):resource | renames or moves a file to new location. 
eio_rmdir ( string $path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] ):resource | removes a directory. 
eio_seek ( mixed $fd , int $offset , int $whence [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] ):resource
eio_sendfile ( mixed $out_fd , mixed $in_fd , int $offset , int $length [, int $pri [, callable $callback [, string $data ]]] ):resource | copies data between one file descriptor and another. See SENDFILE(2) man page for details. 
eio_set_max_idle ( int $nthreads ):void
eio_set_max_parallel ( int $nthreads ):void
eio_set_max_poll_reqs ( int $nreqs ):void
eio_set_max_poll_time ( float $nseconds ):void | Polling stops, if poll took longer than nseconds seconds. 
eio_set_min_parallel ( string $nthreads ):void
eio_stat ( string $path , int $pri , callable $callback [, mixed $data = NULL ] ):resource | returns file status information in result argument of callback 
eio_statvfs ( string $path , int $pri , callable $callback [, mixed $data ] ):resource | returns file system statistics information in result argument of callback 
eio_symlink ( string $path , string $new_path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] ):resource | creates a symbolic link new_path to path. 
eio_sync_file_range ( mixed $fd , int $offset , int $nbytes , int $flags [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] ):resource | permits fine control when synchronizing the open file referred to by the file descriptor fd with disk. 
eio_sync ([ int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] ):resource
eio_syncfs ( mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] ):resource
eio_truncate ( string $path [, int $offset = 0 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]]] ):resource | causes the regular file named by path to be truncated to a size of precisely length bytes 
eio_unlink ( string $path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] ):resource | deletes a name from the file system. 
eio_utime ( string $path , float $atime , float $mtime [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] ):resource
eio_write ( mixed $fd , string $str [, int $length = 0 [, int $offset = 0 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]]]] ):resource | writes up to length bytes from str at offset offset from the beginning of the file. 
expect_expectl ( resource $expect , array $cases [, array &$match ] ):int
expect_popen ( string $command ):resource | Execute command via Bourne shell, and open the PTY stream to the process. 
fam_cancel_monitor ( resource $fam , resource $fam_monitor ):bool |  Terminate monitoring
fam_close ( resource $fam ):void | Closes a connection to the FAM service. 
fam_monitor_collection ( $fam , string $dirname , int $depth , string $mask ):resource |  Monitor a collection of files in a directory for changes
fam_monitor_directory ( $fam , string $dirname ):resource |  Monitor a directory for changes
fam_monitor_file ( $fam , string $filename ):resource |  Monitor a regular file for changes
fam_next_event ( resource $fam ):array |  Get next pending FAM event
fam_open ([ string $appname ] ):resource | Opens a connection to the FAM service daemon. 
fam_pending ( resource $fam ):int | Checks for pending FAM events. 
fam_resume_monitor ( resource $fam , resource $fam_monitor ):bool | Resumes monitoring of a resource previously suspended using fam_suspend_monitor(). 
fam_suspend_monitor ( resource $fam , resource $fam_monitor ):bool |  Temporary suspend monitoring
fdf_add_doc_javascript ( resource $fdf_document , string $script_name , string $script_code ):bool | Adds a script to the FDF, which Acrobat then adds to the doc-level scripts of a document, once the FDF is imported into it. 
fdf_add_template ( resource $fdf_document , int $newpage , string $filename , string $template , int $rename ):bool |  Adds a template into the FDF document
fdf_close ( resource $fdf_document ):void | Closes the FDF document. 
fdf_create ( void ):resource |  Creates a new FDF document
fdf_enum_values ( resource $fdf_document , callable $function [, mixed $userdata ] ):bool |  Call a user defined function for each document value
fdf_errno ( void ):int |  | Gets error code for last operation
fdf_error ([ int $error_code = -1 ] ):string | Gets a textual description for the FDF error code given in error_code. 
fdf_get_ap ( resource $fdf_document , string $field , int $face , string $filename ):bool | Gets the appearance of a field (i.e. the value of the /AP key) and stores it in a file. 
fdf_get_attachment ( resource $fdf_document , string $fieldname , string $savepath ):array | Extracts a file uploaded by means of the "file selection" field fieldname and stores it under savepath. 
fdf_get_encoding ( resource $fdf_document ):string | Gets the value of the /Encoding key. 
fdf_get_file ( resource $fdf_document ):string | Gets the value of the /F key. 
fdf_get_flags ( resource $fdf_document , string $fieldname , $whichflags ):int |  | Gets the flags of a field
fdf_get_opt ( resource $fdf_document , string $fieldname [, int $element = -1 ] ):mixed |  Gets a value from the opt array of a field
fdf_get_status ( resource $fdf_document ):string | Gets the value of the /STATUS key. 
fdf_get_value ( resource $fdf_document , string $fieldname [, int $which = -1 ] ):mixed | Gets the value for the requested field. 
fdf_get_version ([ resource $fdf_document ] ):string | Return the FDF version for the given document, or the toolkit API version number if no parameter is given. 
fdf_header ( ):void | This is a convenience function to set appropriate HTTP headers for FDF output. It sets the Content-type: to application/vnd.fdf. 
fdf_next_field_name ( resource $fdf_document [, $fieldname ] ):string | Gets the name of the field after the given field. This name can be used with several functions. 
fdf_open_string ( string $fdf_data ):resource |  Opens a new FDF document from string
fdf_open ( string $filename ):resource |  Opens a new FDF document
fdf_remove_item ( resource $fdf_document , string $fieldname , int $item ):bool |  Sets target frame for form
fdf_save_( resource $fdf_document ):string | Returns the FDF document as a string. 
fdf_save ( resource $fdf_document [, string $filename ] ):bool | Saves a FDF document. 
fdf_set_ap ( resource $fdf_document , string $field_name , int $face , string $filename , int $page_number ):bool | Sets the appearance of a field (i.e. the value of the /AP key). 
fdf_set_encoding ( resource $fdf_document , string $encoding ):bool | Sets the character encoding for the FDF document. 
fdf_set_file ( resource $fdf_document , string $url [, string $target_frame ] ):bool | Selects a different PDF document to display the form results in then the form it originated from. 
fdf_set_flags ( resource $fdf_document , string $fieldname , int $whichFlags , int $newFlags ):bool | Sets certain flags of the given field. 
fdf_set_javascript_action ( resource $fdf_document , string $fieldname , int $trigger , string $script ):bool | Sets a javascript action for the given field. 
fdf_set_on_import_javascript ( resource $fdf_document , string $script , $before_data_import ):bool |  Adds javascript code to be executed when Acrobat opens the FDF
fdf_set_opt ( resource $fdf_document , string $fieldname , int $element , string $str1 , string $str2 ):bool | Sets options of the given field. 
fdf_set_status ( resource $fdf_document , string $status ):bool | Sets the value of the /STATUS key. When a client receives a FDF with a status set it will present the value in an alert box. 
fdf_set_submit_form_action ( resource $fdf_document , string $fieldname , int $trigger , string $script , int $flags ):bool | Sets a submit form action for the given field. 
fdf_set_target_frame ( resource $fdf_document , string $frame_name ):bool | Sets the target frame to display a result PDF defined with fdf_save_file() in. 
fdf_set_value ( resource $fdf_document , string $fieldname , mixed $value [, int $isName ] ):bool | Sets the value for the given field. 
fdf_set_version ( resource $fdf_document , string $version ):bool |  Sets FDF version for a file
filepro_fieldcount ( void ):int | Returns the number of fields (columns) in the opened filePro database. 
filepro_fieldname ( int $field_number ):string | Returns the name of the field corresponding to field_number. 
filepro_fieldtype ( int $field_number ):string | Returns the edit type of the field corresponding to field_number. 
filepro_fieldwidth ( $field_number ):int | Returns the width of the field corresponding to field_number. 
filepro_retrieve ( int $row_number , int $field_number ):string |  Retrieves data from a filePro database
filepro_rowcount ( void ):int |  Find out how many rows are in a filePro database
filepro ( string $directory ):bool |  Read and verify the map file
fribidi_log2vis ( $str , $direction , int $charset ):string | Converts a logical string to a visual one. 
geoip_asnum_by_name ( $hostname ):string | The function will return the Autonomous System Numbers (ASN) associated with an IP address. 
geoip_continent_code_by_name ( $hostname ):string | The function will return the two letter continent code corresponding to a hostname or an IP address. 
geoip_country_code_by_name ( $hostname ):string | The function will return the two letter country code corresponding to a hostname or an IP address. 
geoip_country_code3_by_name ( $hostname ):string | The function will return the three letter country code corresponding to a hostname or an IP address. 
geoip_country_name_by_name ( $hostname ):string | The function will return the full country name corresponding to a hostname or an IP address. 
geoip_database_info ([ int $database = GEOIP_COUNTRY_EDITION ] ):string
geoip_db_avail ( int $database ):bool
geoip_db_filename ( int $database ):string
geoip_db_get_all_info ( void ):array
geoip_domain_by_name ( $hostname ):string
geoip_id_by_name ( string $hostname ):int
geoip_isp_by_name ( $hostname ):string
geoip_netspeedcell_by_name ( $hostname ):string
geoip_org_by_name ( $hostname ):string
geoip_record_by_name ( string $hostname ):array
geoip_region_by_name ( string $hostname ):array
geoip_region_name_by_code ( $country_code , $region_code ):string
geoip_setup_custom_directory ( string $path ):void | The function will change the default directory of the GeoIP database. This is equivalent to changing geoip.custom_directory. 
geoip_time_zone_by_country_and_region ( $country_code [, $region_code ] ):string
gnupg_adddecryptkey ( resource $identifier , string $fingerprint , string $passphrase ):bool
gnupg_addencryptkey ( resource $identifier , string $fingerprint ):bool
gnupg_addsignkey ( resource $identifier , string $fingerprint [, string $passphrase ] ):bool
gnupg_cleardecryptkeys ( resource $identifier ):bool
gnupg_clearencryptkeys ( resource $identifier ):bool
gnupg_clearsignkeys ( resource $identifier ):bool
gnupg_decrypt ( resource $identifier , $text ):string | Decrypts the given text with the keys, which were set with gnupg_adddecryptkey before. 
gnupg_decryptverify ( resource $identifier , string $text , string &$plaintext ):array | Decrypts and verifies a given text and returns information about the signature. 
gnupg_encrypt ( resource $identifier , $plaintext ):string | Encrypts the given plaintext with the keys, which were set with gnupg_addencryptkey before and returns the encrypted text. 
gnupg_encryptsign ( resource $identifier , $plaintext ):string | Encrypts and signs the given plaintext with the keys, which were set with gnupg_addsignkey and gnupg_addencryptkey before and returns the encrypted and signed text. 
gnupg_export ( resource $identifier , $fingerprint ):string | Exports the key fingerprint. 
gnupg_geterror ( resource $identifier ):string
gnupg_getprotocol ( resource $identifier ):int
gnupg_import ( resource $identifier , string $keydata ):array | Imports the key keydata and returns an array with information about the importprocess. 
gnupg_init ( void ):resource
gnupg_keyinfo ( resource $identifier , string $pattern ):array
gnupg_setarmor ( resource $identifier , int $armor ):bool | Toggle the armored output. 
gnupg_seterrormode ( resource $identifier , int $errormode ):void | Sets the mode for error_reporting. 
gnupg_setsignmode ( resource $identifier , int $signmode ):bool | Sets the mode for signing. 
gnupg_sign ( resource $identifier , $plaintext ):string | Signs the given plaintext with the keys, which were set with gnupg_addsignkey before and returns the signed text or the signature, depending on what was set with gnupg_setsignmode. 
gnupg_verify ( resource $identifier , string $signed_text , string $signature [, string &$plaintext ] ):array | Verifies the given signed_text and returns information about the signature. 
gupnp_context_get_host_ip ( resource $context ):string | Get the IP address we advertise ourselves as using. 
gupnp_context_get_port ( resource $context ):int | Get the port that the SOAP server is running on. 
gupnp_context_get_subscription_timeout ( resource $context ):int | Get the event subscription timeout (in seconds), or 0 meaning there is no timeout. 
gupnp_context_host_path ( resource $context , string $local_path , string $server_path ):bool | Start hosting local_path at server_path. Files with the path local_path.LOCALE (if they exist) will be served up when LOCALE is specified in the request's Accept-Language header. 
gupnp_context_new ([ string $host_ip [, int $port = 0 ]] ):resource | Create a new context with the specified host_ip and port. 
gupnp_context_set_subscription_timeout ( resource $context , int $timeout ):void | Sets the event subscription timeout (in seconds) to time out. Note that any client side subscriptions will automatically be renewed. 
gupnp_context_timeout_add ( resource $context , int $timeout , mixed $callback [, mixed $arg ] ):bool | Sets a function to be called at regular intervals. 
gupnp_context_unhost_path ( resource $context , string $server_path ):bool | Stop hosting the file or folder at server_path. 
gupnp_control_point_browse_start ( resource $cpoint ):bool | Start the search and calls user-defined callback. 
gupnp_control_point_browse_stop ( resource $cpoint ):bool | Stop the search and calls user-defined callback. 
gupnp_control_point_callback_set ( resource $cpoint , int $signal , mixed $callback [, mixed $arg ] ):bool | Set control point callback function for signal. 
gupnp_control_point_new ( $context , string $target ):resource | Create a new control point with the specified target. 
gupnp_device_action_callback_set ( resource $root_device , int $signal , string $action_name , mixed $callback [, mixed $arg ] ):bool | Set device callback function for signal and action. 
gupnp_device_info_get_service ( $root_device , string $type ):resource | Get the service with type or false if no such device was found. 
gupnp_device_info_get ( resource $root_device ):array | Get info of root device. 
gupnp_root_device_get_available ( resource $root_device ):bool | Get whether or not root_device is available (announcing its presence). 
gupnp_root_device_get_relative_location ( resource $root_device ):string | Get the relative location of root device. 
gupnp_root_device_new ( $context , string $location , string $description_dir ):resource | Create a new root device, automatically downloading and parsing location. 
gupnp_root_device_set_available ( resource $root_device , $available ):bool | Controls whether or not root_device is available (announcing its presence). 
gupnp_root_device_start ( resource $root_device ):bool | Start root server's main loop. 
gupnp_root_device_stop ( resource $root_device ):bool | Stop root server's main loop. 
gupnp_service_action_get ( resource $action , string $name , int $type ):mixed | Retrieves the specified action arguments. 
gupnp_service_action_return_error ( resource $action , int $error_code [, string $error_description ] ):bool | Return error code. 
gupnp_service_action_return ( resource $action ):bool | Return successfully. 
gupnp_service_action_set ( resource $action , string $name , int $type , mixed $value ):bool | Sets the specified action return values. 
gupnp_service_freeze_notify ( resource $service ):bool | Causes new notifications to be queued up until gupnp_service_thaw_notify() is called. 
gupnp_service_info_get_introspection ( resource $proxy [, $callback [, $arg ]] ):mixed | Get resource introspection of service or register callback if corresponding parameter was passed. 
gupnp_service_info_get ( resource $proxy ):array | Get full info of service. 
gupnp_service_introspection_get_state_variable ( resource $introspection , string $variable_name ):array | Returns the state variable data by the name variable_name in this service. 
gupnp_service_notify ( resource $service , string $name , int $type , mixed $value ):bool | Notifies listening clients that the property have changed to the specified values. 
gupnp_service_proxy_action_get ( resource $proxy , string $action , string $name , int $type ):mixed | Send action with parameters to the service exposed by proxy synchronously and get value. 
gupnp_service_proxy_action_set ( resource $proxy , string $action , string $name , mixed $value , int $type ):bool | Send action with parameters to the service exposed by proxy synchronously and set value. 
gupnp_service_proxy_add_notify ( resource $proxy , string $value , int $type , mixed $callback [, mixed $arg ] ):bool | Sets up callback to be called whenever a change notification for variable is recieved. 
gupnp_service_proxy_callback_set ( resource $proxy , int $signal , mixed $callback [, mixed $arg ] ):bool | Set service proxy callback for signal. 
gupnp_service_proxy_get_subscribed ( resource $proxy ):bool | Check whether subscription is valid to the service. 
gupnp_service_proxy_remove_notify ( resource $proxy , string $value ):bool | Cancels the variable change notification. 
gupnp_service_proxy_send_action ( resource $proxy , string $action , $in_params , $out_params ):array | Send action with parameters in_params to the service exposed by proxy synchronously and return out_params with values or FALSE on error. 
gupnp_service_proxy_set_subscribed ( resource $proxy , $subscribed ):bool | (Un)subscribes to the service. 
gupnp_service_thaw_notify ( resource $service ):bool | Sends out any pending notifications and stops queuing of new ones. 
db2_autocommit ( resource $connection [, bool $value ] ):mixed | Sets or gets the AUTOCOMMIT behavior of the specified connection resource. 
db2_bind_param ( resource $stmt , int $parameter_number , string $variable_name [, int $parameter_type [, int $data_type = 0 [, int $precision = -1 [, int $scale = 0 ]]]] ):bool | Binds a PHP variable to an SQL statement parameter in a statement resource returned by db2_prepare(). This function gives you more control over the parameter type, data type, precision, and scale for the parameter than simply passing the variable as part of the optional input array to db2_execute(). 
db2_client_info ( resource $connection ):object
db2_close ( resource $connection ):bool
db2_column_privileges ( $connection [, string $qualifier [, string $schema [, string $table-name [, string $column-name ]]]] ):resource | Returns a result set listing the columns and associated privileges for a table. 
db2_columns ( $connection [, string $qualifier [, string $schema [, string $table-name [, string $column-name ]]]] ):resource | Returns a result set listing the columns and associated metadata for a table. 
db2_commit ( resource $connection ):bool | Commits an in-progress transaction on the specified connection resource and begins a new transaction.
db2_conn_error ([ resource $connection ] ):string
db2_conn_errormsg ([ resource $connection ] ):string
db2_connect ( string $database , string $username , string $password [, array $options ] ):resource | Creates a new connection to an IBM DB2 Universal Database, IBM Cloudscape, or Apache Derby database. 
db2_cursor_type ( resource $stmt ):int | Returns the cursor type used by a statement resource. Use this to determine if you are working with a forward-only cursor or scrollable cursor. 
db2_escape_( $string_literal ):string | Prepends backslashes to special characters in the string argument. 
db2_exec ( $connection , string $statement [, array $options ] ):resource
db2_execute ( resource $stmt [, array $parameters ] ):bool
db2_fetch_( resource $stmt [, int $row_number = -1 ] ):array | Returns an array, indexed by column position, representing a row in a result set. The columns are 0-indexed. 
db2_fetch_assoc ( resource $stmt [, int $row_number = -1 ] ):array | Returns an array, indexed by column name, representing a row in a result set. 
db2_fetch_both ( resource $stmt [, int $row_number = -1 ] ):array | Returns an array, indexed by both column name and position, representing a row in a result set. Note that the row returned by db2_fetch_both() requires more memory than the single-indexed arrays returned by db2_fetch_assoc() or db2_fetch_array(). 
db2_fetch_( resource $stmt [, int $row_number = -1 ] ):object | Returns an object in which each property represents a column returned in the row fetched from a result set. 
db2_fetch_row ( resource $stmt [, int $row_number ] ):bool
db2_field_display_size ( resource $stmt , mixed $column ):int | Returns the maximum number of bytes required to display a column in a result set. 
db2_field_name ( resource $stmt , mixed $column ):string | Returns the name of the specified column in the result set. 
db2_field_num ( resource $stmt , mixed $column ):int | Returns the position of the named column in a result set. 
db2_field_precision ( resource $stmt , mixed $column ):int | Returns the precision of the indicated column in a result set. 
db2_field_scale ( resource $stmt , mixed $column ):int | Returns the scale of the indicated column in a result set. 
db2_field_type ( resource $stmt , mixed $column ):string | Returns the data type of the indicated column in a result set. 
db2_field_width ( resource $stmt , mixed $column ):int | Returns the width of the current value of the indicated column in a result set. This is the maximum width of the column for a fixed-length data type, or the actual width of the column for a variable-length data type. 
db2_foreign_keys ( $connection , string $qualifier , string $schema , string $table-name ):resource | Returns a result set listing the foreign keys for a table. 
db2_free_result ( resource $stmt ):bool | Frees the system and database resources that are associated with a result set. These resources are freed implicitly when a script finishes, but you can call db2_free_result() to explicitly free the result set resources before the end of the script. 
db2_free_stmt ( resource $stmt ):bool | Frees the system and database resources that are associated with a statement resource. These resources are freed implicitly when a script finishes, but you can call db2_free_stmt() to explicitly free the statement resources before the end of the script. 
db2_get_option ( resource $resource , $option ):string | Retrieves the value of a specified option value for a statement resource or a connection resource. 
db2_last_insert_id ( resource $resource ):string
db2_lob_read ( resource $stmt , int $colnum , int $length ):string | Use to iterate through a specified column of a result set and retrieve a user defined size of LOB data. 
db2_next_result ( $stmt ):resource | stored procedures: must be called for subsequent resultsets and return the result to a uniquely named PHP variable. 
db2_num_fields ( resource $stmt ):int | Returns the number of fields contained in a result set. This is most useful for handling the result sets returned by dynamically generated queries, or for result sets returned by stored procedures, where your application cannot otherwise know how to retrieve and use the results. 
db2_num_rows ( resource $stmt ):int
db2_pclose ( resource $resource ):bool
db2_pconnect ( string $database , string $username , string $password [, array $options ] ):resource
db2_prepare ( $connection , string $statement [, array $options ] ):resource
db2_primary_keys ( $connection , string $qualifier , string $schema , string $table-name ):resource | Returns a result set listing the primary keys for a table. 
db2_procedure_columns ( $connection , string $qualifier , string $schema , string $procedure , string $parameter ):resource | Returns a result set listing the parameters for one or more stored procedures. 
db2_procedures ( $connection , string $qualifier , string $schema , string $procedure ):resource | Returns a result set listing the stored procedures registered in a database. 
db2_result ( resource $stmt , $column ):mixed | Used to return the value of a specified column in the current row of a result set. You must call db2_fetch_row() before calling db2_result() to set the location of the result set pointer. 
db2_rollback ( resource $connection ):bool | Rolls back an in-progress transaction on the specified connection resource and begins a new transaction. PHP applications normally default to AUTOCOMMIT mode, so db2_rollback() normally has no effect unless AUTOCOMMIT has been turned off for the connection resource. 
db2_server_info ( resource $connection ):object
db2_set_option ( resource $resource , array $options , int $type ):bool | Sets options for a statement resource or a connection resource. You cannot set options for result set resources. 
db2_special_columns ( $connection , string $qualifier , string $schema , string $table_name , int $scope ):resource | Returns a result set listing the unique row identifier columns for a table. 
db2_statistics ( $connection , string $qualifier , string $schema , string $table-name , bool $unique ):resource | Returns a result set listing the index and statistics for a table. 
db2_stmt_error ([ resource $stmt ] ):string
db2_stmt_errormsg ([ resource $stmt ] ):string
db2_table_privileges ( $connection [, string $qualifier [, string $schema [, string $table_name ]]] ):resource | Returns a result set listing the tables and associated privileges in a database. 
db2_tables ( $connection [, string $qualifier [, string $schema [, string $table-name [, string $table-type ]]]] ):resource | Returns a result set listing the tables and associated metadata in a database. 
id3_get_frame_long_name ( $frameId ):string | returns the long name for an ID3v2 frame. 
id3_get_frame_short_name ( $frameId ):string | returns the short name for an ID3v2 frame. 
id3_get_genre_id ( string $genre ):int | returns the id for a genre. 
id3_get_genre_list ( void ):array
id3_get_genre_name ( int $genre_id ):string | returns the name for a genre id. 
id3_get_tag ( string $filename [, int $version = ID3_BEST ] ):array | used to get all information stored in the id3 tag of the specified file. 
id3_get_version ( string $filename ):int
id3_remove_tag ( string $filename [, int $version = ID3_V1_0 ] ):bool | used to remove the information stored of an ID3 tag. 
id3_set_tag ( string $filename , array $tag [, int $version = ID3_V1_0 ] ):bool | used to change the information stored of an ID3 tag. If no tag has been present, it will be added to the file. 
iis_add_server ( string $path , string $comment , string $server_ip , $port , string $host_name , $rights , $start_server ):int
iis_get_dir_security ( $server_instance , string $virtual_path ):int
iis_get_script_map ( int $server_instance , $virtual_path , $script_extension ):string
iis_get_server_by_comment ( string $comment ):int
iis_get_server_by_path ( string $path ):int | finds the virtual server instance number from the actual path to the root directory. 
iis_get_server_rights ( $server_instance , string $virtual_path ):int
iis_get_service_state ( string $service_id ):int
iis_remove_server ( $server_instance ):int
iis_set_app_settings ( $server_instance , string $virtual_path , string $application_scope ):int
iis_set_dir_security ( $server_instance , string $virtual_path , $directory_flags ):int
iis_set_script_map ( $server_instance , string $virtual_path , string $script_extension , string $engine_path , $allow_scripting ):int
iis_set_server_rights ( $server_instance , string $virtual_path , $directory_flags ):int
iis_start_server ( $server_instance ):int
iis_start_service ( string $service_id ):int
iis_stop_server ( $server_instance ):int
iis_stop_service ( string $service_id ):int
inclued_get_data ( void ):array | Get the inclued data. 
ingres_autocommit_state ( resource $link ):bool | called to determine whether the current link has autocommit enabled or not. 
ingres_autocommit ( resource $link ):bool |  Switch autocommit on or off
ingres_charset ( resource $link ):string
ingres_close ( resource $link ):bool |  Close an Ingres II database connection
ingres_commit ( resource $link ):bool |  Commit a transaction
ingres_connect ([ string $database [, string $username [, string $password [, array $options ]]]] ):resource |  Open a connection to an Ingres II database the syntax of database is [node_id::]dbname[/svr_class]
ingres_cursor ( resource $result ):string | Returns a string with the active cursor name. If no cursor is active then NULL is returned. 
ingres_errno ([ resource $link ] ):int
ingres_error ([ resource $link ] ):string
ingres_errsqlstate ([ resource $link ] ):string
ingres_escape_( resource $link , $source_):string | used to escape certain characters within a string before it is sent to the database server. 
ingres_execute ( resource $result [, array $params [, string $types ]] ):bool
ingres_fetch_( resource $result [, int $result_type ] ):array |  Fetch a row of result into an array result_type can be II_NUM for enumerated array, II_ASSOC for associative array, or II_BOTH (default)
ingres_fetch_assoc ( resource $result ):array
ingres_fetch_( resource $result [, int $result_type ] ):object |  Fetch a row of result into an object result_type can be II_NUM for enumerated object, II_ASSOC for associative object, or II_BOTH (default)
ingres_fetch_proc_return ( resource $result ):int
ingres_fetch_row ( resource $result ):array |  Fetch a row of result into an enumerated array
ingres_field_length ( resource $result , $index ):int |  Return the length of a field in a query result index must be >0 and <= ingres_num_fields()
ingres_field_name ( resource $result , int $index ):string |  Return the name of a field in a query result index must be >0 and <= ingres_num_fields()
ingres_field_nullable ( resource $result , int $index ):bool |  Return true if the field is nullable and false otherwise index must be >0 and <= ingres_num_fields()
ingres_field_precision ( resource $result , $index ):int |  Return the precision of a field in a query result index must be >0 and <= ingres_num_fields()
ingres_field_scale ( resource $result , $index ):int |  Return the scale of a field in a query result index must be >0 and <= ingres_num_fields()
ingres_field_type ( resource $result , int $index ):string |  Return the type of a field in a query result index must be >0 and <= ingres_num_fields()
ingres_free_result ( resource $result ):bool
ingres_next_error ([ resource $link ] ):bool | Get the next Ingres error for the last executed query. Each call to ingres_next_error() can be followed by a call to ingres_errno(), ingres_error() or ingres_errsqlstate() to get the respective error number, error text, or SQL STATE. While ingres_next_error() returns TRUE, there are more errors to fetch. 
ingres_num_fields ( resource $result ):int |  returns the number of fields in the results returned by the Ingres server after a call to ingres_query(). 
ingres_num_rows ( resource $result ):int |  Return the number of rows affected/returned by the last query
ingres_pconnect ([ string $database [, string $username [, string $password [, array $options ]]]] ):resource |  Open a persistent connection to an Ingres II database the syntax of database is [node_id::]dbname[/svr_class]
ingres_prepare ( resource $link , string $query ):mixed
ingres_query ( resource $link , string $query [, array $params [, string $types ]] ):mixed |  Send a SQL query to Ingres II
ingres_result_seek ( resource $result , int $position ):bool
ingres_rollback ( resource $link ):bool |  Roll back a transaction
ingres_set_environment ( resource $link , array $options ):bool | called to set environmental options that affect the output of certain values from Ingres, such as the timezone, date format, decimal character separator, and float precision. 
ingres_unbuffered_query ( resource $link , string $query [, array $params [, string $types ]] ):mixed
inotify_add_watch ( resource $inotify_instance , string $pathname , $mask ):int
inotify_init ( void ):resource | Initialize an inotify instance for use with inotify_add_watch() 
inotify_queue_len ( resource $inotify_instance ):int | This function allows to know if inotify_read() will block or not. If a number upper than zero is returned, there are pending events and inotify_read() will not block. 
inotify_read ( resource $inotify_instance ):array | Read inotify events from an inotify instance. 
inotify_rm_watch ( resource $inotify_instance , int $watch_descriptor ):bool | removes the watch watch_descriptor from the inotify instance inotify_instance. 
judy_type ( Judy $array ):int | return an integer corresponding to the Judy type of the specified Judy array. 
judy_version ( void ):string | Return a string of the PHP Judy version. If the return value is not used, the string will be printed. 
kadm5_chpass_principal ( resource $handle , string $principal , string $password ):bool | sets the new password password for the principal. 
kadm5_create_principal ( resource $handle , string $principal [, string $password [, array $options ]] ):bool | Creates a principal with the given password. 
kadm5_delete_principal ( resource $handle , string $principal ):bool | Removes the principal from the Kerberos database. 
kadm5_destroy ( resource $handle ):bool | Closes the connection to the admin server and releases all related resources. 
kadm5_flush ( resource $handle ):bool | Flush all changes to the Kerberos database, leaving the connection to the Kerberos admin server open. 
kadm5_get_policies ( resource $handle ):array | Gets an array containing the policies's names. 
kadm5_get_principal ( resource $handle , string $principal ):array | Gets the principal's entries from the Kerberos database. 
kadm5_get_principals ( resource $handle ):array | returns an array containing the principals's names. 
kadm5_init_with_password ( string $admin_server , string $realm , string $principal , string $password ):resource | Opens a connection with the KADM5 library using the principal and the given password to obtain initial credentials from the admin_server. 
kadm5_modify_principal ( resource $handle , string $principal , array $options ):bool | Modifies a principal according to the given options. 
event_add ( resource $event [, int $timeout = -1 ] ):bool | schedules the execution of the event when the event specified in event_set() occurs or in at least the time specified by the timeout argument. If timeout was not specified, not timeout is set. The event must be already initalized by event_set() and event_base_set() functions. If the event already has a timeout set, it is replaced by the new one. 
event_base_free ( resource $event_base ):void | Destroys the specified event_base and frees all the resources associated. Note that it's not possible to destroy an event base with events attached to it. 
event_base_loop ( resource $event_base [, $flags = 0 ] ):int | Starts event loop for the specified event base. 
event_base_loopbreak ( resource $event_base ):bool | Abort the active event loop immediately. The behaviour is similar to break statement. 
event_base_loopexit ( resource $event_base [, int $timeout = -1 ] ):bool | The next event loop iteration after the given timer expires will complete normally, then exit without blocking for events again. 
event_base_new ( void ):resource | Returns new event base, which can be used later in event_base_set(), event_base_loop() and other functions. 
event_base_priority_init ( resource $event_base , int $npriorities ):bool
event_base_reinit ( resource $event_base ):bool | Some event mechanisms do not survive across fork. The event_base needs to be reinitialized with this function. 
event_base_set ( resource $event , resource $event_base ):bool | Associates the event_base with the event. 
event_buffer_base_set ( resource $bevent , resource $event_base ):bool | Assign the specified bevent to the event_base. 
event_buffer_disable ( resource $bevent , int $events ):bool | Disables the specified buffered event. 
event_buffer_enable ( resource $bevent , int $events ):bool | Enables the specified buffered event. 
event_buffer_fd_set ( resource $bevent , resource $fd ):void | Changes the file descriptor on which the buffered event operates. 
event_buffer_free ( resource $bevent ):void | Destroys the specified buffered event and frees all the resources associated. 
event_buffer_new ( $stream , mixed $readcb , mixed $writecb , mixed $errorcb [, mixed $arg ] ):resource | Libevent provides an abstraction layer on top of the regular event API. Using buffered event you don't need to deal with the I/O manually, instead it provides input and output buffers that get filled and drained automatically. 
event_buffer_priority_set ( resource $bevent , int $priority ):bool | Assign a priority to the bevent. 
event_buffer_read ( resource $bevent , int $data_size ):string | Reads data from the input buffer of the buffered event. 
event_buffer_set_callback ( resource $event , mixed $readcb , mixed $writecb , mixed $errorcb [, mixed $arg ] ):bool | Sets or changes existing callbacks for the buffered event. 
event_buffer_timeout_set ( resource $bevent , int $read_timeout , int $write_timeout ):void | Sets the read and write timeouts for the specified buffered event. 
event_buffer_watermark_set ( resource $bevent , int $events , int $lowmark , int $highmark ):void | Sets the watermarks for read and write events. Libevent does not invoke read callback unless there is at least lowmark bytes in the input buffer; if the read buffer is beyond the highmark, reading is stopped. On output, the write callback is invoked whenever the buffered data falls below the lowmark. 
event_buffer_write ( resource $bevent , string $data [, int $data_size = -1 ] ):bool | Writes data to the specified buffered event. The data is appended to the output buffer and written to the descriptor when it becomes available for writing. 
event_del ( resource $event ):bool | Cancels the event. 
event_free ( resource $event ):void | Frees previously created event resource. 
event_new ( void ):resource | Creates and returns a new event resource. 
event_priority_set ( resource $event , int $priority ):bool | Assign a priority to the event. 
event_set ( resource $event , mixed $fd , int $events , mixed $callback [, mixed $arg ] ):bool
event_timer_add(->) function is an alias of: event_add(). :This
event_timer_del(->) function is an alias of: event_del(). :This
event_timer_new(->) function is an alias of: event_new(). :This
event_timer_set ( resource $event , callable $callback [, mixed $arg ] ):bool
lzf_compress ( $data ):string | compresses the given data string using LZF encoding. 
lzf_decompress ( $data ):string | decompresses the given data string containing lzf encoded data. 
lzf_optimized_for ( void ):int | Determines what was LZF extension optimized for during compilation. 
mailparse_determine_best_xfer_encoding ( resource $fp ):string | Figures out the best way of encoding the content read from the given file pointer. 
mailparse_msg_create ( void ):resource | Create a MIME mail resource. 
mailparse_msg_extract_part_file ( resource $mimemail , mixed $filename [, callable $callbackfunc ] ):string
mailparse_msg_extract_part ( resource $mimemail , string $msgbody [, callable $callbackfunc ] ):void
mailparse_msg_extract_whole_part_file ( resource $mimemail , $filename [, callable $callbackfunc ] ):string
mailparse_msg_free ( resource $mimemail ):bool | Frees a MIME resource. 
mailparse_msg_get_part_data ( resource $mimemail ):array
mailparse_msg_get_part ( $mimemail , string $mimesection ):resource
mailparse_msg_get_structure ( resource $mimemail ):array
mailparse_msg_parse_file ( string $filename ):resource | Parses a file. This is the optimal way of parsing a mail file that you have on disk. 
mailparse_msg_parse ( resource $mimemail , string $data ):bool
mailparse_rfc822_parse_addresses ( string $addresses ):array | Parses a ۠RFC 822 compliant recipient list, such as that found in the To: header. 
mailparse_stream_encode ( resource $sourcefp , resource $destfp , string $encoding ):bool | Streams data from the source file pointer, apply encoding and write to the destination file pointer. 
mailparse_uudecode_all ( resource $fp ):array | Scans the data from the given file pointer and extract each embedded uuencoded file into a temporary file. 
maxdb_affected_rows ( resource $link ):int
maxdb_autocommit ( resource $link , $mode ):bool
maxdb_bind_param(->) function is an alias of: maxdb_stmt_bind_param() :This | This function alias is deprecated and only exists for backwards compatibility reasons. 
maxdb_bind_result(->) function is an alias of: maxdb_stmt_bind_result(). :This | This function alias is deprecated and only exists for backwards compatibility reasons. 
maxdb_change_user ( resource $link , string $user , string $password , string $database ):bool
maxdb_character_set_name ( resource $link ):string
maxdb_client_encoding(->) function is an alias of: maxdb_character_set_name(). :This | This function alias is deprecated and only exists for backwards compatibility reasons. 
maxdb::close_long_data(->) function is an alias of: maxdb_stmt_close_long_data(). :This | This function alias is deprecated and only exists for backwards compatibility reasons. 
maxdb_close ( resource $link ):bool
maxdb_commit ( resource $link ):bool
maxdb_connect_errno ( void ):int | The function will return the last error code number for last call to maxdb_connect(). If no errors have occurred, this function will return zero. 
maxdb_connect_error ( void ):string | like maxdb_connect_errno() function in every way, but will return a string representation of the last error to occur for the last maxdb_connect() call. 
maxdb_connect ([ string $host [, string $username [, string $passwd [, string $dbname [, int $port = 0 [, string $socket ]]]]]] ):resource
maxdb_data_seek ( resource $result , int $offset ):bool
maxdb_debug ( string $debug ):void
maxdb_disable_reads_from_master ( resource $link ):bool
maxdb_disable_rpl_parse ( resource $link ):bool
maxdb_dump_debug_info ( resource $link ):bool
maxdb_embedded_connect ([ string $dbname ] ):resource
maxdb_enable_reads_from_master ( resource $link ):bool
maxdb_enable_rpl_parse ( resource $link ):bool
maxdb_errno ( resource $link ):int
maxdb_error ( resource $link ):string
maxdb_escape_string(->) function is an alias of: maxdb_real_escape_string(). :This
maxdb_execute(->) function is an alias of: maxdb_stmt_execute(). :This | This function alias is deprecated and only exists for backwards compatibility reasons. 
maxdb_fetch_array ( resource $result [, int $resulttype ] ):mixed
maxdb_fetch_assoc ( resource $result ):array
maxdb_fetch_field_direct ( resource $result , int $fieldnr ):mixed
maxdb_fetch_field ( resource $result ):mixed
maxdb_fetch_fields ( resource $result ):mixed
maxdb_fetch_lengths ( resource $result ):array
maxdb_fetch_( $result ):object
maxdb_fetch_row ( resource $result ):mixed
maxdb_fetch(->) function is an alias of: maxdb_stmt_fetch(). :This | This function alias is deprecated and only exists for backwards compatibility reasons. 
maxdb_field_count ( resource $link ):int
maxdb_field_seek ( resource $result , int $fieldnr ):bool
maxdb_field_tell ( resource $result ):int
maxdb_free_result ( resource $result ):void
maxdb_get_client_info ( void ):string | The function is used to return a string representing the client version being used in the MaxDB extension. 
maxdb_get_client_version ( void ):int | Returns client version number as an integer. 
maxdb_get_host_info ( resource $link ):string
maxdb_get_metadata(->) function is an alias of: maxdb_stmt_result_metadata(). :This | This function alias is deprecated and only exists for backwards compatibility reasons. 
maxdb_get_proto_info ( resource $link ):int
maxdb_get_server_info ( resource $link ):string
maxdb_get_server_version ( resource $link ):int
maxdb_info ( resource $link ):string
maxdb_init ( void ):resource
maxdb_insert_id ( resource $link ):mixed
maxdb_kill ( resource $link , int $processid ):bool
maxdb_master_query ( resource $link , string $query ):bool
maxdb_more_results ( resource $link ):bool | indicates if one or more result sets are available from a previous call to maxdb_multi_query(). 
maxdb_multi_query ( resource $link , string $query ):bool
maxdb_next_result ( resource $link ):bool | Since multiple queries are not yet supported, maxdb_next_result() returns always FALSE. 
maxdb_num_fields ( resource $result ):int
maxdb_num_rows ( resource $result ):int
maxdb_options ( resource $link , int $option , mixed $value ):bool
maxdb_param_count(->) function is an alias of: maxdb_stmt_param_count(). :This | This function alias is deprecated and only exists for backwards compatibility reasons. 
maxdb_ping ( resource $link ):bool
maxdb_prepare ( $link , string $query ):resource
maxdb_query ( resource $link , string $query [, int $resultmode ] ):mixed
maxdb_real_connect ( resource $link [, string $hostname [, string $username [, string $passwd [, string $dbname [, int $port = 0 [, string $socket ]]]]]] ):bool
maxdb_real_escape_( resource $link , $escapestr ):string
maxdb_real_query ( resource $link , string $query ):bool
maxdb_report ( int $flags ):bool
maxdb_rollback ( resource $link ):bool
maxdb_rpl_parse_enabled ( resource $link ):int
maxdb_rpl_probe ( resource $link ):bool
maxdb_rpl_query_type ( resource $link ):int
maxdb_select_db ( resource $link , string $dbname ):bool
maxdb_send_long_data(->) function is an alias of: maxdb_stmt_send_long_data(). :This | This function alias is deprecated and only exists for backwards compatibility reasons. 
maxdb_send_query ( resource $link , string $query ):bool
maxdb_server_end ( ):void
maxdb_server_init ([ array $server [, array $groups ]] ):bool
maxdb_set_opt(->) function is an alias of: maxdb_options(). :This
maxdb_sqlstate ( resource $link ):string
maxdb_ssl_set ( resource $link , string $key , string $cert , string $ca , string $capath , string $cipher ):bool
maxdb_stat ( resource $link ):string
maxdb_stmt_affected_rows ( resource $stmt ):int
maxdb_stmt_bind_param ( resource $stmt , string $types , mixed &$var1 [, mixed &$... ] ):bool
maxdb_stmt_bind_result ( resource $stmt , mixed &$var1 [, mixed &$... ] ):bool
maxdb_stmt_close_long_data ( resource $stmt , int $param_nr ):bool
maxdb_stmt_close ( resource $stmt ):bool
maxdb_stmt_data_seek ( resource $statement , int $offset ):bool
maxdb_stmt_errno ( resource $stmt ):int
maxdb_stmt_error ( resource $stmt ):string
maxdb_stmt_execute ( resource $stmt ):bool
maxdb_stmt_fetch ( resource $stmt ):bool
maxdb_stmt_free_result ( resource $stmt ):void
maxdb_stmt_init ( $link ):resource
maxdb_stmt_num_rows ( resource $stmt ):int
maxdb_stmt_param_count ( resource $stmt ):int
maxdb_stmt_prepare ( resource $stmt , string $query ):bool
maxdb_stmt_reset ( resource $stmt ):bool
maxdb_stmt_result_metadata ( $stmt ):resource
maxdb_stmt_send_long_data ( resource $stmt , int $param_nr , string $data ):bool
maxdb_stmt_sqlstate ( resource $stmt ):string
maxdb_stmt_store_result ( resource $stmt ):bool
maxdb_store_result ( $link ):resource
maxdb_thread_id ( resource $link ):int
maxdb_thread_safe ( void ):bool | indicates whether the client library is compiled as thread-safe. 
maxdb_use_result ( $link ):resource
maxdb_warning_count ( resource $link ):int
m_checkstatus ( resource $conn , $identifier ):int
m_completeauthorizations ( resource $conn , &$array ):int
m_connect ( resource $conn ):int
m_connectionerror ( resource $conn ):string
m_deletetrans ( resource $conn , int $identifier ):bool
m_destroyconn ( resource $conn ):bool
m_destroyengine ( ):void
m_getcell ( resource $conn , int $identifier , $column , int $row ):string
m_getcellbynum ( resource $conn , int $identifier , int $column , int $row ):string
m_getcommadelimited ( resource $conn , int $identifier ):string
m_getheader ( resource $conn , int $identifier , int $column_num ):string
m_initconn ( void ):resource
m_initengine ( string $location ):int
m_iscommadelimited ( resource $conn , $identifier ):int
m_maxconntimeout ( resource $conn , int $secs ):bool
m_monitor ( resource $conn ):int
m_numcolumns ( resource $conn , $identifier ):int
m_numrows ( resource $conn , $identifier ):int
m_parsecommadelimited ( resource $conn , $identifier ):int
m_responsekeys ( resource $conn , int $identifier ):array
m_responseparam ( resource $conn , int $identifier , $key ):string
m_returnstatus ( resource $conn , $identifier ):int
m_setblocking ( resource $conn , $tf ):int
m_setdropfile ( resource $conn , string $directory ):int
m_setip ( resource $conn , string $host , $port ):int
m_setssl_cafile ( resource $conn , string $cafile ):int
m_setssl_files ( resource $conn , string $sslkeyfile , string $sslcertfile ):int
m_setssl ( resource $conn , string $host , $port ):int
m_settimeout ( resource $conn , $seconds ):int
m_sslcert_gen_hash ( $filename ):string
m_transactionssent ( resource $conn ):int
m_transinqueue ( resource $conn ):int
m_transkeyval ( resource $conn , $identifier , string $key , string $value ):int
m_transnew ( resource $conn ):int
m_transsend ( resource $conn , $identifier ):int
m_uwait ( $microsecs ):int
m_validateidentifier ( resource $conn , $tf ):int
m_verifyconnection ( resource $conn , int $tf ):bool
m_verifysslcert ( resource $conn , int $tf ):bool
memcache_debug ( $on_off ):bool
ming_keypress ( string $char ):int
ming_setcubicthreshold ( int $threshold ):void | Sets the threshold error for drawing cubic beziers. 
ming_setscale ( float $scale ):void | Sets the scale of the output SWF. Inside the SWF file, coordinates are measured in TWIPS, rather than PIXELS. There are 20 TWIPS in 1 pixel. 
ming_setswfcompression ( int $level ):void | Sets the SWF output compression level. 
ming_useconstants ( int $use ):void |  Use constant pool (?)
ming_useswfversion ( int $version ):void | Sets the SWF version to be used in the movie. This affect the bahaviour of Action Script. 
udm_add_search_limit ( resource $agent , int $var , string $val ):bool | adds search restrictions. 
udm_alloc_agent_array ( array $databases ):resource | will create an agent with multiple database connections. 
udm_alloc_agent ( string $dbaddr [, string $dbmode ] ):resource | Allocate a mnoGoSearch session. 
udm_api_version ( void ):int |  Get mnoGoSearch API version
udm_cat_list ( resource $agent , string $category ):array |  Get mnoGoSearch categories list with the same root
udm_cat_path ( resource $agent , string $category ):array | Returns an array describing the path in the categories tree from the tree root to the current one, specified by category. 
udm_check_charset ( resource $agent , string $charset ):bool |  Check if the given charset is known to mnogosearch
udm_clear_search_limits ( resource $agent ):bool | resets defined search limitations. 
udm_crc32 ( resource $agent , string $str ):int |  Return CRC32 checksum of gived string
udm_errno ( resource $agent ):int | Receiving numeric agent error code. 
udm_error ( resource $agent ):string | Gets the agent error message. 
udm_find ( $agent , string $query ):resource |  Perform search
udm_free_agent ( resource $agent ):int | Freeing up memory allocated for agent session. 
udm_free_ispell_data ( int $agent ):bool | Frees the memory allocated for ispell data. 
udm_free_res ( resource $res ):bool | Freeing up memory allocated for results. 
udm_get_doc_count ( resource $agent ):int | returns the number of documents in the database. 
udm_get_res_field ( resource $res , int $row , int $field ):string | Fetch a mnoGoSearch result field. 
udm_get_res_param ( resource $res , int $param ):string | Gets the mnoGoSearch result parameters. 
udm_hash32 ( resource $agent , string $str ):int | will take a string str and return a quite unique 32-bit hash number from it. 
udm_load_ispell_data ( resource $agent , int $var , string $val1 , string $val2 , int $flag ):bool |  Load ispell data
udm_set_agent_param ( resource $agent , int $var , string $val ):bool | Defines mnoGoSearch session parameters. 
bson_decode ( string $bson ):array | beta - It is only useful if you're doing something weird, such as writing your own driver on top of the PHP driver. 
bson_encode ( mixed $anything ):string | beta - It is only useful if you're doing something weird, such as writing your own driver on top of the PHP driver. 
mqseries_back ( resource $hconn , resource &$compCode , resource &$reason ):void
mqseries_begin ( resource $hconn , array $beginOptions , resource &$compCode , resource &$reason ):void
mqseries_close ( resource $hconn , resource $hobj , int $options , resource &$compCode , resource &$reason ):void | The (MQCLOSE) call relinquishes access to an object, and is the inverse of the mqseries_open() (MQOPEN) call. 
mqseries_cmit ( resource $hconn , resource &$compCode , resource &$reason ):void | indicates to the queue manager that the application has reached a syncpoint, and that all of the message gets and puts that have occurred since the last syncpoint are to be made permanent.
mqseries_conn ( string $qManagerName , resource &$hconn , resource &$compCode , resource &$reason ):void | The (MQCONN) call connects an application program to a queue manager. returns a queue manager connection handle. 
mqseries_connx ( string $qManagerName , array &$connOptions , resource &$hconn , resource &$compCode , resource &$reason ):void
mqseries_disc ( resource $hconn , resource &$compCode , resource &$reason ):void | The (MQDISC) call breaks the connection between the queue manager and the application program, and is the inverse of the mqseries_conn() (MQCONN) or mqseries_connx() (MQCONNX) call. 
mqseries_get ( resource $hConn , resource $hObj , array &$md , array &$gmo , int &$bufferLength , string &$msg , int &$data_length , resource &$compCode , resource &$reason ):void | The (MQGET) call retrieves a message from a local queue that has been opened using the mqseries_open() (MQOPEN) call 
mqseries_inq ( resource $hconn , resource $hobj , int $selectorCount , array $selectors , int $intAttrCount , resource &$intAttr , int $charAttrLength , resource &$charAttr , resource &$compCode , resource &$reason ):void | The (MQINQ) call returns an array of integers and a set of character strings containing the attributes of an object. 
mqseries_open ( resource $hconn , array &$objDesc , int $option , resource &$hobj , resource &$compCode , resource &$reason ):void | The (MQOPEN) call establishes access to an object. 
mqseries_put1 ( resource $hconn , resource &$objDesc , resource &$msgDesc , resource &$pmo , string $buffer , resource &$compCode , resource &$reason ):void
mqseries_put ( resource $hConn , resource $hObj , array &$md , array &$pmo , string $message , resource &$compCode , resource &$reason ):void | The (MQPUT) call puts a message on a queue or distribution list. The queue or distribution list must already be open. 
mqseries_set ( resource $hConn , resource $hObj , int $selectorCount , array $selectors , int $intAttrCount , array $intAttrs , int $charAttrLength , array $charAttrs , resource &$compCode , resource &$reason ):void | The (MQSET) call is used to change the attributes of an object represented by a handle. The object must be a queue. 
mqseries_strerror ( int $reason ):string | returns the message that correspond to the reason result code. 
msession_connect ( string $host , string $port ):bool |  Connect to msession sever
msession_count ( void ):int |  Get session count
msession_create ( string $session [, string $classname [, string $data ]] ):bool |  Create a session
msession_destroy ( string $name ):bool |  Destroy a session
msession_disconnect ( ):void |  Disconnect from msession server
msession_find ( string $name , string $value ):array |  Find all sessions with name and value
msession_get_( string $session ):array |  Get array of msession variables
msession_get_data ( $session ):string |  Get data session unstructured data. (PHP sessions use this)
msession_get ( $session , $name , $value ):string |  Get value from session
msession_inc ( $session , $name ):string |  | Increment value in session
msession_list ( void ):array |  List all sessions
msession_listvar ( string $name ):array | Used for searching sessions with common attributes. 
msession_lock ( string $name ):int |  Lock a session
msession_plugin ( $session , $val [, $param ] ):string |  Call the personality plugin escape function
msession_randstr ( int $param ):string |  Get random string
msession_set_array ( string $session , array $tuples ):void |  Set msession variables from an array
msession_set_data ( string $session , string $value ):bool |  Set data session unstructured data. (PHP sessions use this)
msession_set ( string $session , string $name , string $value ):bool |  Set value in session
msession_timeout ( string $session [, $param ] ):int |  Set/get session timeout
msession_uniq ( int $param [, $classname [, $data ]] ):string |  Get uniq id
msession_unlock ( string $session , $key ):int |  Unlock a session
mysqlnd_memcache_get_config ( mixed $connection ):array | This function returns an array of all mysqlnd_memcache related configuration information that is attached to the MySQL connection. 
mysqlnd_memcache_set ( mixed $mysql_connection [, Memcached $memcache_connection [, string $pattern [, callback $callback ]]] ):bool
mysqlnd_ms_dump_servers ( mixed $connection ):array | Returns a list of currently configured servers. 
mysqlnd_ms_fabric_select_global ( mixed $connection , mixed $table_name ):array
mysqlnd_ms_fabric_select_shard ( mixed $connection , mixed $table_name , mixed $shard_key ):array
mysqlnd_ms_get_last_gtid ( mixed $connection ):string | Returns a global transaction identifier which belongs to a write operation no older than the last write performed by the client. It is not guaranteed that the global transaction identifier is identical to that one created for the last write transaction performed by the client. 
mysqlnd_ms_get_last_used_connection ( mixed $connection ):array
mysqlnd_ms_get_stats ( void ):array
mysqlnd_ms_match_wild ( string $table_name , string $wildcard ):bool
mysqlnd_ms_query_is_select ( string $query ):int
mysqlnd_ms_set_qos ( mixed $connection , int $service_level [, int $service_level_option [, mixed $option_value ]] ):bool
mysqlnd_ms_set_user_pick_server ( string $function ):bool
mysqlnd_ms_xa_begin ( mixed $connection , string $gtrid [, $timeout ] ):int
mysqlnd_ms_xa_commit ( mixed $connection , string $gtrid ):int
mysqlnd_ms_xa_gc ( mixed $connection [, string $gtrid [, bool $ignore_max_retries ]] ):int
mysqlnd_ms_xa_rollback ( mixed $connection , string $gtrid ):int
mysqlnd_qc_clear_cache ( void ):bool
mysqlnd_qc_get_available_handlers ( void ):array | Which storage are available depends on the compile time configuration of the query cache plugin. The default storage handler is always available. All other storage handler must be enabled explicitly when building the extension. 
mysqlnd_qc_get_cache_info ( void ):array
mysqlnd_qc_get_core_stats ( void ):array
mysqlnd_qc_get_normalized_query_trace_log ( void ):array
mysqlnd_qc_get_query_trace_log ( void ):array
mysqlnd_qc_set_cache_condition ( int $condition_type , mixed $condition , mixed $condition_option ):bool | Sets a condition for automatic caching of statements which do not contain the necessary SQL hints to enable caching of them. 
mysqlnd_qc_set_is_select ( string $callback ):mixed
mysqlnd_qc_set_storage_handler ( string $handler ):bool | Sets the storage handler used by the query cache. A list of available storage handler can be obtained from mysqlnd_qc_get_available_handlers().
mysqlnd_qc_set_user_handlers ( string $get_hash , string $find_query_in_cache , string $return_to_cache , string $add_query_to_cache_if_not_exists , string $query_is_select , string $update_query_run_time_stats , string $get_stats , string $clear_cache ):bool | Sets the callback functions for a user-defined procedural storage handler. 
mysqlnd_uh_convert_to_mysqlnd ( mysqli &$mysql_connection ):resource
mysqlnd_uh_set_connection_proxy ( MysqlndUhConnection &$connection_proxy [, mysqli &$mysqli_connection ] ):bool
mysqlnd_uh_set_statement_proxy ( MysqlndUhStatement &$statement_proxy ):bool
ncurses_addch ( $ch ):int |  Adds character at current position and advance cursor
ncurses_addchnstr ( string $s , $n ):int |  Adds attributed string with specified length at current position
ncurses_addchstr ( string $s ):int |  Adds attributed string at current position
ncurses_addnstr ( string $s , $n ):int |  Adds string with specified length at current position
ncurses_addstr ( string $text ):int |  Outputs text at current position
ncurses_assume_default_colors ( $fg , $bg ):int |  Defines default colors for color 0
ncurses_attroff ( $attributes ):int |  Turns off the given attributes
ncurses_attron ( $attributes ):int |  Turns on the given attributes
ncurses_attrset ( $attributes ):int |  Sets given attributes
ncurses_baudrate ( void ):int |  Returns baudrate of terminal
ncurses_beep ( void ):int |  Let the terminal beep
ncurses_bkgd ( $attrchar ):int |  Sets background property for terminal screen
ncurses_bkgdset ( int $attrchar ):void |  Controls screen background
ncurses_border ( $left , $right , $top , $bottom , $tl_corner , $tr_corner , $bl_corner , $br_corner ):int |  Draws a border around the screen using attributed characters
ncurses_bottom_panel ( resource $panel ):int |  Moves a visible panel to the bottom of the stack
ncurses_can_change_color ( void ):bool | Checks whether the terminal has color capabilities and whether the programmer can change color definitions using ncurses_init_color(). ncurses must be initialized using ncurses_init() before calling this function. 
ncurses_cbreak ( void ):bool |  Switches of input buffering
ncurses_clear ( void ):bool |  Clears screen
ncurses_clrtobot ( void ):bool |  Clears screen from current position to bottom
ncurses_clrtoeol ( void ):bool |  Clears screen from current position to end of line
ncurses_color_content ( $color , &$r , &$g , &$b ):int | Retrieves the red, green, and blue components for the given color definition. Terminal color capabilities must be initialized with ncurses_start_color() prior to calling this function. 
ncurses_color_set ( $pair ):int |  Sets fore- and background color
ncurses_curs_set ( $visibility ):int |  Sets cursor state
ncurses_def_prog_mode ( void ):bool |  Saves terminals (program) mode
ncurses_def_shell_mode ( void ):bool |  Saves terminal (shell) mode
ncurses_define_key ( string $definition , $keycode ):int |  Defines a keycode
ncurses_del_panel ( resource $panel ):bool |  Remove panel from the stack and delete it (but not the associated window)
ncurses_delay_output ( $milliseconds ):int |  Delays output on terminal using padding characters
ncurses_delch ( void ):bool |  Deletes character at current position, move rest of line left
ncurses_deleteln ( void ):bool |  Deletes line at current position, move rest of screen up
ncurses_delwin ( resource $window ):bool |  Deletes a ncurses window
ncurses_doupdate ( void ):bool |  Writes all prepared refreshes to terminal
ncurses_echo ( void ):bool |  Activates keyboard input echo
ncurses_echochar ( $character ):int |  Single character output including refresh
ncurses_end ( void ):int |  Stops using ncurses, clean up the screen
ncurses_erase ( void ):bool |  Erases terminal screen
ncurses_erasechar ( void ):string |  Returns current erase character
ncurses_filter ( ):void
ncurses_flash ( void ):bool |  Flashes terminal screen (visual bell)
ncurses_flushinp ( void ):bool |  Flushes keyboard input buffer
ncurses_getch ( void ):int |  Reads a character from keyboard
ncurses_getmaxyx ( resource $window , int &$y , int &$x ):void |  Returns the size of a window
ncurses_getmouse ( array &$mevent ):bool |  Reads mouse event from queue. The content of mevent is cleared before new data is added.
ncurses_getyx ( resource $window , int &$y , int &$x ):void |  Returns the current cursor position for a window
ncurses_halfdelay ( $tenth ):int |  Puts terminal into halfdelay mode
ncurses_has_colors ( void ):bool | Checks whether the terminal has color capabilities. This function can be used to write terminal-independent programs. ncurses must be initialized using ncurses_init() before calling this function. 
ncurses_has_ic ( void ):bool |  Checks for insert- and delete-capabilities
ncurses_has_il ( void ):bool |  Checks for line insert- and delete-capabilities
ncurses_has_key ( $keycode ):int |  Checks for presence of a function key on terminal keyboard
ncurses_hide_panel ( resource $panel ):int |  Remove panel from the stack, making it invisible
ncurses_hline ( $charattr , $n ):int |  Draws a horizontal line at current position using an attributed character and max. n characters long
ncurses_inch ( void ):string |  Gets character and attribute at current position
ncurses_init_color ( $color , $r , $g , $b ):int |  Sets new RGB value for color
ncurses_init_pair ( $pair , $fg , $bg ):int |  Allocates a color pair
ncurses_init ( ):void |  Initializes ncurses
ncurses_insch ( $character ):int |  Inserts character moving rest of line including character at current position
ncurses_insdelln ( $count ):int |  Inserts lines before current line scrolling down (negative numbers delete and scroll up)
ncurses_insertln ( void ):int |  Inserts a line, move rest of screen down
ncurses_insstr ( string $text ):int |  Inserts string at current position, moving rest of line right
ncurses_instr ( string &$buffer ):int |  Reads string from terminal screen
ncurses_isendwin ( void ):bool |  Ncurses is in endwin mode, normal screen output may be performed
ncurses_keyok ( $keycode , bool $enable ):int |  Enables or disable a keycode
ncurses_keypad ( resource $window , bool $bf ):int |  Turns keypad on or off
ncurses_killchar ( void ):string |  Returns current line kill character
ncurses_longname ( void ):string |  Returns terminal description
ncurses_meta ( resource $window , bool $8bit ):int |  Enables/Disable 8-bit meta key information
ncurses_mouse_trafo ( int &$y , int &$x , $toscreen ):bool |  Transforms coordinates
ncurses_mouseinterval ( $milliseconds ):int |  Sets timeout for mouse button clicks
ncurses_mousemask ( $newmask , &$oldmask ):int |  Returns and sets mouse options
ncurses_move_panel ( resource $panel , $startx , $starty ):int |  Moves a panel so that it's upper-left corner is at [startx, starty]
ncurses_move ( $y , $x ):int |  Moves output position
ncurses_mvaddch ( $y , $x , $c ):int |  Moves current position and add character
ncurses_mvaddchnstr ( $y , $x , string $s , $n ):int |  Moves position and add attrributed string with specified length
ncurses_mvaddchstr ( $y , $x , string $s ):int |  Moves position and add attributed string
ncurses_mvaddnstr ( $y , $x , string $s , $n ):int |  Moves position and add string with specified length
ncurses_mvaddstr ( $y , $x , string $s ):int |  Moves position and add string
ncurses_mvcur ( $old_y , $old_x , $new_y , $new_x ):int |  Moves cursor immediately
ncurses_mvdelch ( $y , $x ):int |  Moves position and delete character, shift rest of line left
ncurses_mvgetch ( $y , $x ):int |  Moves position and get character at new position
ncurses_mvhline ( $y , $x , $attrchar , $n ):int |  Sets new position and draw a horizontal line using an attributed character and max. n characters long
ncurses_mvinch ( $y , $x ):int |  Moves position and get attributed character at new position
ncurses_mvvline ( $y , $x , $attrchar , $n ):int |  Sets new position and draw a vertical line using an attributed character and max. n characters long
ncurses_mvwaddstr ( resource $window , $y , $x , string $text ):int |  Adds string at new position in window
ncurses_napms ( $milliseconds ):int |  Sleep
ncurses_new_panel ( $window ):resource |  Create a new panel and associate it with window
ncurses_newpad ( int $rows , int $cols ):resource |  Creates a new pad (window)
ncurses_newwin ( int $rows , int $cols , int $y , int $x ):resource |  Creates a new window
ncurses_nl ( void ):bool |  Translates newline and carriage return / line feed
ncurses_nocbreak ( void ):bool |  Switches terminal to cooked mode
ncurses_noecho ( void ):bool |  Switches off keyboard input echo
ncurses_nonl ( void ):bool |  Do not ranslate newline and carriage return / line feed
ncurses_noqiflush ( ):void |  Do not flush on signal characters
ncurses_noraw ( void ):bool |  Switches terminal out of raw mode
ncurses_pair_content ( $pair , &$f , &$b ):int | Retrieves the foreground and background colors that constitute the given color pair. Terminal color capabilities must be initialized with ncurses_start_color() prior to calling this function. 
ncurses_panel_above ( $panel ):resource |  Returns the panel above panel. If panel is null, returns the bottom panel in the stack
ncurses_panel_below ( $panel ):resource |  Returns the panel below panel. If panel is null, returns the top panel in the stack
ncurses_panel_window ( $panel ):resource |  Returns the window associated with panel
ncurses_pnoutrefresh ( resource $pad , $pminrow , $pmincol , $sminrow , $smincol , $smaxrow , $smaxcol ):int |  Copys a region from a pad into the virtual screen
ncurses_prefresh ( resource $pad , $pminrow , $pmincol , $sminrow , $smincol , $smaxrow , $smaxcol ):int |  Copys a region from a pad into the virtual screen
ncurses_putp ( string $text ):int
ncurses_qiflush ( ):void |  Flushes on signal characters
ncurses_raw ( void ):bool |  Switches terminal into raw mode
ncurses_refresh ( $ch ):int |  Refresh screen
ncurses_replace_panel ( resource $panel , resource $window ):int |  Replaces the window associated with panel
ncurses_reset_prog_mode ( void ):int |  Resets the prog mode saved by def_prog_mode
ncurses_reset_shell_mode ( void ):int |  Resets the shell mode saved by def_shell_mode
ncurses_resetty ( void ):bool |  Restores saved terminal state
ncurses_savetty ( void ):bool |  Saves terminal state
ncurses_scr_dump ( string $filename ):int |  Dumps screen content to file
ncurses_scr_init ( string $filename ):int |  Initializes screen from file dump
ncurses_scr_restore ( string $filename ):int |  Restores screen from file dump
ncurses_scr_set ( string $filename ):int |  Inherits screen from file dump
ncurses_scrl ( $count ):int |  Scrolls window content up or down without changing current position
ncurses_show_panel ( resource $panel ):int |  Places an invisible panel on top of the stack, making it visible
ncurses_slk_attr ( void ):int |  Returns current soft label keys attribute
ncurses_slk_attroff ( $intarg ):int
ncurses_slk_attron ( $intarg ):int
ncurses_slk_attrset ( $intarg ):int
ncurses_slk_clear ( void ):bool |  Clears soft label keys from screen
ncurses_slk_color ( $intarg ):int |  Sets color for soft label keys
ncurses_slk_init ( int $format ):bool |  Inits soft label keys
ncurses_slk_noutrefresh ( void ):bool |  Copies soft label keys to virtual screen
ncurses_slk_refresh ( void ):int |  Copies soft label keys to screen
ncurses_slk_restore ( void ):int |  Restores soft label keys
ncurses_slk_set ( int $labelnr , string $label , int $format ):bool |  Sets function key labels
ncurses_slk_touch ( void ):int |  Forces output when ncurses_slk_noutrefresh is performed
ncurses_standend ( void ):int |  Stops using 'standout' attribute
ncurses_standout ( void ):int |  Starts using 'standout' attribute
ncurses_start_color ( void ):int | Initializes color functionality in ncurses. This function must be called before any color manipulation functions are called and after ncurses_init() is called. It is good practice to call this function right after ncurses_init(). 
ncurses_termattrs ( void ):bool |  Returns a logical OR of all attribute flags supported by terminal
ncurses_termname ( void ):string |  Returns terminal name
ncurses_timeout ( int $millisec ):void |  Sets timeout for special key sequences
ncurses_top_panel ( resource $panel ):int |  Moves a visible panel to the top of the stack
ncurses_typeahead ( $fd ):int |  Specifys different filedescriptor for typeahead checking
ncurses_ungetch ( $keycode ):int |  Puts a character back into the input stream
ncurses_ungetmouse ( array $mevent ):bool |  Pushes mouse event to queue
ncurses_update_panels ( ):void |  Refreshes the virtual screen to reflect the relations between panels in the stack.
ncurses_use_default_colors ( void ):bool |  Assigns terminal default colors to color id -1
ncurses_use_env ( bool $flag ):void |  Controls use of environment information about terminal size
ncurses_use_extended_names ( bool $flag ):int |  Controls use of extended names in terminfo descriptions
ncurses_vidattr ( $intarg ):int
ncurses_vline ( $charattr , $n ):int |  Draws a vertical line at current position using an attributed character and max. n characters long
ncurses_waddch ( resource $window , $ch ):int |  Adds character at current position in a window and advance cursor
ncurses_waddstr ( resource $window , string $str [, $n ] ):int |  Outputs text at current postion in window
ncurses_wattroff ( resource $window , $attrs ):int |  Turns off attributes for a window
ncurses_wattron ( resource $window , $attrs ):int |  Turns on attributes for a window
ncurses_wattrset ( resource $window , $attrs ):int |  Set the attributes for a window
ncurses_wborder ( resource $window , $left , $right , $top , $bottom , $tl_corner , $tr_corner , $bl_corner , $br_corner ):int |  Draws a border around the window using attributed characters
ncurses_wclear ( resource $window ):int |  Clears window
ncurses_wcolor_set ( resource $window , $color_pair ):int |  Sets windows color pairings
ncurses_werase ( resource $window ):int |  Erase window contents
ncurses_wgetch ( resource $window ):int |  Reads a character from keyboard (window)
ncurses_whline ( resource $window , $charattr , $n ):int |  Draws a horizontal line in a window at current position using an attributed character and max. n characters long
ncurses_wmouse_trafo ( resource $window , int &$y , int &$x , $toscreen ):bool |  Transforms window/stdscr coordinates
ncurses_wmove ( resource $window , $y , $x ):int |  Moves windows output position
ncurses_wnoutrefresh ( resource $window ):int |  Copies window to virtual screen
ncurses_wrefresh ( resource $window ):int |  Refreshes window on terminal screen
ncurses_wstandend ( resource $window ):int |  End standout mode for a window
ncurses_wstandout ( resource $window ):int |  Enter standout mode for a window
ncurses_wvline ( resource $window , $charattr , $n ):int |  Draws a vertical line in a window at current position using an attributed character and max. n characters long
gopher_parsedir ( string $dirent ):array
newt_bell ( ):void
newt_button_bar ( array &$buttons ):resource | This function returns a grid containing the buttons created. 
newt_button ( int $left , int $top , string $text ):resource | Creates a new button. 
newt_centered_window ( $width , $height [, string $title ] ):int | Open a centered window of the specified size.
newt_checkbox_get_value ( resource $checkbox ):string | This function returns the character in the sequence which indicates the current value of the checkbox. 
newt_checkbox_set_flags ( resource $checkbox , int $flags , int $sense ):void | This function allows to set various flags on checkbox resource. 
newt_checkbox_set_value ( resource $checkbox , string $value ):void | This function allows to set the current value of the checkbox resource. 
newt_checkbox_tree_add_item ( resource $checkboxtree , string $text , mixed $data , int $flags , int $index [, int $... ] ):void | This function allows to add new item to the checkbox tree. 
newt_checkbox_tree_find_item ( resource $checkboxtree , mixed $data ):array | Finds an item in the checkbox tree by item's data. 
newt_checkbox_tree_get_current ( resource $checkboxtree ):mixed | This method returns checkbox tree selected tem. 
newt_checkbox_tree_get_entry_value ( resource $checkboxtree , mixed $data ):string
newt_checkbox_tree_get_multi_selection ( resource $checkboxtree , string $seqnum ):array
newt_checkbox_tree_get_selection ( resource $checkboxtree ):array
newt_checkbox_tree_multi ( int $left , int $top , int $height , string $seq [, int $flags ] ):resource
newt_checkbox_tree_set_current ( resource $checkboxtree , mixed $data ):void
newt_checkbox_tree_set_entry_value ( resource $checkboxtree , mixed $data , string $value ):void
newt_checkbox_tree_set_entry ( resource $checkboxtree , mixed $data , string $text ):void
newt_checkbox_tree_set_width ( resource $checkbox_tree , int $width ):void
newt_checkbox_tree ( int $left , int $top , int $height [, int $flags ] ):resource
newt_checkbox ( int $left , int $top , string $text , string $def_value [, string $seq ] ):resource
newt_clear_key_buffer ( ):void | Discards the contents of the terminal's input buffer without waiting for additional input. 
newt_cls ( ):void
newt_compact_button ( int $left , int $top , string $text ):resource
newt_component_add_callback ( resource $component , mixed $func_name , mixed $data ):void
newt_component_takes_focus ( resource $component , bool $takes_focus ):void
newt_create_grid ( int $cols , int $rows ):resource
newt_cursor_off ( ):void
newt_cursor_on ( ):void
newt_delay ( int $microseconds ):void
newt_draw_form ( resource $form ):void
newt_draw_root_text ( int $left , int $top , string $text ):void | Displays the string text at the position indicated.
newt_entry_get_value ( resource $entry ):string
newt_entry_set_filter ( resource $entry , callable $filter , mixed $data ):void
newt_entry_set_flags ( resource $entry , int $flags , int $sense ):void
newt_entry_set ( resource $entry , string $value [, bool $cursor_at_end ] ):void
newt_entry ( int $left , int $top , int $width [, string $init_value [, int $flags ]] ):resource
newt_finished ( void ):int | Uninitializes newt interface. This function be called, when program is ready to exit. 
newt_form_add_component ( resource $form , resource $component ):void | Adds a single component to the form. 
newt_form_add_components ( resource $form , array $components ):void | Adds several components to the form. 
newt_form_add_hot_key ( resource $form , int $key ):void
newt_form_destroy ( resource $form ):void | This function frees the memory resources used by the form and all of the components which have been added to the form.
newt_form_get_current ( $form ):resource
newt_form_run ( resource $form , array &$exit_struct ):void | This function runs the form passed to it. 
newt_form_set_background ( resource $from , int $background ):void
newt_form_set_height ( resource $form , int $height ):void
newt_form_set_size ( resource $form ):void
newt_form_set_timer ( resource $form , int $milliseconds ):void
newt_form_set_width ( resource $form , int $width ):void
newt_form_watch_fd ( resource $form , resource $stream [, int $flags ] ):void
newt_form ([ $vert_bar [, string $help [, int $flags ]]] ):resource | Create a new form. 
newt_get_screen_size ( int &$cols , int &$rows ):void | Fills in the passed references with the current size of the terminal. 
newt_grid_add_components_to_form ( resource $grid , resource $form , bool $recurse ):void
newt_grid_basic_window ( $text , $middle , $buttons ):resource
newt_grid_free ( resource $grid , bool $recurse ):void
newt_grid_get_size ( resouce $grid , int &$width , int &$height ):void
newt_grid_h_close_stacked ( int $element1_type , $element1 [, int $... [, $... ]] ):resource
newt_grid_h_stacked ( int $element1_type , $element1 [, int $... [, $... ]] ):resource
newt_grid_place ( resource $grid , int $left , int $top ):void
newt_grid_set_field ( resource $grid , int $col , int $row , int $type , resource $val , int $pad_left , int $pad_top , int $pad_right , int $pad_bottom , int $anchor [, int $flags ] ):void
newt_grid_simple_window ( $text , $middle , $buttons ):resource
newt_grid_v_close_stacked ( int $element1_type , $element1 [, int $... [, $... ]] ):resource
newt_grid_v_stacked ( int $element1_type , $element1 [, int $... [, $... ]] ):resource
newt_grid_wrapped_window_at ( resource $grid , string $title , int $left , int $top ):void
newt_grid_wrapped_window ( resource $grid , string $title ):void
newt_init ( void ):int | Initializes the newt interface. This function must be called before any other newt function. 
newt_label_set_text ( resource $label , string $text ):void
newt_label ( int $left , int $top , string $text ):resource
newt_listbox_append_entry ( resource $listbox , string $text , mixed $data ):void
newt_listbox_clear_selection ( resource $listbox ):void
newt_listbox_clear ( resource $listobx ):void
newt_listbox_delete_entry ( resource $listbox , mixed $key ):void
newt_listbox_get_current ( resource $listbox ):string
newt_listbox_get_selection ( resource $listbox ):array
newt_listbox_insert_entry ( resource $listbox , string $text , mixed $data , mixed $key ):void
newt_listbox_item_count ( resource $listbox ):int
newt_listbox_select_item ( resource $listbox , mixed $key , int $sense ):void
newt_listbox_set_current_by_key ( resource $listbox , mixed $key ):void
newt_listbox_set_current ( resource $listbox , int $num ):void
newt_listbox_set_data ( resource $listbox , int $num , mixed $data ):void
newt_listbox_set_entry ( resource $listbox , int $num , string $text ):void
newt_listbox_set_width ( resource $listbox , int $width ):void
newt_listbox ( int $left , int $top , int $height [, int $flags ] ):resource
newt_listitem_get_data ( resource $item ):mixed
newt_listitem_set ( resource $item , string $text ):void
newt_listitem ( int $left , int $top , string $text , bool $is_default , resouce $prev_item , mixed $data [, int $flags ] ):resource
newt_open_window ( $left , $top , $width , $height [, string $title ] ):int | Open a window of the specified size and position. 
newt_pop_help_line ( ):void
newt_pop_window ( ):void | Removes the top window from the display, and redraws the display areas which the window overwrote.
newt_push_help_line ([ string $text ] ):void | Saves the current help line on a stack, and displays the new line. 
newt_radio_get_current ( $set_member ):resource
newt_radiobutton ( int $left , int $top , string $text , bool $is_default [, $prev_button ] ):resource
newt_redraw_help_line ( ):void
newt_reflow_text ( $text , int $width , int $flex_down , int $flex_up , int &$actual_width , int &$actual_height ):string
newt_refresh ( ):void | To increase performance, newt only updates the display when it needs to, not when the program tells it to write to the terminal. Applications can force newt to immediately update modified portions of the screen by calling this function. 
newt_resize_screen ([ bool $redraw ] ):void
newt_resume ( ):void | Resume using the newt interface after calling newt_suspend(). 
newt_run_form ( $form ):resource | This function runs the form passed to it. 
newt_scale_set ( resource $scale , int $amount ):void
newt_scale ( int $left , int $top , int $width , int $full_value ):resource
newt_scrollbar_set ( resource $scrollbar , int $where , int $total ):void
newt_set_help_callback ( mixed $function ):void
newt_set_suspend_callback ( callable $function , mixed $data ):void | Set a callback function which gets invoked when user presses the suspend key (normally ^Z). If no suspend callback is registered, the suspend keystroke is ignored. 
newt_suspend ( ):void | Tells newt to return the terminal to its initial state. Once this is done, the application can suspend itself (by sending itself a SIGTSTP, fork a child program, or do whatever else it likes). 
newt_textbox_get_num_lines ( resource $textbox ):int
newt_textbox_reflowed ( int $left , int $top , char $*text , int $width , int $flex_down , int $flex_up [, int $flags ] ):resource
newt_textbox_set_height ( resource $textbox , int $height ):void
newt_textbox_set_text ( resource $textbox , string $text ):void
newt_textbox ( int $left , int $top , int $width , int $height [, int $flags ] ):resource
newt_vertical_scrollbar ( int $left , int $top , int $height [, int $normal_colorset [, int $thumb_colorset ]] ):resource
newt_wait_for_key ( ):void | This function doesn't return until a key has been pressed. The keystroke is then ignored. If a key is already in the terminal's buffer, this function discards a keystroke and returns immediately. 
newt_win_choice ( string $title , string $button1_text , string $button2_text , string $format [, mixed $args [, mixed $... ]] ):int
newt_win_entries ( string $title , string $text , $suggested_width , $flex_down , $flex_up , $data_width , array &$items , string $button1 [, string $... ] ):int
newt_win_menu ( string $title , string $text , $suggestedWidth , $flexDown , $flexUp , $maxListHeight , array $items , &$listItem [, string $button1 [, string $... ]] ):int
newt_win_message ( string $title , string $button_text , string $format [, mixed $args [, mixed $... ]] ):void
newt_win_messagev ( string $title , string $button_text , string $format , array $args ):void
newt_win_ternary ( string $title , string $button1_text , string $button2_text , string $button3_text , string $format [, mixed $args [, mixed $... ]] ):int
yp_all ( string $domain , string $map , string $callback ):void |  Traverse the map and call a function on each entry
yp_cat ( string $domain , string $map ):array | Returns all map entries. 
yp_err_( int $errorcode ):string | Returns the error message associated with the given error code. Useful to indicate what exactly went wrong. 
yp_errno ( void ):int | Returns the error code of the previous operation. 
yp_first ( string $domain , string $map ):array | Gets the first key-value pair from the named map in the named domain. 
yp_get_default_domain ( void ):string |  Returns the domain or false
yp_master ( $domain , $map ):string | Returns the machine name of the master NIS server for a map. 
yp_match ( $domain , $map , $key ):string | Returns the value associated with the passed key out of the specified map. 
yp_next ( string $domain , string $map , string $key ):array | Returns the next key-value pair in the named map after the specified key. 
yp_order ( string $domain , string $map ):int | Gets the order number for a map. 
oauth_get_sbs ( $http_method , $uri [, array $request_parameters ] ):string | Generates a Signature Base String according to pecl/oauth. 
oauth_urlencode ( $uri ):string | Encodes a URI to ۠RFC 3986. 
openal_buffer_create ( void ):resource
openal_buffer_data ( resource $buffer , int $format , string $data , int $freq ):bool
openal_buffer_destroy ( resource $buffer ):bool
openal_buffer_get ( resource $buffer , $property ):int
openal_buffer_loadwav ( resource $buffer , string $wavfile ):bool
openal_context_create ( $device ):resource
openal_context_current ( resource $context ):bool
openal_context_destroy ( resource $context ):bool
openal_context_process ( resource $context ):bool
openal_context_suspend ( resource $context ):bool
openal_device_close ( resource $device ):bool
openal_device_open ([ string $device_desc ] ):resource
openal_listener_get ( int $property ):mixed
openal_listener_set ( int $property , mixed $setting ):bool
openal_source_create ( void ):resource
openal_source_destroy ( resource $source ):bool
openal_source_get ( resource $source , int $property ):mixed
openal_source_pause ( resource $source ):bool
openal_source_play ( resource $source ):bool
openal_source_rewind ( resource $source ):bool
openal_source_set ( resource $source , int $property , mixed $setting ):bool
openal_source_stop ( resource $source ):bool
openal_stream ( $source , int $format , int $rate ):resource
px_close ( resource $pxdoc ):bool | Closes the paradox database. This function will not close the file. You will have to call fclose() afterwards. 
px_create_fp ( resource $pxdoc , resource $file , array $fielddesc ):bool
px_date2( resource $pxdoc , int $value , $format ):string | Turns a date as it stored in the paradox file into human readable format. Paradox dates are the number of days since 1.1.0000.
px_delete_record ( resource $pxdoc , int $num ):bool
px_delete ( resource $pxdoc ):bool | Deletes the resource of the paradox file and frees all memory. 
px_get_field ( resource $pxdoc , int $fieldno ):array
px_get_info ( resource $pxdoc ):array
px_get_parameter ( resource $pxdoc , $name ):string | Gets various parameters. 
px_get_record ( resource $pxdoc , int $num [, int $mode = 0 ] ):array
px_get_schema ( resource $pxdoc [, int $mode = 0 ] ):array | returns the database schema. 
px_get_value ( resource $pxdoc , string $name ):float | Gets various values. 
px_insert_record ( resource $pxdoc , array $data ):int
px_new ( void ):resource | Create a new paradox object. You will have to call this function before any further functions. px_new() does not create any file on the disk, it just creates an instance of a paradox object. This function must not be called if the object oriented interface is used. Use new paradox_db() instead. 
px_numfields ( resource $pxdoc ):int | Get the number of fields in a database file. 
px_numrecords ( resource $pxdoc ):int | Get the number of records in a database file. 
px_open_fp ( resource $pxdoc , resource $file ):bool | Open an existing paradox database file. The actual file has to be opened before with fopen(). This function can also be used to open primary index files and tread them like a paradox database.
px_put_record ( resource $pxdoc , array $record [, int $recpos = -1 ] ):bool | Stores a record into a paradox database. The record is always added at the end of the database, regardless of any free slots. Use px_insert_record() to add a new record into the first free slot found in the database. 
px_retrieve_record ( resource $pxdoc , int $num [, int $mode = 0 ] ):array
px_set_blob_file ( resource $pxdoc , string $filename ):bool
px_set_parameter ( resource $pxdoc , string $name , string $value ):bool | Sets various parameters. 
px_set_tablename(->) px_set_tablename ( resource $pxdoc , string $name ):void | Sets the table name of a paradox database, which was created with px_create_fp(). This function is deprecated use px_set_parameter() instead. 
px_set_targetencoding(->) px_set_targetencoding ( resource $pxdoc , string $encoding ):bool
px_set_value ( resource $pxdoc , string $name , float $value ):bool | Sets various values. 
px_timestamp2( resource $pxdoc , float $value , $format ):string | Turns a timestamp as it stored in the paradox file into human readable format. Paradox timestamps are the number of miliseconds since 0001-01-02.
px_update_record ( resource $pxdoc , array $data , int $num ):bool
parsekit_compile_file ( string $filename [, &$errors [, int $options = PARSEKIT_QUIET ]] ):array
parsekit_compile_string ( string $phpcode [, &$errors [, int $options = PARSEKIT_QUIET ]] ):array
parsekit_func_arginfo ( mixed $function ):array
PDF_activate_item ( resource $pdfdoc , int $id ):bool | Activates a previously created structure element or other content item. Returns TRUE on success or FALSE on failure. 
PDF_add_annotation(->) function is deprecated, use PDF_create_annotation() with type=Text instead. :This
PDF_add_bookmark(->) function is deprecated since PDFlib version 6, use PDF_create_bookmark() instead. :This
PDF_add_launchlink(->) PDF_add_launchlink ( resource $pdfdoc , float $llx , float $lly , float $urx , float $ury , string $filename ):bool
PDF_add_locallink(->) PDF_add_locallink ( resource $pdfdoc , float $lowerleftx , float $lowerlefty , float $upperrightx , float $upperrighty , int $page , string $dest ):bool
PDF_add_nameddest ( resource $pdfdoc , string $name , string $optlist ):bool | Creates a named destination on an arbitrary page in the current document. Returns TRUE on success or FALSE on failure. 
PDF_add_note(->) PDF_add_note ( resource $pdfdoc , float $llx , float $lly , float $urx , float $ury , string $contents , string $title , string $icon , int $open ):bool
PDF_add_outline(->) function is deprecated, use PDF_create_bookmark() instead. :This
PDF_add_pdflink(->) PDF_add_pdflink ( resource $pdfdoc , float $bottom_left_x , float $bottom_left_y , float $up_right_x , float $up_right_y , string $filename , int $page , string $dest ):bool
PDF_add_table_cell ( resource $pdfdoc , $table , $column , $row , string $text , string $optlist ):int | Adds a cell to a new or existing table. 
PDF_add_textflow ( resource $pdfdoc , $textflow , string $text , string $optlist ):int | Creates a Textflow object, or adds text and explicit options to an existing Textflow. 
PDF_add_thumbnail ( resource $pdfdoc , int $image ):bool | Adds an existing image as thumbnail for the current page. Returns TRUE on success or FALSE on failure. 
PDF_add_weblink(->) PDF_add_weblink ( resource $pdfdoc , float $lowerleftx , float $lowerlefty , float $upperrightx , float $upperrighty , string $url ):bool
PDF_arc ( resource $p , float $x , float $y , float $r , float $alpha , float $beta ):bool | Adds a counterclockwise circular arc. 
PDF_arcn ( resource $p , float $x , float $y , float $r , float $alpha , float $beta ):bool | Except for the drawing direction, this function behaves exactly like PDF_arc(). 
PDF_attach_file(->) PDF_attach_file ( resource $pdfdoc , float $llx , float $lly , float $urx , float $ury , string $filename , string $description , string $author , string $mimetype , string $icon ):bool
PDF_begin_document ( resource $pdfdoc , string $filename , string $optlist ):int | Creates a new PDF file subject to various options. 
PDF_begin_font ( resource $pdfdoc , string $filename , float $a , float $b , float $c , float $d , float $e , float $f , string $optlist ):bool | Starts a Type 3 font definition. 
PDF_begin_glyph ( resource $pdfdoc , string $glyphname , float $wx , float $llx , float $lly , float $urx , float $ury ):bool | Starts a glyph definition for a Type 3 font. 
PDF_begin_item ( resource $pdfdoc , string $tag , string $optlist ):int | Opens a structure element or other content item with attributes supplied as options. 
PDF_begin_layer ( resource $pdfdoc , int $layer ):bool
PDF_begin_page_ext ( resource $pdfdoc , float $width , float $height , string $optlist ):bool
PDF_begin_page(->) PDF_begin_page ( resource $pdfdoc , float $width , float $height ):bool
PDF_begin_pattern ( resource $pdfdoc , float $width , float $height , float $xstep , float $ystep , $painttype ):int | Starts a new pattern definition. 
PDF_begin_template_ext ( resource $pdfdoc , float $width , float $height , string $optlist ):int | Starts a new template definition. 
PDF_begin_template(->) PDF_begin_template ( resource $pdfdoc , float $width , float $height ):int
PDF_circle ( resource $pdfdoc , float $x , float $y , float $r ):bool | Adds a circle. Returns TRUE on success or FALSE on failure. 
PDF_clip ( resource $p ):bool | Uses the current path as clipping path, and terminate the path. Returns TRUE on success or FALSE on failure. 
PDF_close_image ( resource $p , int $image ):bool | Closes an image retrieved with the PDF_open_image() function. 
PDF_close_pdi_page ( resource $p , int $page ):bool | Closes the page handle, and frees all page-related resources. Returns TRUE on success or FALSE on failure. 
PDF_close_pdi(->) PDF_close_pdi ( resource $p , int $doc ):bool
PDF_close(->) PDF_close ( resource $p ):bool
PDF_closepath_fill_stroke ( resource $p ):bool | Closes the path, fills, and strokes it. Returns TRUE on success or FALSE on failure. 
PDF_closepath_stroke ( resource $p ):bool | Closes the path, and strokes it. Returns TRUE on success or FALSE on failure. 
PDF_closepath ( resource $p ):bool | Closes the current path. Returns TRUE on success or FALSE on failure. 
PDF_concat ( resource $p , float $a , float $b , float $c , float $d , float $e , float $f ):bool | Concatenates a matrix to the current transformation matrix (CTM). Returns TRUE on success or FALSE on failure. 
PDF_continue_text ( resource $p , string $text ):bool | Prints text at the next line. Returns TRUE on success or FALSE on failure. 
PDF_create_3dview ( resource $pdfdoc , string $username , string $optlist ):int
PDF_create_action ( resource $pdfdoc , string $type , string $optlist ):int | Creates an action which can be applied to various objects and events. 
PDF_create_annotation ( resource $pdfdoc , float $llx , float $lly , float $urx , float $ury , string $type , string $optlist ):bool | Creates a rectangular annotation on the current page. 
PDF_create_bookmark ( resource $pdfdoc , string $text , string $optlist ):int | Creates a bookmark subject to various options. 
PDF_create_field ( resource $pdfdoc , float $llx , float $lly , float $urx , float $ury , string $name , string $type , string $optlist ):bool | Creates a form field on the current page subject to various options. 
PDF_create_fieldgroup ( resource $pdfdoc , string $name , string $optlist ):bool | Creates a form field group subject to various options. 
PDF_create_gstate ( resource $pdfdoc , string $optlist ):int | Creates a graphics state object subject to various options. 
PDF_create_pvf ( resource $pdfdoc , string $filename , string $data , string $optlist ):bool | Creates a named virtual read-only file from data provided in memory. 
PDF_create_textflow ( resource $pdfdoc , string $text , string $optlist ):int | Preprocesses text for later formatting and creates a textflow object. 
PDF_curveto ( resource $p , float $x1 , float $y1 , float $x2 , float $y2 , float $x3 , float $y3 ):bool | Draws a Bezier curve from the current point, using 3 more control points. Returns TRUE on success or FALSE on failure. 
PDF_define_layer ( resource $pdfdoc , string $name , string $optlist ):int
PDF_delete_pvf ( resource $pdfdoc , string $filename ):int | Deletes a named virtual file and frees its data structures (but not the contents). 
PDF_delete_table ( resource $pdfdoc , int $table , string $optlist ):bool | Deletes a table and all associated data structures. 
PDF_delete_textflow ( resource $pdfdoc , int $textflow ):bool | Deletes a textflow and the associated data structures. 
PDF_delete ( resource $pdfdoc ):bool | Deletes a PDFlib object, and frees all internal resources. Returns TRUE on success or FALSE on failure. 
PDF_encoding_set_char ( resource $pdfdoc , string $encoding , int $slot , string $glyphname , int $uv ):bool | Adds a glyph name and/or Unicode value to a custom encoding. 
PDF_end_document ( resource $pdfdoc , string $optlist ):bool | Closes the generated PDF file and applies various options. 
PDF_end_font ( resource $pdfdoc ):bool | Terminates a Type 3 font definition. 
PDF_end_glyph ( resource $pdfdoc ):bool | Terminates a glyph definition for a Type 3 font. 
PDF_end_item ( resource $pdfdoc , int $id ):bool | Closes a structure element or other content item. 
PDF_end_layer ( resource $pdfdoc ):bool
PDF_end_page_ext ( resource $pdfdoc , string $optlist ):bool | Finishes a page, and applies various options. Returns TRUE on success or FALSE on failure. 
PDF_end_page ( resource $p ):bool | Finishes the page. Returns TRUE on success or FALSE on failure. 
PDF_end_pattern ( resource $p ):bool | Finishes the pattern definition. Returns TRUE on success or FALSE on failure. 
PDF_end_template ( resource $p ):bool | Finishes a template definition. Returns TRUE on success or FALSE on failure. 
PDF_endpath ( resource $p ):bool | Ends the current path without filling or stroking it. 
PDF_fill_imageblock ( resource $pdfdoc , $page , string $blockname , $image , string $optlist ):int
PDF_fill_pdfblock ( resource $pdfdoc , $page , string $blockname , $contents , string $optlist ):int
PDF_fill_stroke ( resource $p ):bool | Fills and strokes the current path with the current fill and stroke color. Returns TRUE on success or FALSE on failure. 
PDF_fill_textblock ( resource $pdfdoc , $page , string $blockname , string $text , string $optlist ):int
PDF_fill ( resource $p ):bool | Fills the interior of the current path with the current fill color. Returns TRUE on success or FALSE on failure. 
PDF_findfont(->) PDF_findfont ( resource $p , string $fontname , string $encoding , $embed ):int
PDF_fit_image ( resource $pdfdoc , int $image , float $x , float $y , string $optlist ):bool | Places an image or template on the page, subject to various options. Returns TRUE on success or FALSE on failure. 
PDF_fit_pdi_page ( resource $pdfdoc , int $page , float $x , float $y , string $optlist ):bool | Places an imported PDF page on the page, subject to various options. Returns TRUE on success or FALSE on failure. 
PDF_fit_table ( resource $pdfdoc , int $table , float $llx , float $lly , float $urx , float $ury , $optlist ):string | Places a table on the page fully or partially. 
PDF_fit_textflow ( resource $pdfdoc , int $textflow , float $llx , float $lly , float $urx , float $ury , $optlist ):string | Formats the next portion of a textflow into a rectangular area. 
PDF_fit_textline ( resource $pdfdoc , string $text , float $x , float $y , string $optlist ):bool | Places a single line of text on the page, subject to various options. Returns TRUE on success or FALSE on failure. 
PDF_get_apiname ( resource $pdfdoc ):string | Gets the name of the API function which threw the last exception or failed. 
PDF_get_buffer ( resource $p ):string | Fetches the buffer containing the generated PDF data. 
PDF_get_errmsg ( resource $pdfdoc ):string | Gets the text of the last thrown exception or the reason for a failed function call. 
PDF_get_errnum ( resource $pdfdoc ):int | Gets the number of the last thrown exception or the reason for a failed function call. 
PDF_get_font(->) function is deprecated since PDFlib version 3, use PDF_get_value() with the parameter font instead. :This
PDF_get_fontname(->) function is deprecated since PDFlib version 3, use PDF_get_parameter() with the parameter fontname instead. :This
PDF_get_fontsize(->) function is deprecated since PDFlib version 3, use PDF_get_value() with the parameter fontsizeinstead. :This
PDF_get_image_height(->) function is deprecated since PDFlib version 3, use PDF_get_value() with the parameter imageheight instead. :This
PDF_get_image_width(->) function is deprecated since PDFlib version 3, use PDF_get_value() with the parameter imagewidth instead. :This
PDF_get_majorversion(->) PDF_get_majorversion ( void ):int | This function is deprecated since PDFlib version 5, use PDF_get_value() with the parameter major instead. 
PDF_get_minorversion(->) PDF_get_minorversion ( void ):int
PDF_get_parameter ( resource $p , $key , float $modifier ):string | Gets the contents of some PDFlib parameter with string type. 
PDF_get_pdi_parameter(->) PDF_get_pdi_parameter ( resource $p , $key , int $doc , int $page , int $reserved ):string
PDF_get_pdi_value(->) PDF_get_pdi_value ( resource $p , string $key , int $doc , int $page , int $reserved ):float
PDF_get_value ( resource $p , string $key , $modifier ):float | Gets the value of some PDFlib parameter with numerical type. 
PDF_info_font ( resource $pdfdoc , int $font , string $keyword , string $optlist ):float | Queries detailed information about a loaded font. 
PDF_info_matchbox ( resource $pdfdoc , string $boxname , int $num , string $keyword ):float | Queries information about a matchbox on the current page. 
PDF_info_table ( resource $pdfdoc , int $table , string $keyword ):float | Retrieves table information related to the most recently placed table instance. 
PDF_info_textflow ( resource $pdfdoc , int $textflow , string $keyword ):float | Queries the current state of a textflow. 
PDF_info_textline ( resource $pdfdoc , string $text , string $keyword , string $optlist ):float | Performs textline formatting and queries the resulting metrics. 
PDF_initgraphics ( resource $p ):bool | Reset all color and graphics state parameters to their defaults. Returns TRUE on success or FALSE on failure. 
PDF_lineto ( resource $p , float $x , float $y ):bool | Draws a line from the current point to another point. Returns TRUE on success or FALSE on failure. 
PDF_load_3ddata ( resource $pdfdoc , string $filename , string $optlist ):int
PDF_load_font ( resource $pdfdoc , string $fontname , string $encoding , string $optlist ):int | Searches for a font and prepares it for later use. 
PDF_load_iccprofile ( resource $pdfdoc , string $profilename , string $optlist ):int | Searches for an ICC profile, and prepares it for later use. 
PDF_load_image ( resource $pdfdoc , string $imagetype , string $filename , string $optlist ):int | Opens a disk-based or virtual image file subject to various options. 
PDF_makespotcolor ( resource $p , string $spotname ):int | Finds a built-in spot color name, or makes a named spot color from the current fill color. Returns TRUE on success or FALSE on failure. 
PDF_moveto ( resource $p , float $x , float $y ):bool | Sets the current point for graphics output. Returns TRUE on success or FALSE on failure. 
PDF_new ( void ):resource | Creates a new PDFlib object with default settings. 
PDF_open_ccitt(->) PDF_open_ccitt ( resource $pdfdoc , string $filename , $width , $height , $BitReverse , $k , $Blackls1 ):int
PDF_open_file(->) PDF_open_file ( resource $p , string $filename ):bool
PDF_open_gif(->) function is deprecated since PDFlib version 3, use PDF_load_image() instead. :This
PDF_open_image_file(->) PDF_open_image_file ( resource $p , string $imagetype , string $filename , string $stringparam , $intparam ):int
PDF_open_image(->) PDF_open_image ( resource $p , string $imagetype , string $source , string $data , $length , $width , $height , $components , $bpc , string $params ):int
PDF_open_jpeg(->) function is deprecated since PDFlib version 3, use PDF_load_image() instead. :This
PDF_open_memory_image ( resource $p , resource $image ):int | This function is not supported by PDFlib GmbH. 
PDF_open_pdi_document ( resource $p , string $filename , string $optlist ):int | Open a disk-based or virtual PDF document and prepare it for later use. 
PDF_open_pdi_page ( resource $p , $doc , $pagenumber , string $optlist ):int | Prepares a page for later use with PDF_fit_pdi_page(). 
PDF_open_pdi(->) PDF_open_pdi ( resource $pdfdoc , string $filename , string $optlist , $len ):int
PDF_open_tiff(->) function is deprecated since PDFlib version 3, use PDF_load_image() instead. :This
PDF_pcos_get_number ( resource $p , int $doc , string $path ):float | Gets the value of a pCOS path with type number or boolean. 
PDF_pcos_get_stream ( resource $p , int $doc , $optlist , $path ):string | Gets the contents of a pCOS path with type stream, fstream, or string. 
PDF_pcos_get_( resource $p , int $doc , $path ):string | Gets the value of a pCOS path with type name, string, or boolean. 
PDF_place_image(->) PDF_place_image ( resource $pdfdoc , int $image , float $x , float $y , float $scale ):bool
PDF_place_pdi_page(->) PDF_place_pdi_page ( resource $pdfdoc , int $page , float $x , float $y , float $sx , float $sy ):bool
PDF_process_pdi ( resource $pdfdoc , $doc , $page , string $optlist ):int | Processes certain elements of an imported PDF document. 
PDF_rect ( resource $p , float $x , float $y , float $width , float $height ):bool | Draws a rectangle. Returns TRUE on success or FALSE on failure. 
PDF_restore ( resource $p ):bool | Restores the most recently saved graphics state. Returns TRUE on success or FALSE on failure. 
PDF_resume_page ( resource $pdfdoc , string $optlist ):bool | Resumes a page to add more content to it. 
PDF_rotate ( resource $p , float $phi ):bool | Rotates the coordinate system. Returns TRUE on success or FALSE on failure. 
PDF_save ( resource $p ):bool | Saves the current graphics state. Returns TRUE on success or FALSE on failure. 
PDF_scale ( resource $p , float $sx , float $sy ):bool | Scales the coordinate system. Returns TRUE on success or FALSE on failure. 
PDF_set_border_color(->) PDF_set_border_color ( resource $p , float $red , float $green , float $blue ):bool
PDF_set_border_dash(->) PDF_set_border_dash ( resource $pdfdoc , float $black , float $white ):bool
PDF_set_border_style(->) PDF_set_border_style ( resource $pdfdoc , string $style , float $width ):bool
PDF_set_char_spacing(->) function is deprecated since PDFlib version 3, use PDF_set_value() with parameter charspacing instead. :This
PDF_set_duration(->) function is deprecated since PDFlib version 3, use the duration option in PDF_begin_page_ext() or PDF_end_page_ext() instead. :This
PDF_set_gstate ( resource $pdfdoc , int $gstate ):bool | Activates a graphics state object. 
PDF_set_horiz_scaling(->) function is deprecated since PDFlib version 3, use PDF_set_value() with parameter horizscaling instead. :This
PDF_set_info_author(->) function is deprecated since PDFlib version 3, use PDF_set_info() instead. :This
PDF_set_info_creator(->) function is deprecated since PDFlib version 3, use PDF_set_info() instead. :This
PDF_set_info_keywords(->) function is deprecated since PDFlib version 3, use PDF_set_info() instead. :This
PDF_set_info_subject(->) function is deprecated since PDFlib version 3, use PDF_set_info() instead. :This
PDF_set_info_title(->) function is deprecated since PDFlib version 3, use PDF_set_info() instead. :This
PDF_set_info ( resource $p , string $key , string $value ):bool | Fill document information field key with value. Returns TRUE on success or FALSE on failure. 
PDF_set_layer_dependency ( resource $pdfdoc , string $type , string $optlist ):bool
PDF_set_leading(->) function is deprecated since PDFlib version 3, use PDF_set_value() with the parameter leading instead. :This
PDF_set_parameter ( resource $p , string $key , string $value ):bool | Sets some PDFlib parameter with string type. Returns TRUE on success or FALSE on failure. 
PDF_set_text_matrix(->) function is deprecated since PDFlib version 3, use PDF_scale(), PDF_translate(), PDF_rotate(), or PDF_skew() instead. :This
PDF_set_text_pos ( resource $p , float $x , float $y ):bool | Sets the position for text output on the page. Returns TRUE on success or FALSE on failure. 
PDF_set_text_rendering(->) function is deprecated since PDFlib version 3, use PDF_set_value() with the textrendering parameter instead. :This
PDF_set_text_rise(->) function is deprecated since PDFlib version 3, use PDF_set_value() with the textrise parameter instead. :This
PDF_set_value ( resource $p , string $key , float $value ):bool | Sets the value of some PDFlib parameter with numerical type. Returns TRUE on success or FALSE on failure. 
PDF_set_word_spacing(->) function is deprecated since PDFlib version 3, use PDF_set_value() with the wordspacing parameter instead. :This
PDF_setcolor ( resource $p , string $fstype , string $colorspace , float $c1 , float $c2 , float $c3 , float $c4 ):bool | Sets the current color space and color. Returns TRUE on success or FALSE on failure. 
PDF_setdash ( resource $pdfdoc , float $b , float $w ):bool | Sets the current dash pattern to b black and w white units. Returns TRUE on success or FALSE on failure. 
PDF_setdashpattern ( resource $pdfdoc , string $optlist ):bool | Sets a dash pattern defined by an option list. Returns TRUE on success or FALSE on failure. 
PDF_setflat ( resource $pdfdoc , float $flatness ):bool | Sets the flatness parameter. Returns TRUE on success or FALSE on failure. 
PDF_setfont ( resource $pdfdoc , int $font , float $fontsize ):bool | Sets the current font in the specified fontsize, using a font handle returned by PDF_load_font(). Returns TRUE on success or FALSE on failure. 
PDF_setgray_fill(->) PDF_setgray_fill ( resource $p , float $g ):bool
PDF_setgray_stroke(->) PDF_setgray_stroke ( resource $p , float $g ):bool
PDF_setgray(->) PDF_setgray ( resource $p , float $g ):bool
PDF_setlinecap ( resource $p , int $linecap ):bool | Sets the linecap parameter to control the shape at the end of a path with respect to stroking. 
PDF_setlinejoin ( resource $p , int $value ):bool | Sets the linejoin parameter to specify the shape at the corners of paths that are stroked. Returns TRUE on success or FALSE on failure. 
PDF_setlinewidth ( resource $p , float $width ):bool | Sets the current line width. Returns TRUE on success or FALSE on failure. 
PDF_setmatrix ( resource $p , float $a , float $b , float $c , float $d , float $e , float $f ):bool | Explicitly sets the current transformation matrix. Returns TRUE on success or FALSE on failure. 
PDF_setmiterlimit ( resource $pdfdoc , float $miter ):bool | Sets the miter limit.Returns TRUE on success or FALSE on failure. 
PDF_setpolydash(->) function is deprecated since PDFlib version 5, use PDF_setdashpattern() instead. :This
PDF_setrgbcolor_fill(->) PDF_setrgbcolor_fill ( resource $p , float $red , float $green , float $blue ):bool
PDF_setrgbcolor_stroke(->) PDF_setrgbcolor_stroke ( resource $p , float $red , float $green , float $blue ):bool
PDF_setrgbcolor(->) PDF_setrgbcolor ( resource $p , float $red , float $green , float $blue ):bool
PDF_shading_pattern ( resource $pdfdoc , $shading , string $optlist ):int
PDF_shading ( resource $pdfdoc , string $shtype , float $x0 , float $y0 , float $x1 , float $y1 , float $c1 , float $c2 , float $c3 , float $c4 , string $optlist ):int
PDF_shfill ( resource $pdfdoc , int $shading ):bool
PDF_show_boxed(->) PDF_show_boxed ( resource $p , string $text , float $left , float $top , float $width , float $height , string $mode , string $feature ):int | This function is deprecated since PDFlib version 6, use PDF_fit_textline() for single lines, or the PDF_*_textflow() functions for multi-line formatting instead. 
PDF_show_xy ( resource $p , string $text , float $x , float $y ):bool | Prints text in the current font. Returns TRUE on success or FALSE on failure. 
PDF_show ( resource $pdfdoc , string $text ):bool | Prints text in the current font and size at the current position. Returns TRUE on success or FALSE on failure. 
PDF_skew ( resource $p , float $alpha , float $beta ):bool | Skews the coordinate system in x and y direction by alpha and beta degrees, respectively. Returns TRUE on success or FALSE on failure. 
PDF_stringwidth ( resource $p , string $text , int $font , $fontsize ):float | Returns the width of text in an arbitrary font. 
PDF_stroke ( resource $p ):bool | Strokes the path with the current color and line width, and clear it. Returns TRUE on success or FALSE on failure. 
PDF_suspend_page ( resource $pdfdoc , string $optlist ):bool | Suspends the current page so that it can later be resumed with PDF_resume_page(). 
PDF_translate ( resource $p , float $tx , float $ty ):bool | Translates the origin of the coordinate system. 
PDF_utf16_to_utf8 ( resource $pdfdoc , $utf16):string | Converts a string from UTF-16 format to UTF-8. 
PDF_utf32_to_utf16 ( resource $pdfdoc , $utf32, $ordering ):string | Converts a string from UTF-32 format to UTF-16. 
PDF_utf8_to_utf16 ( resource $pdfdoc , $utf8, $ordering ):string | Converts a string from UTF-8 format to UTF-16. 
setproctitle ( string $title ):void | Sets the process title of the current process. 
setthreadtitle ( string $title ):bool | Sets the thread title. 
ps_add_bookmark ( resource $psdoc , string $text [, $parent = 0 [, $open = 0 ]] ):int
ps_add_launchlink ( resource $psdoc , float $llx , float $lly , float $urx , float $ury , string $filename ):bool
ps_add_locallink ( resource $psdoc , float $llx , float $lly , float $urx , float $ury , int $page , string $dest ):bool
ps_add_note ( resource $psdoc , float $llx , float $lly , float $urx , float $ury , string $contents , string $title , string $icon , int $open ):bool
ps_add_pdflink ( resource $psdoc , float $llx , float $lly , float $urx , float $ury , string $filename , int $page , string $dest ):bool
ps_add_weblink ( resource $psdoc , float $llx , float $lly , float $urx , float $ury , string $url ):bool
ps_arc ( resource $psdoc , float $x , float $y , float $radius , float $alpha , float $beta ):bool | Draws a portion of a circle with at middle point at (x, y). The arc starts at an angle of alpha and ends at an angle of beta. It is drawn counterclockwise (use ps_arcn() to draw clockwise). The subpath added to the current path starts on the arc at angle alpha and ends on the arc at angle beta. 
ps_arcn ( resource $psdoc , float $x , float $y , float $radius , float $alpha , float $beta ):bool | Draws a portion of a circle with at middle point at (x, y). The arc starts at an angle of alpha and ends at an angle of beta. It is drawn clockwise (use ps_arc() to draw counterclockwise). The subpath added to the current path starts on the arc at angle beta and ends on the arc at angle alpha. 
ps_begin_page ( resource $psdoc , float $width , float $height ):bool
ps_begin_pattern ( resource $psdoc , float $width , float $height , float $xstep , float $ystep , $painttype ):int | Starts a new pattern. A pattern is like a page containing e.g. a drawing which can be used for filling areas. It is used like a color by calling ps_setcolor() and setting the color space to pattern. 
ps_begin_template ( resource $psdoc , float $width , float $height ):int | Starts a new template. A template is called a form in the postscript language. It is created similar to a pattern but used like an image. Templates are often used for drawings which are placed several times through out the document, e.g. like a company logo. All drawing functions may be used within a template. The template will not be drawn until it is placed by ps_place_image(). 
ps_circle ( resource $psdoc , float $x , float $y , float $radius ):bool | Draws a circle with its middle point at (x, y). The circle starts and ends at position (x+radius, y). If this function is called outside a path it will start a new path. If it is called within a path it will add the circle as a subpath. If the last drawing operation does not end in point (x+radius, y) then there will be a gap in the path. 
ps_clip ( resource $psdoc ):bool | Takes the current path and uses it to define the border of a clipping area. Everything drawn outside of that area will not be visible. 
ps_close_image ( resource $psdoc , int $imageid ):void | Closes an image and frees its resources. Once an image is closed it cannot be used anymore. 
ps_close ( resource $psdoc ):bool
ps_closepath_stroke ( resource $psdoc ):bool | Connects the last point with first point of a path and draws the resulting closed line. 
ps_closepath ( resource $psdoc ):bool | Connects the last point with the first point of a path. The resulting path can be used for stroking, filling, clipping, etc.. 
ps_continue_text ( resource $psdoc , string $text ):bool | Output a text one line below the last line. The line spacing is taken from the value "leading" which must be set with ps_set_value(). The actual position of the text is determined by the values "textx" and "texty" which can be requested with ps_get_value() 
ps_curveto ( resource $psdoc , float $x1 , float $y1 , float $x2 , float $y2 , float $x3 , float $y3 ):bool | Add a section of a cubic Bezier curve described by the three given control points to the current path. 
ps_delete ( resource $psdoc ):bool | Mainly frees memory used by the document. Also closes a file, if it was not closed before with ps_close(). You should in any case close the file with ps_close() before, because ps_close() not just closes the file but also outputs a trailor containing PostScript comments like the number of pages in the document and adding the bookmark hierarchy. 
ps_end_page ( resource $psdoc ):bool | Ends a page which was started with ps_begin_page(). Ending a page will leave the current drawing context, which e.g. requires to reload fonts if they were loading within the page, and to set many other drawing parameters like the line width, or color.. 
ps_end_pattern ( resource $psdoc ):bool | Ends a pattern which was started with ps_begin_pattern(). Once a pattern has been ended, it can be used like a color to fill areas. 
ps_end_template ( resource $psdoc ):bool | Ends a template which was started with ps_begin_template(). Once a template has been ended, it can be used like an image. 
ps_fill_stroke ( resource $psdoc ):bool | Fills and draws the path constructed with previously called drawing functions like ps_lineto(). 
ps_fill ( resource $psdoc ):bool | Fills the path constructed with previously called drawing functions like ps_lineto(). 
ps_findfont ( resource $psdoc , string $fontname , string $encoding [, bool $embed = FALSE ] ):int
ps_get_buffer ( resource $psdoc ):string
ps_get_parameter ( resource $psdoc , $name [, float $modifier ] ):string
ps_get_value ( resource $psdoc , string $name [, $modifier ] ):float
ps_hyphenate ( resource $psdoc , string $text ):array
ps_include_file ( resource $psdoc , string $file ):bool
ps_lineto ( resource $psdoc , float $x , float $y ):bool | Adds a straight line from the current point to the given coordinates to the current path. Use ps_moveto() to set the starting point of the line. 
ps_makespotcolor ( resource $psdoc , string $name [, $reserved = 0 ] ):int | Creates a spot color from the current fill color. The fill color must be defined in rgb, cmyk or gray colorspace. The spot color name can be an arbitrary name. A spot color can be set as any color with ps_setcolor(). When the document is not printed but displayed by an postscript viewer the given color in the specified color space is use. 
ps_moveto ( resource $psdoc , float $x , float $y ):bool | Sets the current point to new coordinates. If this is the first call of ps_moveto() after a previous path has been ended then it will start a new path. If this function is called in the middle of a path it will just set the current point and start a subpath. 
ps_new ( void ):resource | Creates a new document instance. It does not create the file on disk or in memory, it just sets up everything. ps_new() is usually followed by a call of ps_open_file() to actually create the postscript document. 
ps_open_file ( resource $psdoc [, string $filename ] ):bool | Creates a new file on disk and writes the PostScript document into it. The file will be closed when ps_close() is called. 
ps_open_image_file ( resource $psdoc , string $type , string $filename [, string $stringparam [, $intparam = 0 ]] ):int | Loads an image for later use. 
ps_open_image ( resource $psdoc , string $type , string $source , string $data , $lenght , $width , $height , $components , $bpc , string $params ):int | Reads an image which is already available in memory. The parameter source is currently not evaluated and assumed to be memory. The image data is a sequence of pixels starting in th upper left corner and ending in the lower right corner. Each pixel consists of components color components, and each component has bpc bits. 
ps_open_memory_image ( resource $psdoc , $gd ):int
ps_place_image ( resource $psdoc , int $imageid , float $x , float $y , float $scale ):bool | Places a formerly loaded image on the page. The image can be scaled. If the image shall be rotated as well, you will have to rotate the coordinate system before with ps_rotate(). 
ps_rect ( resource $psdoc , float $x , float $y , float $width , float $height ):bool | Draws a rectangle with its lower left corner at (x, y). The rectangle starts and ends in its lower left corner. If this function is called outside a path it will start a new path. If it is called within a path it will add the rectangle as a subpath. If the last drawing operation does not end in the lower left corner then there will be a gap in the path. 
ps_restore ( resource $psdoc ):bool | Restores a previously saved graphics context. Any call of ps_save() must be accompanied by a call to ps_restore(). All coordinate transformations, line style settings, color settings, etc. are being restored to the state before the call of ps_save(). 
ps_rotate ( resource $psdoc , float $rot ):bool | Sets the rotation of the coordinate system. 
ps_save ( resource $psdoc ):bool | Saves the current graphics context, containing colors, translation and rotation settings and some more. A saved context can be restored with ps_restore(). 
ps_scale ( resource $psdoc , float $x , float $y ):bool | Sets horizontal and vertical scaling of the coordinate system. 
ps_set_border_color ( resource $psdoc , float $red , float $green , float $blue ):bool | Links added with one of the functions ps_add_weblink(), ps_add_pdflink(), etc. will be displayed with a surounded rectangle when the postscript document is converted to pdf and viewed in a pdf viewer. This rectangle is not visible in the postscript document. This function sets the color of the rectangle's border line. 
ps_set_border_dash ( resource $psdoc , float $black , float $white ):bool | Links added with one of the functions ps_add_weblink(), ps_add_pdflink(), etc. will be displayed with a surounded rectangle when the postscript document is converted to pdf and viewed in a pdf viewer. This rectangle is not visible in the postscript document. This function sets the length of the black and white portion of a dashed border line. 
ps_set_border_style ( resource $psdoc , string $style , float $width ):bool | Links added with one of the functions ps_add_weblink(), ps_add_pdflink(), etc. will be displayed with a surounded rectangle when the postscript document is converted to pdf and viewed in a pdf viewer. This rectangle is not visible in the postscript document. This function sets the appearance and width of the border line. 
ps_set_info ( resource $p , string $key , string $val ):bool
ps_set_parameter ( resource $psdoc , string $name , string $value ):bool | Sets several parameters which are used by many functions. Parameters are by definition string values. 
ps_set_text_pos ( resource $psdoc , float $x , float $y ):bool
ps_set_value ( resource $psdoc , string $name , float $value ):bool | Sets several values which are used by many functions. Parameters are by definition float values. 
ps_setcolor ( resource $psdoc , string $type , string $colorspace , float $c1 , float $c2 , float $c3 , float $c4 ):bool | Sets the color for drawing, filling, or both. 
ps_setdash ( resource $psdoc , float $on , float $off ):bool | Sets the length of the black and white portions of a dashed line. 
ps_setflat ( resource $psdoc , float $value ):bool
ps_setfont ( resource $psdoc , int $fontid , float $size ):bool | Sets a font, which has to be loaded before with ps_findfont(). Outputting text without setting a font results in an error. 
ps_setgray ( resource $psdoc , float $gray ):bool | Sets the gray value for all following drawing operations. 
ps_setlinecap ( resource $psdoc , int $type ):bool | Sets how line ends look like. 
ps_setlinejoin ( resource $psdoc , int $type ):bool | Sets how lines are joined. 
ps_setlinewidth ( resource $psdoc , float $width ):bool | Sets the line width for all following drawing operations. 
ps_setmiterlimit ( resource $psdoc , float $value ):bool | If two lines join in a small angle and the line join is set to PS_LINEJOIN_MITER, then the resulting spike will be very long. The miter limit is the maximum ratio of the miter length (the length of the spike) and the line width. 
ps_setoverprintmode ( resource $psdoc , int $mode ):bool
ps_setpolydash ( resource $psdoc , float $arr ):bool | Sets the length of the black and white portions of a dashed line. ps_setpolydash() is used to set more complicated dash patterns. 
ps_shading_pattern ( resource $psdoc , $shadingid , string $optlist ):int | Creates a pattern based on a shading, which has to be created before with ps_shading(). Shading patterns can be used like regular patterns. 
ps_shading ( resource $psdoc , string $type , float $x0 , float $y0 , float $x1 , float $y1 , float $c1 , float $c2 , float $c3 , float $c4 , string $optlist ):int
ps_shfill ( resource $psdoc , int $shadingid ):bool | Fills an area with a shading, which has to be created before with ps_shading(). This is an alternative way to creating a pattern from a shading ps_shading_pattern() and using the pattern as the filling color. 
ps_show_boxed ( resource $psdoc , string $text , float $left , float $bottom , float $width , float $height , string $hmode [, string $feature ] ):int
ps_show_xy2 ( resource $psdoc , string $text , int $len , float $xcoor , float $ycoor ):bool
ps_show_xy ( resource $psdoc , string $text , float $x , float $y ):bool | Output a text at the given text position. 
ps_show2 ( resource $psdoc , string $text , int $len ):bool | Output text at the current position. Do not print more than len characters. 
ps_show ( resource $psdoc , string $text ):bool
ps_string_geometry ( resource $psdoc , string $text [, int $fontid = 0 [, float $size = 0.0 ]] ):array | like ps_stringwidth() but returns an array of dimensions containing the width, ascender, and descender of the text. 
ps_stringwidth ( resource $psdoc , string $text [, int $fontid = 0 [, $size = 0.0 ]] ):float | Calculates the width of a string in points if it was output in the given font and font size. This function needs an Adobe font metrics file to calculate the precise width. If kerning is turned on, it will be taken into account. 
ps_stroke ( resource $psdoc ):bool | Draws the path constructed with previously called drawing functions like ps_lineto(). 
ps_symbol_name ( resource $psdoc , int $ord [, int $fontid = 0 ] ):string | This function needs an Adobe font metrics file to know which glyphs are available. 
ps_symbol_width ( resource $psdoc , int $ord [, int $fontid = 0 [, $size = 0.0 ]] ):float | Calculates the width of a glyph in points if it was output in the given font and font size. This function needs an Adobe font metrics file to calculate the precise width. 
ps_symbol ( resource $psdoc , int $ord ):bool | Output the glyph at position ord in the font encoding vector of the current font. The font encoding for a font can be set when loading the font with ps_findfont(). 
ps_translate ( resource $psdoc , float $x , float $y ):bool | Sets a new initial point of the coordinate system. 
seaslog_get_author ( void ):string
seaslog_get_version ( void ):string
session_pgsql_add_error ( int $error_level [, string $error_message ] ):bool
session_pgsql_get_error ([ bool $with_error_message = FALSE ] ):array | Get the number of errors and optional the error messages. 
session_pgsql_get_field ( void ):string
session_pgsql_reset ( void ):bool | Reset the connection to the session database servers. 
session_pgsql_set_field ( string $value ):bool
session_pgsql_status ( void ):array
solr_get_version ( void ):string | This function returns the current version of the extension as a string. 
sqlite_array_query ( resource $dbhandle , string $query [, int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE ]] ):array
sqlite_busy_timeout ( resource $dbhandle , int $milliseconds ):void
sqlite_changes ( resource $dbhandle ):int
sqlite_close ( resource $dbhandle ):void | Closes the given db_handle database handle. If the database was persistent, it will be closed and removed from the persistent list. 
sqlite_column ( resource $result , $index_or_name [, bool $decode_binary = TRUE ] ):mixed
sqlite_create_aggregate ( resource $dbhandle , string $function_name , callable $step_func , callable $finalize_func [, int $num_args = -1 ] ):void
sqlite_create_function ( resource $dbhandle , string $function_name , callable $callback [, int $num_args = -1 ] ):void
sqlite_current ( resource $result [, int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE ]] ):array
sqlite_error_( int $error_code ):string | Returns a human readable description of the error_code returned from sqlite_last_error(). 
sqlite_escape_( $item ):string |  Escapes a string for use as a query parameter.
sqlite_exec ( resource $dbhandle , string $query [, string &$error_msg ] ):bool
sqlite_factory ( string $filename [, int $mode = 0666 [, string &$error_message ]] ):SQLiteDatabase | behaves similarly to sqlite_open() in that it opens an SQLite database or attempts to create it if it does not exist. However, a SQLiteDatabase object is returned rather than a resource. Please see the sqlite_open() reference page for further usage and caveats. 
sqlite_fetch_all ( resource $result [, int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE ]] ):array
sqlite_fetch_( resource $result [, int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE ]] ):array
sqlite_fetch_column_types ( string $table_name , resource $dbhandle [, int $result_type = SQLITE_ASSOC ] ):array
sqlite_fetch_( resource $result [, string $class_name [, array $ctor_params [, bool $decode_binary = TRUE ]]] ):object
sqlite_fetch_single ( resource $result [, bool $decode_binary = TRUE ] ):string
sqlite_fetch_string(->) function is an alias of: sqlite_fetch_single(). :This
sqlite_field_name ( resource $result , int $field_index ):string
sqlite_has_more ( resource $result ):bool | Finds whether more rows are available from the given result set. 
sqlite_has_prev ( resource $result ):bool
oriented style (method)::Object
sqlite_last_error ( resource $dbhandle ):int
sqlite_last_insert_rowid ( resource $dbhandle ):int
sqlite_libencoding ( void ):string |  Returns the encoding (iso8859 or UTF-8) of the linked SQLite library.
sqlite_libversion ( void ):string | Returns the version of the linked SQLite library. 
sqlite_next ( resource $result ):bool
sqlite_num_fields ( resource $result ):int
sqlite_num_rows ( resource $result ):int
sqlite_open ( string $filename [, int $mode = 0666 [, string &$error_message ]] ):resource |  Opens a SQLite database. Will create the database if it does not exist.
sqlite_popen ( string $filename [, int $mode = 0666 [, string &$error_message ]] ):resource |  Opens a persistent handle to a SQLite database. Will create the database if it does not exist.
sqlite_prev ( resource $result ):bool
sqlite_query ( $dbhandle , string $query [, int $result_type = SQLITE_BOTH [, string &$error_msg ]] ):resource
sqlite_rewind ( resource $result ):bool
sqlite_seek ( resource $result , int $rownum ):bool
sqlite_single_query ( resource $db , string $query [, bool $first_row_only [, bool $decode_binary ]] ):array
sqlite_udf_decode_binary ( $data ):string |  Decode binary encoding on a string parameter passed to an UDF.
sqlite_udf_encode_binary ( $data ):string |  Apply binary encoding (if required) to a string to return from an UDF.
sqlite_unbuffered_query ( $dbhandle , string $query [, int $result_type = SQLITE_BOTH [, string &$error_msg ]] ):resource
sqlite_valid ( resource $result ):bool
sqlsrv_begin_transaction ( resource $conn ):bool | includes all statements that were executed after its call and before calls to sqlsrv_rollback() or sqlsrv_commit().
sqlsrv_cancel ( resource $stmt ):bool | Cancels a statement. Any results associated with the statement that have not been consumed are deleted. After sqlsrv_cancel() has been called, the specified statement can be re-executed if it was created with sqlsrv_prepare(). Calling sqlsrv_cancel() is not necessary if all the results associated with the statement have been consumed. 
sqlsrv_client_info ( resource $conn ):array | Returns information about the client and specified connection 
sqlsrv_close ( resource $conn ):bool | Closes an open connection and releases resourses associated with the connection. 
sqlsrv_commit ( resource $conn ):bool | Commits a transaction that was begun with sqlsrv_begin_transaction(). The connection is returned to auto-commit mode.
sqlsrv_configure ( string $setting , mixed $value ):bool | Changes the driver error handling and logging configurations. 
sqlsrv_connect ( string $serverName [, array $connectionInfo ] ):resource | Opens a connection to a Microsoft SQL Server database. By default, the connection is attempted using Windows Authentication. To connect using SQL Server Authentication, include "UID" and "PWD" in the connection options array. 
sqlsrv_errors ([ int $errorsOrWarnings ] ):mixed | Returns error and warning information about the last SQLSRV operation performed. 
sqlsrv_execute ( resource $stmt ):bool | Executes a statement prepared with sqlsrv_prepare(). This function is ideal for executing a prepared statement multiple times with different parameter values. 
sqlsrv_fetch_( resource $stmt [, int $fetchType [, int $row [, int $offset ]]] ):array | Returns the next available row of data as an associative array, a numeric array, or both (the default). 
sqlsrv_fetch_object ( resource $stmt [, string $className [, array $ctorParams [, int $row [, int $offset ]]]] ):mixed | Retrieves the next row of data in a result set as an instance of the specified class with properties that match the row field names and values that correspond to the row field values. 
sqlsrv_fetch ( resource $stmt [, int $row [, int $offset ]] ):mixed | Makes the next row in a result set available for reading. Use sqlsrv_get_field() to read the fields of the row. 
sqlsrv_field_metadata ( resource $stmt ):mixed | Retrieves metadata for the fields of a statement prepared by sqlsrv_prepare() or sqlsrv_query(). sqlsrv_field_metadata() can be called on a statement before or after statement execution. 
sqlsrv_free_stmt ( resource $stmt ):bool | Frees all resources for the specified statement. The statement cannot be used after sqlsrv_free_stmt() has been called on it. If sqlsrv_free_stmt() is called on an in-progress statement that alters server state, statement execution is terminated and the statement is rolled back. 
sqlsrv_get_config ( string $setting ):mixed | Returns the value of the specified configuration setting. 
sqlsrv_get_field ( resource $stmt , int $fieldIndex [, int $getAsType ] ):mixed | Gets field data from the currently selected row. Fields must be accessed in order. Field indices start at 0. 
sqlsrv_has_rows ( resource $stmt ):bool | Indicates whether the specified statement has rows. 
sqlsrv_next_result ( resource $stmt ):mixed | Makes the next result of the specified statement active. Results include result sets, row counts, and output parameters. 
sqlsrv_num_fields ( resource $stmt ):mixed | Retrieves the number of fields (columns) on a statement. 
sqlsrv_num_rows ( resource $stmt ):mixed | Retrieves the number of rows in a result set. This function requires that the statment resource be created with a static or keyset cursor. For more information, see sqlsrv_query(), sqlsrv_prepare(), or Specifying a Cursor Type and Selecting Rows in the Microsoft SQLSRV documentation. 
sqlsrv_prepare ( resource $conn , string $sql [, array $params [, array $options ]] ):mixed | Prepares a query for execution. This function is ideal for preparing a query that will be executed multiple times with different parameter values. 
sqlsrv_query ( resource $conn , string $sql [, array $params [, array $options ]] ):mixed | Prepares and executes a query. 
sqlsrv_rollback ( resource $conn ):bool | Rolls back a transaction that was begun with sqlsrv_begin_transaction() and returns the connection to auto-commit mode. 
sqlsrv_rows_affected ( resource $stmt ):int | Returns the number of rows modified by the last INSERT, UPDATE, or DELETE query executed. For information about the number of rows returned by a SELECT query, see sqlsrv_num_rows(). 
sqlsrv_send_stream_data ( resource $stmt ):bool | Send data from parameter streams to the server. Up to 8 KB of data is sent with each call. 
sqlsrv_server_info ( resource $conn ):array | Returns information about the server. 
ssdeep_fuzzy_compare ( string $signature1 , string $signature2 ):int | Calculates the match score between signature1 and signature2 using context-triggered piecewise hashing, and returns the match score. 
ssdeep_fuzzy_hash_filename ( $file_name ):string |  calculates the hash of the file specified by file_name using context-triggered piecewise hashing, and returns that hash. 
ssdeep_fuzzy_hash ( $to_hash ):string | calculates the hash of to_hash using context-triggered piecewise hashing, and returns that hash. 
ssh2_auth_agent ( resource $session , string $username ):bool
ssh2_auth_hostbased_file ( resource $session , string $username , string $hostname , string $pubkeyfile , string $privkeyfile [, string $passphrase [, string $local_username ]] ):bool | Authenticate using a public hostkey read from a file. 
ssh2_auth_none ( resource $session , string $username ):mixed | Attempt "none" authentication which usually will (and should) fail. As part of the failure, this function will return an array of accepted authentication methods. 
ssh2_auth_password ( resource $session , string $username , string $password ):bool | Authenticate over SSH using a plain password. Since version 0.12 this function also supports keyboard_interactive method. 
ssh2_auth_pubkey_file ( resource $session , string $username , string $pubkeyfile , string $privkeyfile [, string $passphrase ] ):bool | Authenticate using a public key read from a file. 
ssh2_connect ( string $host [, int $port = 22 [, array $methods [, array $callbacks ]]] ):resource
ssh2_disconnect ( resource $session ):bool | Close a connection to a remote SSH server. 
ssh2_exec ( $session , string $command [, string $pty [, array $env [, int $width = 80 [, int $height = 25 [, int $width_height_type = SSH2_TERM_UNIT_CHARS ]]]]] ):resource | Execute a command at the remote end and allocate a channel for it. 
ssh2_fetch_stream ( $channel , int $streamid ):resource | Fetches an alternate substream associated with an SSH2 channel stream. The SSH2 protocol currently defines only one substream, STDERR, which has a substream ID of SSH2_STREAM_STDERR (defined as 1). 
ssh2_fingerprint ( resource $session [, int $flags = SSH2_FINGERPRINT_MD5 | SSH2_FINGERPRINT_HEX ] ):string | Returns a server hostkey hash from an active session. 
ssh2_methods_negotiated ( resource $session ):array | Returns list of negotiated methods. 
ssh2_publickey_add ( resource $pkey , string $algoname , string $blob [, $overwrite = FALSE [, array $attributes ]] ):bool | Note: The public key subsystem is used for managing public keys on a server to which the client is already authenticated. To authenticate to a remote system using public key authentication, use the ssh2_auth_pubkey_file() function instead.
ssh2_publickey_init ( $session ):resource
ssh2_publickey_list ( resource $pkey ):array | List currently authorized publickeys. 
ssh2_publickey_remove ( resource $pkey , string $algoname , string $blob ):bool | Removes an authorized publickey. 
ssh2_scp_recv ( resource $session , string $remote_file , string $local_file ):bool | Copy a file from the remote server to the local filesystem using the SCP protocol. 
ssh2_scp_send ( resource $session , string $local_file , string $remote_file [, int $create_mode = 0644 ] ):bool | Copy a file from the local filesystem to the remote server using the SCP protocol. 
ssh2_sftp_chmod ( resource $sftp , string $filename , int $mode ):bool | Attempts to change the mode of the specified file to that given in mode. 
ssh2_sftp_lstat ( resource $sftp , string $path ):array
ssh2_sftp_mkdir ( resource $sftp , string $dirname [, int $mode = 0777 [, $recursive = FALSE ]] ):bool
ssh2_sftp_readlink ( resource $sftp , $link ):string | Returns the target of a symbolic link. 
ssh2_sftp_realpath ( resource $sftp , $filename ):string | Translates filename into the effective real path on the remote filesystem. 
ssh2_sftp_rename ( resource $sftp , string $from , string $to ):bool | Renames a file on the remote filesystem. 
ssh2_sftp_rmdir ( resource $sftp , string $dirname ):bool
ssh2_sftp_stat ( resource $sftp , string $path ):array
ssh2_sftp_symlink ( resource $sftp , string $target , string $link ):bool | Creates a symbolic link named link on the remote filesystem pointing to target. 
ssh2_sftp_unlink ( resource $sftp , string $filename ):bool | Deletes a file on the remote filesystem. 
ssh2_sftp ( $session ):resource | Request the SFTP subsystem from an already connected SSH2 server. 
ssh2_shell ( $session [, string $term_type = "vanilla" [, array $env [, int $width = 80 [, int $height = 25 [, int $width_height_type = SSH2_TERM_UNIT_CHARS ]]]]] ):resource | Open a shell at the remote end and allocate a stream for it. 
ssh2_tunnel ( $session , string $host , int $port ):resource | Open a socket stream to an arbitrary host/port by way of the currently connected SSH server. 
stats_absolute_deviation ( array $a ):float | Returns the absolute deviation of the values in a. 
stats_cdf_beta ( $par1 , $par2 , $par3 , int $which ):float
stats_cdf_binomial ( $par1 , $par2 , $par3 , int $which ):float
stats_cdf_cauchy ( $par1 , $par2 , $par3 , int $which ):float
stats_cdf_chisquare ( $par1 , $par2 , int $which ):float
stats_cdf_exponential ( $par1 , $par2 , int $which ):float
stats_cdf_f ( $par1 , $par2 , $par3 , int $which ):float
stats_cdf_gamma ( $par1 , $par2 , $par3 , int $which ):float
stats_cdf_laplace ( $par1 , $par2 , $par3 , int $which ):float
stats_cdf_logistic ( $par1 , $par2 , $par3 , int $which ):float
stats_cdf_negative_binomial ( $par1 , $par2 , $par3 , int $which ):float
stats_cdf_noncentral_chisquare ( $par1 , $par2 , $par3 , int $which ):float
stats_cdf_noncentral_f ( $par1 , $par2 , $par3 , $par4 , int $which ):float
stats_cdf_noncentral_t ( $par1 , $par2 , $par3 , int $which ):float
stats_cdf_normal ( $par1 , $par2 , $par3 , int $which ):float
stats_cdf_poisson ( $par1 , $par2 , int $which ):float
stats_cdf_t ( $par1 , $par2 , int $which ):float
stats_cdf_uniform ( $par1 , $par2 , $par3 , int $which ):float
stats_cdf_weibull ( $par1 , $par2 , $par3 , int $which ):float
stats_covariance ( array $a , array $b ):float | Returns the covariance of a and b. 
stats_dens_beta ( $x , $a , $b ):float | Returns the probability density at x, where the random variable follows the beta distribution of which the shape parameters are a and b. 
stats_dens_cauchy ( $x , $ave , $stdev ):float | Returns the probability density at x, where the random variable follows the Cauchy distribution whose location and scale are ave and stdev, respectively. 
stats_dens_chisquare ( $x , $dfr ):float | Returns the probability density at x, where the random variable follows the chi-square distribution of which the degree of freedom is dfr. 
stats_dens_exponential ( $x , $scale ):float | Returns the probability density at x, where the random variable follows the exponential distribution of which the scale is scale. 
stats_dens_f ( $x , $dfr1 , $dfr2 ):float | Returns the probability density at x, where the random variable follows the F distribution of which the degree of freedoms are dfr1 and dfr2. 
stats_dens_gamma ( $x , $shape , $scale ):float | Returns the probability density at x, where the random variable follows the gamma distribution of which the shape parameter is shape and the scale parameter is scale. 
stats_dens_laplace ( $x , $ave , $stdev ):float | Returns the probability density at x, where the random variable follows the Laplace distribution of which the location parameter is ave and the scale parameter is stdev. 
stats_dens_logistic ( $x , $ave , $stdev ):float | Returns the probability density at x, where the random variable follows the logistic distribution of which the location parameter is ave and the scale parameter is stdev. 
stats_dens_normal ( $x , $ave , $stdev ):float | Returns the probability density at x, where the random variable follows the normal distribution of which the mean is ave and the standard deviation is stdev. 
stats_dens_pmf_binomial ( $x , $n , $pi ):float | Returns the probability mass at x, where the random variable follows the binomial distribution of which the number of trials is n and the success rate is pi. 
stats_dens_pmf_hypergeometric ( $n1 , $n2 , $N1 , $N2 ):float | Returns the probability mass at n1, where the random variable follows the hypergeometric distribution of which the number of failure is n2, the number of success samples is N1, and the number of failure samples is N2. 
stats_dens_pmf_negative_binomial ( $x , $n , $pi ):float | Returns the probability density at x, where the random variable follows the negative binomial distribution of which the number of the success is n and the success rate is pi. 
stats_dens_pmf_poisson ( $x , $lb ):float | Returns the probability mass at x, where the random variable follows the Poisson distribution whose parameter is lb. 
stats_dens_t ( $x , $dfr ):float | Returns the probability density at x, where the random variable follows the t-distribution of which the degree of freedom is dfr. 
stats_dens_uniform ( $x , $a , $b ):float | Returns the probability density at x, where the random variable follows the uniform distribution of which the lower bound is a and the upper bound is b. 
stats_dens_weibull ( $x , $a , $b ):float | Returns the probability density at x, where the random variable follows the Weibull distribution of which the shape parameter is a and the scale parameter is b. 
stats_harmonic_mean ( array $a ):number | Returns the harmonic mean of the values in a. 
stats_kurtosis ( array $a ):float | Returns the kurtosis of the values in a. 
stats_rand_gen_beta ( $a , $b ):float | Returns a random deviate from the beta distribution with parameters A and B. The density of the beta is x^(a-1) * (1-x)^(b-1) / B(a,b) for 0 < x <. Method R. C. H. Cheng. 
stats_rand_gen_chisquare ( $df ):float | Returns a random deviate from the chi-square distribution where the degrees of freedom is df. 
stats_rand_gen_exponential ( $av ):float | Returns a random deviate from the exponential distribution of which the scale is av. 
stats_rand_gen_f ( $dfn , $dfd ):float | Generates a random deviate from the F (variance ratio) distribution with "dfn" degrees of freedom in the numerator and "dfd" degrees of freedom in the denominator. Method : directly generates ratio of chisquare variates. 
stats_rand_gen_funiform ( $low , $high ):float | Returns a random deviate from the uniform distribution from low to high. 
stats_rand_gen_gamma ( $a , $r ):float | Generates a random deviate from the gamma distribution whose density is (A**R)/Gamma(R) * X**(R-1) * Exp(-A*X). 
stats_rand_gen_ibinomial_negative ( $n , float $p ):int | Returns a random deviate from a negative binomial distribution where the number of success is n and the success rate is p. 
stats_rand_gen_ibinomial ( $n , float $pp ):int | Returns a random deviate from the binomial distribution whose number of trials is n and whose probability of an event in each trial is pp. 
stats_rand_gen_( void ):int | Returns a random integer between 1 and 2147483562 
stats_rand_gen_ipoisson ( float $mu ):int | Returns a random deviate from the Poisson distribution with parameter mu. 
stats_rand_gen_iuniform ( $low , $high ):int | Returns a random integer from the discrete uniform distribution between low (inclusive) and high (inclusive). 
stats_rand_gen_noncenral_chisquare ( $df , $xnonc ):float | Returns a random deviate from the non-central chi-square distribution with degrees of freedom, df, and non-centrality parameter, xnonc. 
stats_rand_gen_noncentral_chisquare ( $df , $xnonc ):float | Returns a random deviate from the non-central chi-square distribution with degrees of freedom, df, and non-centrality parameter, xnonc. 
stats_rand_gen_noncentral_f ( $dfn , $dfd , $xnonc ):float | Returns a random deviate from the non-central F distribution where the degrees of freedoms are dfn (numerator) and dfd (denominator), and the non-centrality parameter is xnonc. 
stats_rand_gen_noncentral_t ( $df , $xnonc ):float | Returns a random deviate from the non-central t-distribution with the degrees of freedom, df, and the non-centrality parameter, xnonc. 
stats_rand_gen_normal ( $av , $sd ):float | Returns a random deviate from the normal distribution with mean, av, and standard deviation, sd. 
stats_rand_gen_t ( $df ):float | Returns a random deviate from the t-distribution with the degrees of freedom, df. 
stats_rand_get_seeds ( void ):array | Returns the current seed values of the random number generator 
stats_rand_phrase_to_seeds ( string $phrase ):array | Generate two seeds for the random number generator from a phrase. 
stats_rand_ranf ( void ):float | Returns a random floating point number from a uniform distribution between 0 (exclusive) and 1 (exclusive). 
stats_rand_setall ( int $iseed1 , int $iseed2 ):void | Set iseed1 and iseed2 as seed values to the random generator used in statistic functions. 
stats_skew ( array $a ):float | Returns the skewness of the values in a. 
stats_standard_deviation ( array $a [, bool $sample = FALSE ] ):float | Returns the standard deviation of the values in a. 
stats_stat_binomial_coef ( int $x , int $n ):float | Returns the binomial coefficient of n choose x. 
stats_stat_correlation ( array $arr1 , array $arr2 ):float | Returns the Pearson correlation coefficient between arr1 and arr2. 
stats_stat_factorial ( int $n ):float | Returns the factorial of an integer, n. 
stats_stat_independent_t ( array $arr1 , array $arr2 ):float
stats_stat_innerproduct ( array $arr1 , array $arr2 ):float | Returns the inner product of arr1 and arr2. 
stats_stat_paired_t ( array $arr1 , array $arr2 ):float | Returns the t-value of the dependent t-test for paired samples arr1 and arr2. 
stats_stat_percentile ( array $arr , $perc ):float | Returns the perc-th percentile value of the array arr. 
stats_stat_powersum ( array $arr , $power ):float | Returns the sum of the power-th power of a vector represented as an array arr. 
stats_variance ( array $a [, bool $sample = FALSE ] ):float | Returns the variance of the values in a. 
stomp_connect_error ( void ):string | Returns a string description of the last connect error. 
stomp_version ( void ):string | Returns a string containing the version of the current stomp extension. 
svn_add ( string $path [, $recursive = TRUE [, $force = FALSE ]] ):bool | Adds the file, directory or symbolic link at path to the working directory. The item will be added to the repository the next time you call svn_commit() on the working copy. 
svn_auth_get_parameter ( $key ):string | Retrieves authentication parameter at key. For a list of valid keys and their meanings, consult the authentication constants list. 
svn_auth_set_parameter ( string $key , string $value ):void | Sets authentication parameter at key to value. For a list of valid keys and their meanings, consult the authentication constants list. 
svn_blame ( string $repository_url [, int $revision_no = SVN_REVISION_HEAD ] ):array | Get the SVN blame of a file from a repository URL. 
svn_cat ( $repos_url [, int $revision_no ] ):string | Returns the contents of the URL repos_url to a file in the repository, optionally at revision number revision_no. 
svn_checkout ( string $repos , string $targetpath [, int $revision [, int $flags = 0 ]] ):bool | Checks out a working copy from the repository at repos to targetpath at revision revision. 
svn_cleanup ( string $workingdir ):bool | Recursively cleanup working copy directory workingdir, finishing any incomplete operations and removing working copy locks. Use when a working copy is in limbo and needs to be usable again. 
svn_client_version ( void ):string | Returns the version of the SVN client libraries 
svn_commit ( string $log , $targets [, bool $recursive = TRUE ] ):array
svn_delete ( string $path [, $force = FALSE ] ):bool | Deletes the file, directory or symbolic link at path from the working directory. The item will be deleted from the repository the next time you call svn_commit() on the working copy. 
svn_diff ( string $path1 , int $rev1 , string $path2 , int $rev2 ):array
svn_export ( string $frompath , string $topath [, $working_copy = TRUE [, int $revision_no = -1 ]] ):bool | Export the contents of either a working copy or repository into a 'clean' directory. 
svn_fs_abort_txn ( resource $txn ):bool
svn_fs_apply_text ( $root , string $path ):resource
svn_fs_begin_txn2 ( $repos , int $rev ):resource
svn_fs_change_node_prop ( resource $root , string $path , string $name , string $value ):bool
svn_fs_check_path ( resource $fsroot , string $path ):int
svn_fs_contents_changed ( resource $root1 , string $path1 , resource $root2 , string $path2 ):bool
svn_fs_copy ( resource $from_root , string $from_path , resource $to_root , string $to_path ):bool
svn_fs_delete ( resource $root , string $path ):bool
svn_fs_dir_entries ( resource $fsroot , string $path ):array
svn_fs_file_contents ( $fsroot , string $path ):resource
svn_fs_file_length ( resource $fsroot , string $path ):int
svn_fs_is_dir ( resource $root , string $path ):bool
svn_fs_is_file ( resource $root , string $path ):bool
svn_fs_make_dir ( resource $root , string $path ):bool
svn_fs_make_file ( resource $root , string $path ):bool
svn_fs_node_created_rev ( resource $fsroot , string $path ):int
svn_fs_node_prop ( resource $fsroot , $path , $propname ):string
svn_fs_props_changed ( resource $root1 , string $path1 , resource $root2 , string $path2 ):bool
svn_fs_revision_prop ( resource $fs , int $revnum , $propname ):string
svn_fs_revision_root ( $fs , int $revnum ):resource
svn_fs_txn_root ( $txn ):resource
svn_fs_youngest_rev ( resource $fs ):int
svn_import ( string $path , string $url , $nonrecursive ):bool | Commits unversioned path into repository at url. If path is a directory and nonrecursive is FALSE, the directory will be imported recursively. 
svn_log ( string $repos_url [, int $start_revision [, int $end_revision [, int $limit = 0 [, int $flags = SVN_DISCOVER_CHANGED_PATHS | SVN_STOP_ON_COPY ]]]] ):array | returns the complete history of the item at the repository URL repos_url, or the history of a specific revision if start_revision is set. This function is equivalent to svn log --verbose -r $start_revision $repos_url. 
svn_ls ( string $repos_url [, int $revision_no = SVN_REVISION_HEAD [, bool $recurse = FALSE [, bool $peg = FALSE ]]] ):array
svn_mkdir ( string $path [, string $log_message ] ):bool | Creates a directory in a working copy or repository. 
svn_repos_create ( string $path [, array $config [, array $fsconfig ]] ):resource
svn_repos_fs_begin_txn_for_commit ( $repos , int $rev , string $author , string $log_msg ):resource
svn_repos_fs_commit_txn ( resource $txn ):int
svn_repos_fs ( $repos ):resource
svn_repos_hotcopy ( string $repospath , string $destpath , $cleanlogs ):bool
svn_repos_open ( string $path ):resource
svn_repos_recover ( string $path ):bool
svn_revert ( string $path [, $recursive = FALSE ] ):bool | Revert any local changes to the path in a working copy. 
svn_status ( string $path [, int $flags = 0 ] ):array | Returns the status of working copy files and directories, giving modifications, additions, deletions and other changes to items in the working copy. 
svn_update ( string $path [, $revno = SVN_REVISION_HEAD [, bool $recurse = TRUE ]] ):int | Update working copy at path to revision revno. If recurse is true, directories will be recursively updated. 
is_tainted ( string $string ):bool | Checks whether a string is tainted 
taint ( string &$string [, string $... ] ):bool | Make a string tainted. This is used for testing purpose only. 
untaint ( string &$string [, string $... ] ):bool | Untaint strings 
tcpwrap_check ( string $daemon , string $address [, string $user [, $nodns = FALSE ]] ):bool | This function consults the /etc/hosts.allow and /etc/hosts.deny files to check if access to service daemon should be granted or denied for a client. 
trader_acos ( $real ):array | Calculates the arc cosine for each value in real and returns the resulting array. 
trader_ad ( $high , $low , $close , $volume ):array
trader_add ( $real0 , $real1 ):array | Calculates the vector addition of real0 to real1 and returns the resulting vector. 
trader_adosc ( $high , $low , $close , $volume [, int $fastPeriod [, int $slowPeriod ]] ):array
trader_adx ( $high , $low , $close [, int $timePeriod ] ):array
trader_adxr ( $high , $low , $close [, int $timePeriod ] ):array
trader_apo ( $real [, int $fastPeriod [, int $slowPeriod [, int $mAType ]]] ):array
trader_aroon ( $high , $low [, int $timePeriod ] ):array
trader_aroonosc ( $high , $low [, int $timePeriod ] ):array
trader_asin ( $real ):array | Calculates the arc sine for each value in real and returns the resulting array. 
trader_atan ( $real ):array | Calculates the arc tangent for each value in real and returns the resulting array. 
trader_atr ( $high , $low , $close [, int $timePeriod ] ):array
trader_avgprice ( $open , $high , $low , $close ):array
trader_bbands ( $real [, int $timePeriod [, float $nbDevUp [, float $nbDevDn [, int $mAType ]]]] ):array
trader_beta ( $real0 , $real1 [, int $timePeriod ] ):array
trader_bop ( $open , $high , $low , $close ):array
trader_cci ( $high , $low , $close [, int $timePeriod ] ):array
trader_cdl2crows ( $open , $high , $low , $close ):array
trader_cdl3blackcrows ( $open , $high , $low , $close ):array
trader_cdl3inside ( $open , $high , $low , $close ):array
trader_cdl3linestrike ( $open , $high , $low , $close ):array
trader_cdl3outside ( $open , $high , $low , $close ):array
trader_cdl3starsinsouth ( $open , $high , $low , $close ):array
trader_cdl3whitesoldiers ( $open , $high , $low , $close ):array
trader_cdlabandonedbaby ( $open , $high , $low , $close [, float $penetration ] ):array
trader_cdladvanceblock ( $open , $high , $low , $close ):array
trader_cdlbelthold ( $open , $high , $low , $close ):array
trader_cdlbreakaway ( $open , $high , $low , $close ):array
trader_cdlclosingmarubozu ( $open , $high , $low , $close ):array
trader_cdlconcealbabyswall ( $open , $high , $low , $close ):array
trader_cdlcounterattack ( $open , $high , $low , $close ):array
trader_cdldarkcloudcover ( $open , $high , $low , $close [, float $penetration ] ):array
trader_cdldoji ( $open , $high , $low , $close ):array
trader_cdldojistar ( $open , $high , $low , $close ):array
trader_cdldragonflydoji ( $open , $high , $low , $close ):array
trader_cdlengulfing ( $open , $high , $low , $close ):array
trader_cdleveningdojistar ( $open , $high , $low , $close [, float $penetration ] ):array
trader_cdleveningstar ( $open , $high , $low , $close [, float $penetration ] ):array
trader_cdlgapsidesidewhite ( $open , $high , $low , $close ):array
trader_cdlgravestonedoji ( $open , $high , $low , $close ):array
trader_cdlhammer ( $open , $high , $low , $close ):array
trader_cdlhangingman ( $open , $high , $low , $close ):array
trader_cdlharami ( $open , $high , $low , $close ):array
trader_cdlharamicross ( $open , $high , $low , $close ):array
trader_cdlhighwave ( $open , $high , $low , $close ):array
trader_cdlhikkake ( $open , $high , $low , $close ):array
trader_cdlhikkakemod ( $open , $high , $low , $close ):array
trader_cdlhomingpigeon ( $open , $high , $low , $close ):array
trader_cdlidentical3crows ( $open , $high , $low , $close ):array
trader_cdlinneck ( $open , $high , $low , $close ):array
trader_cdlinvertedhammer ( $open , $high , $low , $close ):array
trader_cdlkicking ( $open , $high , $low , $close ):array
trader_cdlkickingbylength ( $open , $high , $low , $close ):array
trader_cdlladderbottom ( $open , $high , $low , $close ):array
trader_cdllongleggeddoji ( $open , $high , $low , $close ):array
trader_cdllongline ( $open , $high , $low , $close ):array
trader_cdlmarubozu ( $open , $high , $low , $close ):array
trader_cdlmatchinglow ( $open , $high , $low , $close ):array
trader_cdlmathold ( $open , $high , $low , $close [, float $penetration ] ):array
trader_cdlmorningdojistar ( $open , $high , $low , $close [, float $penetration ] ):array
trader_cdlmorningstar ( $open , $high , $low , $close [, float $penetration ] ):array
trader_cdlonneck ( $open , $high , $low , $close ):array
trader_cdlpiercing ( $open , $high , $low , $close ):array
trader_cdlrickshawman ( $open , $high , $low , $close ):array
trader_cdlrisefall3methods ( $open , $high , $low , $close ):array
trader_cdlseparatinglines ( $open , $high , $low , $close ):array
trader_cdlshootingstar ( $open , $high , $low , $close ):array
trader_cdlshortline ( $open , $high , $low , $close ):array
trader_cdlspinningtop ( $open , $high , $low , $close ):array
trader_cdlstalledpattern ( $open , $high , $low , $close ):array
trader_cdlsticksandwich ( $open , $high , $low , $close ):array
trader_cdltakuri ( $open , $high , $low , $close ):array
trader_cdltasukigap ( $open , $high , $low , $close ):array
trader_cdlthrusting ( $open , $high , $low , $close ):array
trader_cdltristar ( $open , $high , $low , $close ):array
trader_cdlunique3river ( $open , $high , $low , $close ):array
trader_cdlupsidegap2crows ( $open , $high , $low , $close ):array
trader_cdlxsidegap3methods ( $open , $high , $low , $close ):array
trader_ceil ( $real ):array | Calculates the next highest integer for each value in real and returns the resulting array. 
trader_cmo ( $real [, int $timePeriod ] ):array
trader_correl ( $real0 , $real1 [, int $timePeriod ] ):array
trader_cos ( $real ):array | Calculates the cosine for each value in real and returns the resulting array. 
trader_cosh ( $real ):array | Calculates the hyperbolic cosine for each value in real and returns the resulting array. 
trader_dema ( $real [, int $timePeriod ] ):array
trader_div ( $real0 , $real1 ):array | Divides each value from real0 by the corresponding value from real1 and returns the resulting array. 
trader_dx ( $high , $low , $close [, int $timePeriod ] ):array
trader_ema ( $real [, int $timePeriod ] ):array
trader_errno ( void ):int | Get error code of the last operation. 
trader_exp ( $real ):array | Calculates e raised to the power of each value in real. Returns an array with the calculated data. 
trader_floor ( $real ):array | Calculates the next lowest integer for each value in real and returns the resulting array. 
trader_get_compat ( void ):int | Get compatibility mode which affects the way calculations are done by all the extension functions. 
trader_get_unstable_period ( $functionId ):int | Get unstable period factor for a particular function. 
trader_ht_dcperiod ( $real ):array
trader_ht_dcphase ( $real ):array
trader_ht_phasor ( $real ):array
trader_ht_sine ( $real ):array
trader_ht_trendline ( $real ):array
trader_ht_trendmode ( $real ):array
trader_kama ( $real [, int $timePeriod ] ):array
trader_linearreg_angle ( $real [, int $timePeriod ] ):array
trader_linearreg_intercept ( $real [, int $timePeriod ] ):array
trader_linearreg_slope ( $real [, int $timePeriod ] ):array
trader_linearreg ( $real [, int $timePeriod ] ):array
trader_ln ( $real ):array | Calculates the natural logarithm for each value in real and returns the resulting array. 
trader_log10 ( $real ):array | Calculates the base-10 logarithm for each value in real and returns the resulting array. 
trader_ma ( $real [, int $timePeriod [, int $mAType ]] ):array
trader_macd ( $real [, int $fastPeriod [, int $slowPeriod [, int $signalPeriod ]]] ):array
trader_macdext ( $real [, int $fastPeriod [, int $fastMAType [, int $slowPeriod [, int $slowMAType [, int $signalPeriod [, int $signalMAType ]]]]]] ):array
trader_macdfix ( $real [, int $signalPeriod ] ):array
trader_mama ( $real [, float $fastLimit [, float $slowLimit ]] ):array
trader_mavp ( $real , $periods [, int $minPeriod [, int $maxPeriod [, int $mAType ]]] ):array
trader_max ( $real [, int $timePeriod ] ):array
trader_maxindex ( $real [, int $timePeriod ] ):array
trader_medprice ( $high , $low ):array
trader_mfi ( $high , $low , $close , $volume [, int $timePeriod ] ):array
trader_midpoint ( $real [, int $timePeriod ] ):array
trader_midprice ( $high , $low [, int $timePeriod ] ):array
trader_min ( $real [, int $timePeriod ] ):array
trader_minindex ( $real [, int $timePeriod ] ):array
trader_minmax ( $real [, int $timePeriod ] ):array
trader_minmaxindex ( $real [, int $timePeriod ] ):array
trader_minus_di ( $high , $low , $close [, int $timePeriod ] ):array
trader_minus_dm ( $high , $low [, int $timePeriod ] ):array
trader_mom ( $real [, int $timePeriod ] ):array
trader_mult ( $real0 , $real1 ):array | Calculates the vector dot product of real0 with real1 and returns the resulting vector. 
trader_natr ( $high , $low , $close [, int $timePeriod ] ):array
trader_obv ( $real , $volume ):array
trader_plus_di ( $high , $low , $close [, int $timePeriod ] ):array
trader_plus_dm ( $high , $low [, int $timePeriod ] ):array
trader_ppo ( $real [, int $fastPeriod [, int $slowPeriod [, int $mAType ]]] ):array
trader_roc ( $real [, int $timePeriod ] ):array
trader_rocp ( $real [, int $timePeriod ] ):array
trader_rocr100 ( $real [, int $timePeriod ] ):array
trader_rocr ( $real [, int $timePeriod ] ):array
trader_rsi ( $real [, int $timePeriod ] ):array
trader_sar ( $high , $low [, float $acceleration [, float $maximum ]] ):array
trader_sarext ( $high , $low [, float $startValue [, float $offsetOnReverse [, float $accelerationInitLong [, float $accelerationLong [, float $accelerationMaxLong [, float $accelerationInitShort [, float $accelerationShort [, float $accelerationMaxShort ]]]]]]]] ):array
trader_set_compat ( int $compatId ):void | Set compatibility mode which will affect the way calculations are done by all the extension functions. 
trader_set_unstable_period ( int $functionId , int $timePeriod ):void | Influences unstable period factor for functions, which are sensible to it. More information about unstable periods can be found on the ۠TA-Lib API documentation page. 
trader_sin ( $real ):array | Calculates the sine for each value in real and returns the resulting array. 
trader_sinh ( $real ):array | Calculates the hyperbolic sine for each value in real and returns the resulting array. 
trader_sma ( $real [, int $timePeriod ] ):array
trader_sqrt ( $real ):array | Calculates the square root of each value in real and returns the resulting array. 
trader_stddev ( $real [, int $timePeriod [, float $nbDev ]] ):array
trader_stoch ( $high , $low , $close [, int $fastK_Period [, int $slowK_Period [, int $slowK_MAType [, int $slowD_Period [, int $slowD_MAType ]]]]] ):array
trader_stochf ( $high , $low , $close [, int $fastK_Period [, int $fastD_Period [, int $fastD_MAType ]]] ):array
trader_stochrsi ( $real [, int $timePeriod [, int $fastK_Period [, int $fastD_Period [, int $fastD_MAType ]]]] ):array
trader_sub ( $real0 , $real1 ):array | Calculates the vector subtraction of real1 from real0 and returns the resulting vector. 
trader_sum ( $real [, int $timePeriod ] ):array
trader_t3 ( $real [, int $timePeriod [, float $vFactor ]] ):array
trader_tan ( $real ):array | Calculates the tangent for each value in real and returns the resulting array. 
trader_tanh ( $real ):array | Calculates the hyperbolic tangent for each value in real and returns the resulting array. 
trader_tema ( $real [, int $timePeriod ] ):array
trader_trange ( $high , $low , $close ):array
trader_trima ( $real [, int $timePeriod ] ):array
trader_trix ( $real [, int $timePeriod ] ):array
trader_tsf ( $real [, int $timePeriod ] ):array
trader_typprice ( $high , $low , $close ):array
trader_ultosc ( $high , $low , $close [, int $timePeriod1 [, int $timePeriod2 [, int $timePeriod3 ]]] ):array
trader_var ( $real [, int $timePeriod [, float $nbDev ]] ):array
trader_wclprice ( $high , $low , $close ):array
trader_willr ( $high , $low , $close [, int $timePeriod ] ):array
trader_wma ( $real [, int $timePeriod ] ):array
vpopmail_add_alias_domain_ex ( string $olddomain , string $newdomain ):bool
vpopmail_add_alias_domain ( string $domain , string $aliasdomain ):bool
vpopmail_add_domain_ex ( string $domain , string $passwd [, string $quota [, string $bounce [, $apop ]]] ):bool
vpopmail_add_domain ( string $domain , string $dir , int $uid , int $gid ):bool
vpopmail_add_user ( string $user , string $domain , string $password [, string $gecos [, $apop ]] ):bool
vpopmail_alias_add ( string $user , string $domain , string $alias ):bool
vpopmail_alias_del_domain ( string $domain ):bool
vpopmail_alias_del ( string $user , string $domain ):bool
vpopmail_alias_get_all ( string $domain ):array
vpopmail_alias_get ( string $alias , string $domain ):array
vpopmail_auth_user ( string $user , string $domain , string $password [, string $apop ] ):bool
vpopmail_del_domain_ex ( string $domain ):bool
vpopmail_del_domain ( string $domain ):bool
vpopmail_del_user ( string $user , string $domain ):bool
vpopmail_error ( void ):string
vpopmail_passwd ( string $user , string $domain , string $password [, $apop ] ):bool
vpopmail_set_user_quota ( string $user , string $domain , string $quota ):bool
win32_ps_list_procs ( void ):array | Retrieves statistics about all running processes. 
win32_ps_stat_mem ( void ):array | Retrieves statistics about the global memory utilization. 
win32_ps_stat_proc ([ int $pid = 0 ] ):array | Retrieves statistics about the process with the process id pid. 
win32_continue_service ( string $servicename [, string $machine ] ):int | Resumes a paused, named service. Requires administrative privileges or an account with appropriate rights set in the service's ACL. 
win32_create_service ( array $details [, string $machine ] ):mixed | Attempts to add a service into the SCM database. Administrative privileges are required for this to succeed. 
win32_delete_service ( string $servicename [, string $machine ] ):mixed
win32_get_last_control_message ( void ):int
win32_pause_service ( string $servicename [, string $machine ] ):int | Pauses a named service. Requires administrative privileges or an account with appropriate rights set in the service's ACL. 
win32_query_service_status ( string $servicename [, string $machine ] ):mixed | Queries the current status for a service, returning an array of information. 
win32_set_service_status ( int $status [, int $checkpoint = 0 ] ):bool
win32_start_service_ctrl_dispatcher ( string $name ):mixed
win32_start_service ( string $servicename [, string $machine ] ):int | Attempts to start the named service. Requires administrative privileges or an account with appropriate rights set in the service's ACL. 
win32_stop_service ( string $servicename [, string $machine ] ):int | Stops a named service. Requires administrative privileges or an account with appropriate rights set in the service's ACL. 
wincache_fcache_fileinfo ([ bool $summaryonly = FALSE ] ):array | Retrieves information about file cache content and its usage. 
wincache_fcache_meminfo ( void ):array | Retrieves information about memory usage by file cache. 
wincache_lock ( string $key [, $isglobal = FALSE ] ):bool
wincache_ocache_fileinfo ([ bool $summaryonly = FALSE ] ):array
wincache_ocache_meminfo ( void ):array | Retrieves information about memory usage by opcode cache. 
wincache_refresh_if_changed ([ array $files = NULL ] ):bool | Refreshes the cache entries for the files, whose names were passed in the input argument. If no argument is specified then refreshes all the entries in the cache. 
wincache_rplist_fileinfo ([ bool $summaryonly = FALSE ] ):array | Retrieves information about cached mappings between relative file paths and corresponding absolute file paths. 
wincache_rplist_meminfo ( void ):array | Retrieves information about memory usage by resolve file path cache. 
wincache_scache_info ([ bool $summaryonly = FALSE ] ):array | Retrieves information about session cache content and its usage. 
wincache_scache_meminfo ( void ):array | Retrieves information about memory usage by session cache. 
wincache_ucache_add ( string $key , mixed $value [, int $ttl = 0 ] ):bool
wincache_ucache_cas ( string $key , int $old_value , int $new_value ):bool | Compares the variable associated with the key with old_value and if it matches then assigns the new_value to it. 
wincache_ucache_clear ( void ):bool | Clears/deletes all the values stored in the user cache. 
wincache_ucache_dec ( string $key [, int $dec_by = 1 [, bool &$success ]] ):mixed | Decrements the value associated with the key by 1 or as specified by dec_by. 
wincache_ucache_delete ( mixed $key ):bool | Deletes the elements in the user cache pointed by key. 
wincache_ucache_exists ( string $key ):bool | Checks if a variable with the key exists in the user cache or not. 
wincache_ucache_get ( $key [, bool &$success ] ):mixed | Gets a variable stored in the user cache. 
wincache_ucache_inc ( string $key [, int $inc_by = 1 [, bool &$success ]] ):mixed | Increments the value associated with the key by 1 or as specified by inc_by. 
wincache_ucache_info ([ bool $summaryonly = FALSE [, string $key = NULL ]] ):array | Retrieves information about data stored in the user cache. 
wincache_ucache_meminfo ( void ):array | Retrieves information about memory usage by user cache. 
wincache_ucache_set ( mixed $key , mixed $value [, int $ttl = 0 ] ):bool
wincache_unlock ( string $key ):bool
xattr_get ( $filename , $name [, int $flags = 0 ] ):string
xattr_list ( string $filename [, int $flags = 0 ] ):array
xattr_remove ( string $filename , string $name [, int $flags = 0 ] ):bool
xattr_set ( string $filename , string $name , string $value [, int $flags = 0 ] ):bool
xattr_supported ( string $filename [, int $flags = 0 ] ):bool | This functions checks if the filesystem holding the given file supports extended attributes. Read access to the file is required. 
xdiff_file_bdiff_size ( string $file ):int | Returns a size of a result file that would be created after applying binary patch from file file to the original file. 
xdiff_file_bdiff ( string $old_file , string $new_file , string $dest ):bool | Makes a binary diff of two files and stores the result in a patch file. This function works with both text and binary files. Resulting patch file can be later applied using xdiff_file_bpatch()/xdiff_string_bpatch(). 
xdiff_file_bpatch ( string $file , string $patch , string $dest ):bool | Patches a file with a binary patch and stores the result in a file dest. This function accepts patches created both via xdiff_file_bdiff() and xdiff_file_rabdiff() functions or their string counterparts. 
xdiff_file_diff_binary(->) xdiff_file_diff_binary ( string $old_file , string $new_file , string $dest ):bool
xdiff_file_diff ( string $old_file , string $new_file , string $dest [, int $context = 3 [, $minimal = FALSE ]] ):bool | Makes an unified diff containing differences between old_file and new_file and stores it in dest file. The resulting file is human-readable. An optional context parameter specifies how many lines of context should be added around each change. Setting minimal parameter to true will result in outputting the shortest patch file possible (can take a long time). 
xdiff_file_merge3 ( string $old_file , string $new_file1 , string $new_file2 , string $dest ):mixed | Merges three files into one and stores the result in a file dest. The old_file is an original version while new_file1 and new_file2 are modified versions of an original. 
xdiff_file_patch_binary(->) xdiff_file_patch_binary ( string $file , string $patch , string $dest ):bool
xdiff_file_patch ( string $file , string $patch , string $dest [, int $flags = DIFF_PATCH_NORMAL ] ):mixed | Patches a file with a patch and stores the result in a file. patch has to be an unified diff created by xdiff_file_diff()/xdiff_string_diff() function. An optional flags parameter specifies mode of operation. 
xdiff_file_rabdiff ( string $old_file , string $new_file , string $dest ):bool
xdiff_string_bdiff_size ( string $patch ):int | Returns a size of a result file that would be created after applying binary patch to the original file. 
xdiff_string_bdiff ( $old_data , $new_data ):string | Makes a binary diff of two strings and returns the result. This function works with both text and binary data. Resulting patch can be later applied using xdiff_string_bpatch()/xdiff_file_bpatch(). 
xdiff_string_bpatch ( $str , $patch ):string | Patches a string str with a binary patch. This function accepts patches created both via xdiff_string_bdiff() and xdiff_string_rabdiff() functions or their file counterparts. 
xdiff_string_diff_binary(->) xdiff_string_bdiff ( $old_data , $new_data ):string
xdiff_string_diff ( $old_data , $new_data [, int $context = 3 [, bool $minimal = FALSE ]] ):string | Makes an unified diff containing differences between old_data string and new_data string and returns it. The resulting diff is human-readable. An optional context parameter specifies how many lines of context should be added around each change. Setting minimal parameter to true will result in outputting the shortest patch file possible (can take a long time). 
xdiff_string_merge3 ( string $old_data , string $new_data1 , string $new_data2 [, string &$error ] ):mixed | Merges three strings into one and returns the result. The old_data is an original version of data while new_data1 and new_data2 are modified versions of an original. An optional error is used to pass any rejected parts during merging process. 
xdiff_string_patch_binary(->) xdiff_string_patch_binary ( $str , $patch ):string
xdiff_string_patch ( $str , $patch [, int $flags [, &$error ]] ):string | Patches a str string with an unified patch in patch parameter and returns the result. patch has to be an unified diff created by xdiff_file_diff()/xdiff_string_diff() function. An optional flags parameter specifies mode of operation. Any rejected parts of the patch will be stored inside error variable if it is provided. 
xdiff_string_bdiff ( $old_data , $new_data ):string
xhprof_disable ( void ):array | Stops the profiler, and returns xhprof data from the run. 
xhprof_enable ([ int $flags = 0 [, array $options ]] ):void | Start xhprof profiling. 
xhprof_sample_disable ( void ):array | Stops the sample mode xhprof profiler, and 
xhprof_sample_enable ( ):void | Starts profiling in sample mode, which is a lighter weight version of xhprof_enable(). The sampling interval is 0.1 seconds, and samples record the full function call stack. The main use case is when lower overhead is required when doing performance monitoring and diagnostics. 
yaml_emit_file ( string $filename , mixed $data [, int $encoding = YAML_ANY_ENCODING [, int $linebreak = YAML_ANY_BREAK [, array $callbacks = NULL ]]] ):bool | Generate a YAML representation of the provided data in the filename. 
yaml_emit ( mixed $data [, int $encoding = YAML_ANY_ENCODING [, int $linebreak = YAML_ANY_BREAK [, array $callbacks = NULL ]]] ):string | Generate a YAML representation of the provided data. 
yaml_parse_file ( string $filename [, int $pos = 0 [, int &$ndocs [, array $callbacks = NULL ]]] ):mixed | Convert all or part of a YAML document stream read from a file to a PHP variable. 
yaml_parse_url ( string $url [, int $pos = 0 [, int &$ndocs [, array $callbacks = NULL ]]] ):mixed | Convert all or part of a YAML document stream read from a URL to a PHP variable. 
yaml_parse ( string $input [, int $pos = 0 [, int &$ndocs [, array $callbacks = NULL ]]] ):mixed | Convert all or part of a YAML document stream to a PHP variable. 
yaz_addinfo ( resource $id ):string |  Return additional info for last error (empty string if none)
yaz_ccl_conf ( resource $id , array $config ):void |  Configure CCL package
yaz_ccl_parse ( resource $id , string $query , array &$result ):bool |  Parse a CCL query
yaz_close ( resource $id ):bool |  Destory and close target
yaz_connect ( string $zurl [, $options ] ):mixed |  Create target with given zurl. Returns positive id if successful.
yaz_database ( resource $id , string $databases ):bool | This function allows you to change databases within a session by specifying one or more databases to be used in search, retrieval, etc. - overriding databases specified in call to yaz_connect(). 
yaz_element ( resource $id , string $elementset ):bool |  Set Element-Set-Name for retrieval
yaz_errno ( resource $id ):int |  Return last error number (>0 for bib-1 diagnostic, <0 for other error, 0 for no error
yaz_error ( resource $id ):string | returns an English text message corresponding to the last error number as returned by yaz_errno(). 
yaz_es_result ( resource $id ):array | This function inspects the last returned Extended Service result from a server. An Extended Service is initiated by either yaz_item_order() or yaz_es(). 
yaz_es ( resource $id , string $type , array $args ):void |  Sends Extended Services Request
yaz_get_option ( resource $id , $name ):string | Returns the value of the option specified with name. 
yaz_hits ( resource $id [, array &$searchresult ] ):int | returns the number of hits for the last search. 
yaz_itemorder ( resource $id , array $args ):void | This function prepares for an Extended Services request using the Profile for the Use of Z39.50 Item Order Extended Service to Transport ILL (Profile/1). See ۠this and the ۠specification. 
yaz_present ( resource $id ):bool |  Retrieve records
yaz_range ( resource $id , int $start , int $number ):void |  Set result set start point and number of records to request
yaz_record ( resource $id , int $pos , $type ):string | The function inspects a record in the current result set at the position specified by parameter pos. 
yaz_scan_result ( resource $id [, &$result ] ):array |  returns terms and associated information as received from the server in the last performed yaz_scan(). 
yaz_scan ( resource $id , string $type , string $startterm [, array $flags ] ):void |  Sends Scan Request
yaz_schema ( resource $id , string $schema ):void |  Set Schema for retrieval
yaz_search ( resource $id , string $type , string $query ):bool |  Specify query of type for search - returns true if successful
yaz_set_option ( resource $id , string $name , string $value ):void |  Set Option(s) for connection
yaz_sort ( resource $id , string $criteria ):void |  Set result set sorting criteria
yaz_syntax ( resource $id , string $syntax ):void |  Set record syntax for retrieval
yaz_wait ([ array &$options ] ):mixed |  Process events.
curl_close ( resource $ch ):void | Closes a cURL session and frees all resources. The cURL handle, ch, is also deleted. 
curl_copy_handle ( $ch ):resource | Copies a cURL handle keeping the same preferences. 
curl_errno ( resource $ch ):int | Returns the error number for the last cURL operation. 
curl_error ( resource $ch ):string | Returns a clear text error message for the last cURL operation. 
curl_escape ( resource $ch , $str ):string | This function URL encodes the given string according to RFC 3986. 
curl_exec ( resource $ch ):mixed |  Perform a CURL session
curl_file_create(->) function is an alias of: CURLFile::__construct() :This
curl_getinfo ( resource $ch [, int $opt ] ):mixed | Gets information about the last transfer. 
curl_init ([ string $url = NULL ] ):resource | Initializes a new session and return a cURL handle for use with the curl_setopt(), curl_exec(), and curl_close() functions. 
curl_multi_add_handle ( resource $mh , resource $ch ):int | Adds the ch handle to the multi handle mh 
curl_multi_close ( resource $mh ):void | Closes a set of cURL handles. 
curl_multi_errno ( resource $mh ):int | Return an integer containing the last multi curl error number. 
curl_multi_exec ( resource $mh , &$still_running ):int | Processes each of the handles in the stack. This method can be called whether or not a handle needs to read or write data. 
curl_multi_getcontent ( resource $ch ):string | If CURLOPT_RETURNTRANSFER is an option that is set for a specific handle, then this function will return the content of that cURL handle in the form of a string. 
curl_multi_info_read ( resource $mh [, int &$msgs_in_queue = NULL ] ):array |  Get information about the current transfers
curl_multi_init ( void ):resource | Allows the processing of multiple cURL handles asynchronously. 
curl_multi_remove_handle ( resource $mh , resource $ch ):int | Removes a given ch handle from the given mh handle. When the ch handle has been removed, it is again perfectly legal to run curl_exec() on this handle.
curl_multi_select ( resource $mh [, float $timeout = 1.0 ] ):int | Blocks until there is activity on any of the curl_multi connections. 
curl_multi_setopt ( resource $mh , int $option , mixed $value ):bool
curl_multi_strerror ( int $errornum ):string | Returns a text error message describing the given CURLM error code. 
curl_pause ( resource $ch , $bitmask ):int
curl_reset ( resource $ch ):void | This function re-initializes all options set on the given cURL handle to the default values. 
curl_setopt_array ( resource $ch , array $options ):bool | Sets multiple options for a cURL session. This function is useful for setting a large number of cURL options without repetitively calling curl_setopt(). 
curl_setopt ( resource $ch , int $option , mixed $value ):bool | Sets an option on the given cURL session handle. 
curl_share_close ( resource $sh ):void | Closes a cURL share handle and frees all resources. 
curl_share_errno ( resource $sh ):int | Return an integer containing the last share curl error number. 
curl_share_init ( void ):resource | Allows to share data between cURL handles. 
curl_share_setopt ( resource $sh , int $option , string $value ):bool | Sets an option on the given cURL share handle. 
curl_share_strerror ( int $errornum ):string | Returns a text error message describing the given error code. 
curl_strerror ( int $errornum ):string | Returns a text error message describing the given error code. 
curl_unescape ( resource $ch , $str ):string | This function decodes the given URL encoded string. 
curl_version ([ int $age = CURLVERSION_NOW ] ):array | Returns information about the cURL version. 
dbase_add_record ( resource $dbase_identifier , array $record ):bool | Adds the given data to the database. 
dbase_close ( resource $dbase_identifier ):bool | Closes the given database link identifier. 
dbase_create ( string $filename , array $fields [, int $type = DBASE_TYPE_DBASE ] ):resource |  Creates a new dBase-format database file
dbase_delete_record ( resource $dbase_identifier , int $record_number ):bool |  Marks a record to be deleted
dbase_get_header_info ( resource $dbase_identifier ):array | Returns information on the column structure of the given database link identifier. 
dbase_get_record_with_names ( resource $dbase_identifier , int $record_number ):array | Gets a record from a dBase database as an associative array. 
dbase_get_record ( resource $dbase_identifier , int $record_number ):array | Gets a record from a database as an indexed array. 
dbase_numfields ( resource $dbase_identifier ):int |  Returns the number of fields (columns) in the database
dbase_numrecords ( resource $dbase_identifier ):int |  Returns the number of records in the database
dbase_open ( string $filename , int $mode ):resource |  Opens a dBase-format database file
dbase_pack ( resource $dbase_identifier ):bool | Packs the specified database by permanently deleting all records marked for deletion using dbase_delete_record().
dbase_replace_record ( resource $dbase_identifier , array $record , int $record_number ):bool | Replaces the given record in the database with the given data. 
dom_import_simplexml ( SimpleXMLElement $node ):DOMElement | This function takes the node node of class SimpleXML and makes it into a DOMElement node.
enchant_broker_describe ( resource $broker ):array | Enumerates the Enchant providers and tells you some rudimentary information about them. The same info is provided through phpinfo(). 
enchant_broker_dict_exists ( resource $broker , string $tag ):bool | Tells if a dictionary exists or not, using a non-empty tags 
enchant_broker_free_dict ( resource $dict ):bool | Free a dictionary resource. 
enchant_broker_free ( resource $broker ):bool | Free a broker resource with all its dictionaries. 
enchant_broker_get_dict_path ( resource $broker , int $dict_type ):bool | Get the directory path for a given backend. 
enchant_broker_get_error ( resource $broker ):string | Returns the last error which occurred in this broker. 
enchant_broker_init ( void ):resource
enchant_broker_list_dicts ( resource $broker ):mixed | Returns a list of available dictionaries with their details. 
enchant_broker_request_dict ( $broker , string $tag ):resource | create a new dictionary using tag, the non-empty language tag you wish to request a dictionary for ("en_US", "de_DE", ...) 
enchant_broker_request_pwl_dict ( $broker , string $filename ):resource | Creates a dictionary using a PWL file. A PWL file is personal word file one word per line. 
enchant_broker_set_dict_path ( resource $broker , int $dict_type , string $value ):bool | Set the directory path for a given backend. 
enchant_broker_set_ordering ( resource $broker , string $tag , string $ordering ):bool | Declares a preference of dictionaries to use for the language described/referred to by 'tag'. (Comma delimited Taglist) 
enchant_dict_add_to_personal ( resource $dict , string $word ):void | Add a word to personal word list of the given dictionary. 
enchant_dict_add_to_session ( resource $dict , string $word ):void | Add a word to the given dictionary. It will be added only for the active spell-checking session. 
enchant_dict_check ( resource $dict , string $word ):bool | If the word is correctly spelled return TRUE, otherwise return FALSE 
enchant_dict_describe ( resource $dict ):mixed | Returns the details of the dictionary. 
enchant_dict_get_error ( resource $dict ):string | Returns the last error of the current spelling-session 
enchant_dict_is_in_session ( resource $dict , string $word ):bool | Tells whether or not a word already exists in the current session. 
enchant_dict_quick_check ( resource $dict , string $word [, array &$suggestions ] ):bool | If the word is correctly spelled return TRUE, otherwise return FALSE, if suggestions variable is provided, fill it with spelling alternatives. 
enchant_dict_store_replacement ( resource $dict , string $mis , string $cor ):void | Add a correction for 'mis' using 'cor'. 
enchant_dict_suggest ( resource $dict , string $word ):array
fbsql_affected_rows ([ resource $link_identifier ] ):int |  Get the number of rows affected by the last statement
fbsql_autocommit ( resource $link_identifier [, $OnOff ] ):bool | Returns the current autocommit status. 
fbsql_blob_size ( string $blob_handle [, resource $link_identifier ] ):int | Returns the size of the given BLOB. 
fbsql_change_user ( string $user , string $password [, string $database [, resource $link_identifier ]] ):bool |  changes the logged in user of the specified connection. If the new user and password authorization fails, the current connected user stays active. 
fbsql_clob_size ( string $clob_handle [, resource $link_identifier ] ):int | Returns the size of the given CLOB. 
fbsql_close ([ resource $link_identifier ] ):bool |  Close a connection to a database server
fbsql_commit ([ resource $link_identifier ] ):bool | Ends the current transaction by writing all inserts, updates and deletes to the disk and unlocking all row and table locks held by the transaction. This command is only needed if autocommit is set to false. 
fbsql_connect ([ string $hostname = ini_get("fbsql.default_host") [, string $username = ini_get("fbsql.default_user") [, string $password = ini_get("fbsql.default_password") ]]] ):resource |  Create a connection to a database server
fbsql_create_blob ( $blob_data [, resource $link_identifier ] ):string | Creates a BLOB from the given data. 
fbsql_create_clob ( $clob_data [, resource $link_identifier ] ):string | Creates a CLOB from the given data. 
fbsql_create_db ( string $database_name [, resource $link_identifier [, string $database_options ]] ):bool | Attempts to create a new database on the specified server. 
fbsql_data_seek ( resource $result , int $row_number ):bool |  Move the internal row counter to the specified row_number
fbsql_database_password ( resource $link_identifier [, $database_password ] ):string |  Get or set the databsae password used with a connection
fbsql_database ( resource $link_identifier [, $database ] ):string | Get or set the database name used with the connection. 
fbsql_db_query ( string $database , string $query [, $link_identifier ] ):resource | Selects a database and executes a query on it. 
fbsql_db_status ( string $database_name [, resource $link_identifier ] ):int | Gets the current status of the specified database. 
fbsql_drop_db ( string $database_name [, resource $link_identifier ] ):bool | attempts to drop (remove) an entire database from the server associated with the specified link identifier. 
fbsql_errno ([ resource $link_identifier ] ):int |  Returns the last error code
fbsql_error ([ resource $link_identifier ] ):string |  Returns the last error string
fbsql_fetch_( resource $result [, int $result_type ] ):array |  Fetches a result row as an array (associative, numeric or both)
fbsql_fetch_assoc ( resource $result ):array |  Detch a row of data. Returns an assoc array
fbsql_fetch_field ( resource $result [, int $field_offset ] ):object | Used in order to obtain information about fields in a certain query result. 
fbsql_fetch_lengths ( resource $result ):array | Stores the lengths of each result column in the last row returned by fbsql_fetch_row(), fbsql_fetch_array() and fbsql_fetch_object() in an array. 
fbsql_fetch_( resource $result ):object |  Fetch a row of data. Returns an object
fbsql_fetch_row ( resource $result ):array |  Fetch a row of data. Returns an indexed array
fbsql_field_flags ( resource $result [, int $field_offset ] ):string | Gets the flags associated with the specified field in a result. 
fbsql_field_len ( resource $result [, $field_offset ] ):int | Returns the length of the specified field. 
fbsql_field_name ( resource $result [, int $field_index ] ):string | Returns the name of the specified field index. 
fbsql_field_seek ( resource $result [, int $field_offset ] ):bool | Seeks to the specified field offset. If the next call to fbsql_fetch_field() doesn't include a field offset, the field offset specified in fbsql_field_seek() will be returned. 
fbsql_field_table ( resource $result [, int $field_offset ] ):string | Returns the name of the table that the specified field is in. 
fbsql_field_type ( resource $result [, int $field_offset ] ):string | is similar to the fbsql_field_name() function, but the field type is returned instead. 
fbsql_free_result ( resource $result ):bool |  free the memory used to store a result
fbsql_get_autostart_info ([ resource $link_identifier ] ):array
fbsql_hostname ( resource $link_identifier [, $host_name ] ):string | Gets or sets the host name used with a connection. 
fbsql_insert_id ([ resource $link_identifier ] ):int |  Get the internal index for the last insert statement
fbsql_list_dbs ([ $link_identifier ] ):resource | Return a result pointer containing the databases available from the current fbsql daemon. Use the fbsql_tablename() to traverse this result pointer. 
fbsql_list_fields ( string $database_name , string $table_name [, $link_identifier ] ):resource | Retrieves information about the given table. 
fbsql_list_tables ( string $database [, $link_identifier ] ):resource | Returns a result pointer describing the database. 
fbsql_next_result ( resource $result ):bool | This function will test for additional results available form the server. 
fbsql_num_fields ( resource $result ):int | Returns the number of fields in the given result set. 
fbsql_num_rows ( resource $result ):int |  Get number of rows
fbsql_password ( resource $link_identifier [, $password ] ):string | Get or set the user password used with a connection. 
fbsql_pconnect ([ string $hostname = ini_get("fbsql.default_host") [, string $username = ini_get("fbsql.default_user") [, string $password = ini_get("fbsql.default_password") ]]] ):resource |  Create a persistant connection to a database server
fbsql_query ( string $query [, $link_identifier [, int $batch_size ]] ):resource |  Send one or more SQL statements to the server and execute them
fbsql_read_blob ( $blob_handle [, resource $link_identifier ] ):string |  Read the BLOB data identified by blob_handle
fbsql_read_clob ( $clob_handle [, resource $link_identifier ] ):string |  Read the CLOB data identified by clob_handle
fbsql_result ( resource $result [, int $row [, $field ]] ):mixed
fbsql_rollback ([ resource $link_identifier ] ):bool |  Rollback all statments since last commit
fbsql_rows_fetched ( resource $result ):int | Gets the number of rows affected by the last statement. 
fbsql_select_db ([ string $database_name [, resource $link_identifier ]] ):bool |  Select the database to open
fbsql_set_characterset ( resource $link_identifier , int $characterset [, int $in_out_both ] ):void
fbsql_set_lob_mode ( resource $result , int $lob_mode ):bool |  Sets the mode for how LOB data re retreived (actual data or a handle)
fbsql_set_password ( resource $link_identifier , string $user , string $password , string $old_password ):bool | Changes the password for the given user. 
fbsql_set_transaction ( resource $link_identifier , int $locking , int $isolation ):void | Sets the transaction locking and isolation. 
fbsql_start_db ( string $database_name [, resource $link_identifier [, string $database_options ]] ):bool | Start a database on local or remote server. 
fbsql_stop_db ( string $database_name [, resource $link_identifier ] ):bool | Stops a database on local or remote server. 
fbsql_table_name ( resource $result , int $index ):string |  Retreive the table name for index after a call to fbsql_list_tables()
fbsql_tablename(->) function is an alias of: fbsql_table_name(). :This
fbsql_username ( resource $link_identifier [, $username ] ):string | Get or set the username used for the connection. 
fbsql_warnings ([ $OnOff ] ):bool | Enables or disables FrontBase warnings. 
bind_textdomain_codeset ( $domain , $codeset ):string | you can set in which encoding will be messages from domain returned by gettext() and similar functions. 
bindtextdomain ( $domain , $directory ):string | sets the path for a domain. 
dcgettext ( $domain , $message , int $category ):string | This function allows you to override the current domain for a single message lookup. 
dcngettext ( $domain , $msgid1 , $msgid2 , int $n , int $category ):string | This function allows you to override the current domain for a single plural message lookup. 
dgettext ( $domain , $message ):string | allows you to override the current domain for a single message lookup. 
dngettext ( $domain , $msgid1 , $msgid2 , int $n ):string | function allows you to override the current domain for a single plural message lookup. 
gettext ( $message ):string | Looks up a message in the current domain. 
ngettext ( $msgid1 , $msgid2 , int $n ):string | The plural version of gettext(). Some languages have more than one form for plural messages dependent on the count. 
textdomain ( $text_domain = NULL ):string | This function sets the domain to search within when calls are made to gettext(), usually the named after an application. 
gmp_abs ( $a ):GMP | Get the absolute value of a number. 
gmp_add ( $a , $b ):GMP | Add two numbers. 
gmp_and ( $a , $b ):GMP | Calculates bitwise AND of two GMP numbers. 
gmp_binomial ( mixed $n , int $k ):GMP | Calculates the binomial coefficient C(n, k). 
gmp_clrbit ( GMP $a , int $index ):void | Clears (sets to 0) bit index in a. The index starts at 0. 
gmp_cmp ( GMP $a , GMP $b ):int | Compares two numbers. 
gmp_com ( $a ):GMP | Returns the one's complement of a. 
gmp_div_q ( $a , $b [, int $round = GMP_ROUND_ZERO ] ):GMP | Divides a by b and returns the integer result. 
gmp_div_qr ( GMP $n , GMP $d [, int $round = GMP_ROUND_ZERO ] ):array | The function divides n by d. 
gmp_div_r ( $n , $d [, int $round = GMP_ROUND_ZERO ] ):GMP | Calculates remainder of the integer division of n by d. The remainder has the sign of the n argument, if not zero. 
gmp_div(->) function is an alias of: gmp_div_q(). :This
gmp_divexact ( $n , $d ):GMP | Divides n by d, using fast "exact division" algorithm. This function produces correct results only when it is known in advance that d divides n. 
gmp_export ( GMP $gmpnumber [, int $word_size = 1 [, int $options = GMP_MSW_FIRST | GMP_NATIVE_ENDIAN ]] ):string | Export a GMP number to a binary string 
gmp_fact ( mixed $a ):GMP | Calculates factorial (a!) of a. 
gmp_gcd ( $a , $b ):GMP | Calculate greatest common divisor of a and b. The result is always positive even if either of, or both, input operands are negative. 
gmp_gcdext ( GMP $a , GMP $b ):array |  Computes G, S, and T, such that AS |  |  | BT = G = `gcd' (A, B)
gmp_hamdist ( GMP $a , GMP $b ):int | Returns the hamming distance between a and b. Both operands should be non-negative. 
gmp_import ( string $data [, int $word_size = 1 [, int $options = GMP_MSW_FIRST | GMP_NATIVE_ENDIAN ]] ):GMP | Import a GMP number from a binary string 
gmp_init ( mixed $number [, int $base = 0 ] ):GMP | Creates a GMP number from an integer or string. 
gmp_intval ( GMP $gmpnumber ):int | This function converts GMP number into native PHP integers. 
gmp_invert ( $a , $b ):GMP | Computes the inverse of a modulo b. 
gmp_jacobi ( GMP $a , GMP $p ):int | Computes ۠Jacobi symbol of a and p. p should be odd and must be positive. 
gmp_legendre ( GMP $a , GMP $p ):int | Compute the ۠| Legendre symbol of a and p. p should be odd and must be positive. 
gmp_mod ( $n , $d ):GMP | Calculates n modulo d. The result is always non-negative, the sign of d is ignored. 
gmp_mul ( $a , $b ):GMP | Multiplies a by b and returns the result. 
gmp_neg ( $a ):GMP | Returns the negative value of a number. 
gmp_nextprime ( int $a ):GMP | Find next prime number 
gmp_or ( $a , $b ):GMP | Calculates bitwise inclusive OR of two GMP numbers. 
gmp_perfect_square ( GMP $a ):bool | Check if a number is a perfect square. 
gmp_popcount ( GMP $a ):int | Get the population count. 
gmp_pow ( $base , int $exp ):GMP | Raise base into power exp. 
gmp_powm ( $base , $exp , $mod ):GMP | Calculate (base raised into power exp) modulo mod. If exp is negative, result is undefined. 
gmp_prob_prime ( GMP $a [, $reps = 10 ] ):int | The function uses Miller-Rabin's probabilistic test to check if a number is a prime. 
gmp_random_bits ( int $bits ):GMP
gmp_random_range ( $min , $max ):GMP
gmp_random_seed ( mixed $seed ):void
gmp_random ([ int $limiter = 20 ] ):GMP |  Gets random number
gmp_root ( $a , int $nth ):GMP | Takes the nth root of a and returns the integer component of the result. 
gmp_rootrem ( GMP $a , int $nth ):array | Takes the nth root of a and returns the integer component and remainder of the result. 
gmp_scan0 ( GMP $a , $start ):int | Scans a, starting with bit start, towards more significant bits, until the first clear bit is found. 
gmp_scan1 ( GMP $a , $start ):int | Scans a, starting with bit start, towards more significant bits, until the first set bit is found. 
gmp_setbit ( GMP $a , int $index [, bool $bit_on = TRUE ] ):void | Sets bit index in a. 
gmp_sign ( GMP $a ):int | Checks the sign of a number. 
gmp_sqrt ( $a ):GMP | Calculates square root of a. 
gmp_sqrtrem ( GMP $a ):array | Calculate the square root of a number, with remainder. 
gmp_strval ( GMP $gmpnumber [, int $base = 10 ] ):string | Convert GMP number to string representation in base base. The default base is 10. 
gmp_sub ( $a , $b ):GMP | Subtracts b from a and returns the result. 
gmp_testbit ( GMP $a , int $index ):bool | Tests if the specified bit is set. 
gmp_xor ( $a , $b ):GMP | Calculates bitwise exclusive OR (XOR) of two GMP numbers. 
ibase_add_user ( resource $service_handle , string $user_name , string $password [, string $first_name [, string $middle_name [, string $last_name ]]] ):bool |  Add an user to security database (only for IB6 or later)
ibase_affected_rows ([ resource $link_identifier ] ):int | This function returns the number of rows that were affected by the previous query.
ibase_backup ( resource $service_handle , string $source_db , string $dest_file [, int $options = 0 [, bool $verbose = FALSE ]] ):mixed
ibase_blob_add ( resource $blob_handle , string $data ):void | adds data into a blob created with ibase_blob_create(). 
ibase_blob_cancel ( resource $blob_handle ):bool | This function will discard a BLOB if it has not yet been closed by ibase_blob_close(). 
ibase_blob_close ( resource $blob_handle ):mixed | This function closes a BLOB that has either been opened for reading by ibase_blob_open() or has been opened for writing by ibase_blob_create(). 
ibase_blob_create ([ $link_identifier = NULL ] ):resource | creates a new BLOB for filling with data. 
ibase_blob_echo ( string $blob_id ):bool |  Output blob contents to browser
ibase_blob_get ( resource $blob_handle , int $len ):string |  Get len bytes data from open blob
ibase_blob_import ( resource $link_identifier , resource $file_handle ):string |  Create blob, copy file in it, and close it
ibase_blob_info ( resource $link_identifier , string $blob_id ):array |  Return blob length and other useful info
ibase_blob_open ( $link_identifier , string $blob_id ):resource |  Open blob for retrieving data parts
ibase_close ([ resource $connection_id = NULL ] ):bool | Closes the link to an InterBase database.
ibase_commit_ret ([ resource $link_or_trans_identifier = NULL ] ):bool | Commits a transaction without closing it. 
ibase_commit ([ resource $link_or_trans_identifier = NULL ] ):bool | Commits a transaction. 
ibase_connect ([ string $database [, string $username [, string $password [, string $charset [, int $buffers [, int $dialect [, string $role [, int $sync ]]]]]]]] ):resource |  Open a connection to an InterBase database
ibase_db_info ( resource $service_handle , $db , int $action [, int $argument = 0 ] ):string
ibase_delete_user ( resource $service_handle , string $user_name ):bool |  Delete an user from security database (only for IB6 or later)
ibase_drop_db ([ resource $connection = NULL ] ):bool | This functions drops a database that was opened by either ibase_connect() or ibase_pconnect(). The database is closed and deleted from the server. 
ibase_errcode ( void ):int | Returns the error code that resulted from the most recent InterBase function call. 
ibase_errmsg ( void ):string | Returns the error message that resulted from the most recent InterBase function call. 
ibase_execute ( $query [, mixed $bind_arg [, mixed $... ]] ):resource |  Execute a previously prepared query
ibase_fetch_assoc ( resource $result [, int $fetch_flag = 0 ] ):array |  Fetch a row | from the results of a query
ibase_fetch_( resource $result_id [, int $fetch_flag = 0 ] ):object |  Fetch a object from the results of a query
ibase_fetch_row ( resource $result_identifier [, int $fetch_flag = 0 ] ):array |  Fetch a row | from the results of a query
ibase_field_info ( resource $result , int $field_number ):array | Returns an array with information about a field after a select query has been run. 
ibase_free_event_handler ( resource $event ):bool | This function causes the registered event handler specified by event to be cancelled. The callback function will no longer be called for the events it was registered to handle. 
ibase_free_query ( resource $query ):bool | Frees a prepared query. 
ibase_free_result ( resource $result_identifier ):bool | Frees a result set. 
ibase_gen_id ( string $generator [, int $increment = 1 [, resource $link_identifier = NULL ]] ):mixed |  Increments the named generator and returns its new value
ibase_maintain_db ( resource $service_handle , string $db , int $action [, int $argument = 0 ] ):bool
ibase_modify_user ( resource $service_handle , string $user_name , string $password [, string $first_name [, string $middle_name [, string $last_name ]]] ):bool |  Modify an user in security database (only for IB6 or later)
ibase_name_result ( resource $result , string $name ):bool | This function assigns a name to a result set. This name can be used later in UPDATE|DELETE ... WHERE CURRENT OF name statements. 
ibase_num_fields ( resource $result_id ):int | Get the number of fields in a result set. 
ibase_num_params ( resource $query ):int | This function returns the number of parameters in the prepared query specified by query. This is the number of binding arguments that must be present when calling ibase_execute(). 
ibase_param_info ( resource $query , int $param_number ):array | Returns an array with information about a parameter after a query has been prepared. 
ibase_pconnect ([ string $database [, string $username [, string $password [, string $charset [, int $buffers [, int $dialect [, string $role [, int $sync ]]]]]]]] ):resource |  Open a persistent connection to an InterBase database
ibase_prepare ( string $query ):resource |  Prepare a query for later execution
ibase_query ([ $link_identifier ], string $query [, int $bind_args ] ):resource | Performs a query on an InterBase database. 
ibase_restore ( resource $service_handle , string $source_file , string $dest_db [, int $options = 0 [, bool $verbose = FALSE ]] ):mixed
ibase_rollback_ret ([ resource $link_or_trans_identifier = NULL ] ):bool | Rolls back a transaction without closing it. 
ibase_rollback ([ resource $link_or_trans_identifier = NULL ] ):bool | Rolls back a transaction. 
ibase_server_info ( resource $service_handle , int $action ):string
ibase_service_attach ( string $host , string $dba_username , string $dba_password ):resource
ibase_service_detach ( resource $service_handle ):bool
ibase_set_event_handler ( callable $event_handler , string $event_name1 [, string $event_name2 [, string $... ]] ):resource |  Register the callback for handling each of the named events
ibase_trans ([ int $trans_args [, $link_identifier ]] ):resource |  Start a transaction over one or several databases
ibase_wait_event ( $event_name1 [, $event_name2 [, $... ]] ):string |  Waits for any one of the passed Interbase events to be posted by the database, and returns its name
ifx_affected_rows ( resource $result_id ):int |  Returns the number of rows affected by query identified by resultid
ifx_blobinfile_mode ( int $mode ):bool | Set the default blob mode for all select queries. 
ifx_byteasvarchar ( int $mode ):bool | Sets the default byte mode for all select-queries. 
ifx_close ([ resource $link_identifier ] ):bool |  Close informix connection
ifx_connect ([ string $database [, string $userid [, string $password ]]] ):resource |  Connects to database using userid/password, returns connection id
ifx_copy_blob ( $bid ):int | Duplicates the given blob object. 
ifx_create_blob ( $type , $mode , string $param ):int | Creates a blob object. 
ifx_create_char ( string $param ):int | Creates an char object. 
ifx_do ( resource $result_id ):bool |  Executes a previously prepared query or opens a cursor for it
ifx_error ([ resource $link_identifier ] ):string | Returns in a string one character describing the general results of a statement and both SQLSTATE and SQLCODE associated with the most recent SQL statement executed. 
ifx_errormsg ([ int $errorcode ] ):string | Returns the Informix error message associated with the most recent Informix error. 
ifx_fetch_row ( resource $result_id [, mixed $position ] ):array |  Fetches the next row or <position> row if using a scroll cursor
ifx_fieldproperties ( resource $result_id ):array | Returns the Informix SQL fieldproperties of every field in the query as an associative array.
ifx_fieldtypes ( resource $result_id ):array | Returns an associative array with fieldnames as key and the SQL fieldtypes as data for the query associated with result_id. 
ifx_free_blob ( int $bid ):bool | Deletes the blobobject for the given blob object-id. 
ifx_free_char ( int $bid ):bool | Deletes the charobject for the given char object-id. 
ifx_free_result ( resource $result_id ):bool | Releases resources for the query associated with result_id. 
ifx_get_blob ( int $bid ):string | Returns the content of the blob object. 
ifx_get_char ( int $bid ):string | Returns the content of the char object. 
ifx_getsqlca ( resource $result_id ):array |  Returns the sqlerrd[] fields of the sqlca struct for query resultid
ifx_htmltbl_result ( resource $result_id [, string $html_table_options ] ):int | Formats and prints all rows of the result_id query into a HTML table. 
ifx_nullformat ( int $mode ):bool | Sets the default return value of a NULL-value on a fetch row. 
ifx_num_fields ( resource $result_id ):int | After preparing or executing a query, this call gives you the number of columns in the query. 
ifx_num_rows ( resource $result_id ):int | Gives the number of rows fetched so far for a query with result_id after a ifx_query() or ifx_do() query. 
ifx_pconnect ([ string $database [, string $userid [, string $password ]]] ):resource |  Connects to database using userid/password, returns connection id
ifx_prepare ( string $query , $link_identifier [, int $cursor_def ], mixed $blobidarray ):resource |  Prepare a query on a given connection
ifx_query ( string $query , $link_identifier [, int $cursor_type [, mixed $blobidarray ]] ):resource |  Perform a query on a given connection
ifx_textasvarchar ( int $mode ):bool | Sets the default text mode for all select-queries. 
ifx_update_blob ( int $bid , string $content ):bool | Updates the content of the blob object for the given blob object bid. 
ifx_update_char ( int $bid , string $content ):bool | Updates the content of the char object for the given char object bid. 
ifxus_close_slob ( int $bid ):bool | Deletes the slob object on the given slob object-id bid. 
ifxus_create_slob ( $mode ):int | Creates an slob object and opens it. 
ifxus_free_slob ( int $bid ):bool | Deletes the slob object. 
ifxus_open_slob ( $bid , $mode ):int | Opens an slob object. bid should be an existing slob id. 
ifxus_read_slob ( int $bid , int $nbytes ):string | Reads nbytes of the slob object. 
ifxus_seek_slob ( $bid , $mode , $offset ):int | Sets the current file or seek position of an open slob object. 
ifxus_tell_slob ( $bid ):int | Returns the current file or seek position of an open slob object 
ifxus_write_slob ( $bid , string $content ):int | Writes a string into the slob object. 
imap_8bit ( $):string | Convert an 8bit string to a quoted-printable string (according to RFC2045, section 6.7). 
imap_alerts ( void ):array |  Returns an array of all IMAP alerts that have been generated since the last page load or since the last imap_alerts() call, whichever came last. The alert stack is cleared after imap_alerts() is called.
imap_append ( resource $imap_stream , string $mailbox , string $message [, string $options = NULL [, string $internal_date = NULL ]] ):bool | Appends a string message to the specified mailbox. 
imap_base64 ( $text ):string | Decodes the given BASE-64 encoded text. 
imap_binary ( $):string | Convert an 8bit string to a base64 string according to ۠RFC2045, Section 6.8. 
imap_body ( resource $imap_stream , int $msg_number [, int $options = 0 ] ):string |  Read the message body
imap_bodystruct ( resource $imap_stream , int $msg_number , string $section ):object | Read the structure of a specified body section of a specific message. 
imap_check ( resource $imap_stream ):object | Checks information about the current mailbox. 
imap_clearflag_full ( resource $imap_stream , string $sequence , string $flag [, int $options = 0 ] ):bool | This function causes a store to delete the specified flag to the flags set for the messages in the specified sequence. 
imap_close ( resource $imap_stream [, int $flag = 0 ] ):bool | Closes the imap stream. 
imap_create(->) function is an alias of: imap_createmailbox(). :This
imap_createmailbox ( resource $imap_stream , string $mailbox ):bool | Creates a new mailbox specified by mailbox. 
imap_delete ( resource $imap_stream , int $msg_number [, int $options = 0 ] ):bool | Marks messages listed in msg_number for deletion. 
imap_deletemailbox ( resource $imap_stream , string $mailbox ):bool | Deletes the specified mailbox. 
imap_errors ( void ):array |  Returns an array of all IMAP errors generated since the last page load, or since the last imap_errors() call.
imap_expunge ( resource $imap_stream ):bool | Deletes all the messages marked for deletion by imap_delete(), imap_mail_move(), or imap_setflag_full(). 
imap_fetch_overview ( resource $imap_stream , string $sequence [, int $options = 0 ] ):array | This function fetches mail headers for the given sequence and returns an overview of their contents. 
imap_fetchbody ( resource $imap_stream , int $msg_number , $section [, int $options = 0 ] ):string | Fetch of a particular section of the body of the specified messages. Body parts are not decoded by this function. 
imap_fetchheader ( resource $imap_stream , int $msg_number [, int $options = 0 ] ):string | This function causes a fetch of the complete, unfiltered ۠RFC2822 format header of the specified message. 
imap_fetchmime ( resource $imap_stream , int $msg_number , $section [, int $options = 0 ] ):string | Fetch the MIME headers of a particular section of the body of the specified messages. 
imap_fetchstructure ( resource $imap_stream , int $msg_number [, int $options = 0 ] ):object | Fetches all the structured information for a given message. 
imap_fetchtext(->) function is an alias of: imap_body(). :This
imap_gc ( resource $imap_stream , int $caches ):bool | Purges the cache of entries of a specific type. 
imap_get_quota ( resource $imap_stream , string $quota_root ):array |  Returns the quota set to the mailbox account qroot
imap_get_quotaroot ( resource $imap_stream , string $quota_root ):array | Retrieve the quota settings per user. 
imap_getacl ( resource $imap_stream , string $mailbox ):array | Gets the ACL for a given mailbox. 
imap_getmailboxes ( resource $imap_stream , string $ref , string $pattern ):array | Gets information on the mailboxes. 
imap_getsubscribed ( resource $imap_stream , string $ref , string $pattern ):array |  Return a list of subscribed mailboxes, in the same format as imap_getmailboxes()
imap_header(->) function is an alias of: imap_headerinfo(). :This
imap_headerinfo ( resource $imap_stream , int $msg_number [, int $fromlength = 0 [, int $subjectlength = 0 [, string $defaulthost = NULL ]]] ):object | Gets information about the given message number by reading its headers. 
imap_headers ( resource $imap_stream ):array | Returns headers for all messages in a mailbox. 
imap_last_error ( void ):string | Gets the full text of the last IMAP error message that occurred on the current page. The error stack is untouched; calling imap_last_error() subsequently, with no intervening errors, will return the same error. 
imap_list ( resource $imap_stream , string $ref , string $pattern ):array | Read the list of mailboxes. 
imap_listmailbox(->) function is an alias of: imap_list(). :This
imap_listscan ( resource $imap_stream , string $ref , string $pattern , string $content ):array
imap_listsubscribed(->) function is an alias of: imap_lsub(). :This
imap_lsub ( resource $imap_stream , string $ref , string $pattern ):array | Gets an array of all the mailboxes that you have subscribed. 
imap_mail_compose ( array $envelope , array $body ):string | Create a MIME message based on the given envelope and body sections. 
imap_mail_copy ( resource $imap_stream , string $msglist , string $mailbox [, int $options = 0 ] ):bool | Copies mail messages specified by msglist to specified mailbox. 
imap_mail_move ( resource $imap_stream , string $msglist , string $mailbox [, int $options = 0 ] ):bool | Moves mail messages specified by msglist to the specified mailbox. 
imap_mail ( string $to , string $subject , string $message [, string $additional_headers = NULL [, string $cc = NULL [, string $bcc = NULL [, string $rpath = NULL ]]]] ):bool |  Send an email message
imap_mailboxmsginfo ( resource $imap_stream ):object | Checks the current mailbox status on the server. It is similar to imap_status(), but will additionally sum up the size of all messages in the mailbox, which will take some additional time to execute. 
imap_mime_header_decode ( string $text ):array | Decodes MIME message header extensions that are non ASCII text (see RFC2047). 
imap_msgno ( resource $imap_stream , $uid ):int |  Get the sequence number associated with a UID
imap_mutf7_to_utf8 ( $in ):string
imap_num_msg ( resource $imap_stream ):int | Gets the number of messages in the current mailbox. 
imap_num_recent ( resource $imap_stream ):int | Gets the number of recent messages in the current mailbox. 
imap_open ( string $mailbox , string $username , string $password [, int $options = 0 [, int $n_retries = 0 [, array $params = NULL ]]] ):resource |  Open an IMAP stream to a mailbox
imap_ping ( resource $imap_stream ):bool | pings the stream to see if it's still active. It may discover new mail; this is the preferred method for a periodic "new mail check" as well as a "keep alive" for servers which have inactivity timeout. 
imap_qprint ( $):string | Convert a quoted-printable string to an 8 bit string according to  RFC2045, section 6.7. 
imap_rename(->) function is an alias of: imap_renamemailbox(). :This
imap_renamemailbox ( resource $imap_stream , string $old_mbox , string $new_mbox ):bool | This function renames on old mailbox to new mailbox (see imap_open() for the format of mbox names). 
imap_reopen ( resource $imap_stream , string $mailbox [, int $options = 0 [, int $n_retries = 0 ]] ):bool | Reopens the specified stream to a new mailbox on an IMAP or NNTP server. 
imap_rfc822_parse_adrlist ( string $address , string $default_host ):array | Parses the address string as defined in RFC2822 and for each address. 
imap_rfc822_parse_headers ( string $headers [, string $defaulthost = "UNKNOWN" ] ):object | Gets an object of various header elements, similar to imap_header(). 
imap_rfc822_write_address ( $mailbox , $host , $personal ):string | Returns a properly formatted email address as defined in RFC2822 given the needed information. 
imap_savebody ( resource $imap_stream , mixed $file , int $msg_number [, string $part_number = "" [, int $options = 0 ]] ):bool | Saves a part or the whole body of the specified message. 
imap_scan(->) function is an alias of: imap_listscan(). :This |  Read list of mailboxes containing a certain string
imap_scanmailbox(->) function is an alias of: imap_listscan(). :This
imap_search ( resource $imap_stream , string $criteria [, int $options = SE_FREE [, string $charset = NULL ]] ):array |  Return a list of messages matching the given criteria
imap_set_quota ( resource $imap_stream , string $quota_root , int $quota_limit ):bool | Sets an upper limit quota on a per mailbox basis. 
imap_setacl ( resource $imap_stream , string $mailbox , string $id , string $rights ):bool | Sets the ACL for a giving mailbox. 
imap_setflag_full ( resource $imap_stream , string $sequence , string $flag [, int $options = NIL ] ):bool | Causes a store to add the specified flag to the flags set for the messages in the specified sequence. 
imap_sort ( resource $imap_stream , int $criteria , int $reverse [, int $options = 0 [, string $search_criteria = NULL [, string $charset = NULL ]]] ):array | Gets and sorts message numbers by the given parameters. 
imap_status ( resource $imap_stream , string $mailbox , int $options ):object | Gets status information about the given mailbox. 
imap_subscribe ( resource $imap_stream , string $mailbox ):bool | Subscribe to a new mailbox. 
imap_thread ( resource $imap_stream [, int $options = SE_FREE ] ):array | Gets a tree of a threaded message. 
imap_timeout ( int $timeout_type [, int $timeout = -1 ] ):mixed | Sets or fetches the imap timeout. 
imap_uid ( resource $imap_stream , $msg_number ):int |  Get the unique message id associated with a standard sequential message number
imap_undelete ( resource $imap_stream , int $msg_number [, int $flags = 0 ] ):bool | Removes the deletion flag for a specified message, which is set by imap_delete() or imap_mail_move(). 
imap_unsubscribe ( resource $imap_stream , string $mailbox ):bool | Unsubscribe from the specified mailbox. 
imap_utf7_decode ( $text ):string |  Decode a modified UTF-7 string
imap_utf7_encode ( $data ):string |  Encode a string in modified UTF-7
imap_utf8_to_mutf7 ( $in ):string
imap_utf8 ( $mime_encoded_text ):string | Converts the given mime_encoded_text to UTF-8. 
ldap_8859_to_t61 ( $value ):string |  Translate 8859 characters to t61 characters
ldap_add ( resource $link_identifier , string $dn , array $entry [, array $serverctrls ] ):bool | Add entries in the LDAP directory. 
ldap_bind ( resource $link_identifier [, string $bind_rdn = NULL [, string $bind_password = NULL ]] ):bool | Binds to the LDAP directory with specified RDN and password. 
ldap_close(->) function is an alias of: ldap_unbind(). :This
ldap_compare ( resource $link_identifier , string $dn , string $attribute , string $value [, array $serverctrls ] ):mixed | Compare value of attribute with value of same attribute in an LDAP directory entry. 
ldap_connect ([ string $host = NULL [, int $port = 389 ]] ):resource |  Connect to an LDAP server
ldap_control_paged_result_response ( resource $link , resource $result [, string &$cookie [, int &$estimated ]] ):bool | Retrieve the pagination information send by the server. 
ldap_control_paged_result ( resource $link , int $pagesize [, $iscritical = FALSE [, string $cookie = "" ]] ):bool | Enable LDAP pagination by sending the pagination control (page size, cookie...). 
ldap_count_entries ( resource $link_identifier , resource $result_identifier ):int | Returns the number of entries stored in the result of previous search operations. 
ldap_delete ( resource $link_identifier , string $dn [, array $serverctrls ] ):bool | Deletes a particular entry in LDAP directory. 
ldap_dn2ufn ( $dn ):string | Turns the specified dn, into a more user-friendly form, stripping off type names. 
ldap_err2str ( int $errno ):string | Returns the string error message explaining the error number errno. 
ldap_errno ( resource $link_identifier ):int | Returns the standardized error number returned by the last LDAP command. 
ldap_error ( resource $link_identifier ):string |  Get the current ldap error string
ldap_escape ( $value [, $ignore [, int $flags ]] ):string | Escapes value for use in the context implied by flags. 
ldap_exop_passwd ( resource $link [, string $user [, string $oldpw [, string $newpw [, array &$serverctrls ]]]] ):mixed | Performs a PASSWD extended operation. 
ldap_exop_refresh ( resource $link , string $dn , $ttl ):int | Performs a Refresh extended operation and returns the data. 
ldap_exop_whoami ( resource $link ):string | Performs a WHOAMI extended operation and returns the data. 
ldap_exop ( resource $link , string $reqoid [, string $reqdata [, array $servercontrols [, string &$retdata [, string &$retoid ]]]] ):mixed | Performs an extended operation on the specified link with reqoid the OID of the operation and reqdata the data. 
ldap_explode_dn ( string $dn , int $with_attrib ):array | Splits the DN returned by ldap_get_dn() and breaks it up into its component parts. Each part is known as Relative Distinguished Name, or RDN. 
ldap_first_attribute ( resource $link_identifier , resource $result_entry_identifier ):string |  Return first attribute
ldap_first_entry ( $link_identifier , $result_identifier ):resource |  Return first result id
ldap_first_reference ( $link , $result ):resource |  Return first reference
ldap_free_result ( resource $result_identifier ):bool |  Free result memory
ldap_get_attributes ( resource $link_identifier , resource $result_entry_identifier ):array |  Get attributes from a search result entry
ldap_get_dn ( resource $link_identifier , resource $result_entry_identifier ):string | Finds out the DN of an entry in the result. 
ldap_get_entries ( resource $link_identifier , resource $result_identifier ):array | Reads multiple entries from the given result, and then reading the attributes and multiple values. 
ldap_get_option ( resource $link_identifier , int $option , mixed &$retval ):bool | Sets retval to the value of the specified option. 
ldap_get_values_len ( resource $link_identifier , resource $result_entry_identifier , string $attribute ):array |  Get all values with lengths from a result entry
ldap_get_values ( resource $link_identifier , resource $result_entry_identifier , string $attribute ):array |  Get all values from a result entry
ldap_list ( $link_identifier , string $base_dn , string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref [, array $serverctrls ]]]]]] ):resource |  Single-level search
ldap_mod_add ( resource $link_identifier , string $dn , array $entry [, array $serverctrls ] ):bool | Adds one or more attribute values to the specified dn. To add a whole new object see ldap_add() function. 
ldap_mod_del ( resource $link_identifier , string $dn , array $entry [, array $serverctrls ] ):bool | Removes one or more attribute values from the specified dn. Object deletions are done by the ldap_delete() function. 
ldap_mod_replace ( resource $link_identifier , string $dn , array $entry [, array $serverctrls ] ):bool | Replaces one or more attributes from the specified dn. It may also add or remove attributes. 
ldap_modify_batch ( resource $link_identifier , string $dn , array $entry [, array $serverctrls ] ):bool | Modifies an existing entry in the LDAP directory. Allows detailed specification of the modifications to perform. 
ldap_modify(->) function is an alias of: ldap_mod_replace(). :This
ldap_next_attribute ( resource $link_identifier , resource $result_entry_identifier ):string | Retrieves the attributes in an entry. 
ldap_next_entry ( $link_identifier , $result_entry_identifier ):resource | Retrieve the entries stored in the result. 
ldap_next_reference ( $link , $entry ):resource |  Get next reference
ldap_parse_exop ( resource $link , resource $result [, string &$retdata [, string &$retoid ]] ):bool | Parse LDAP extended operation data from result object result 
ldap_parse_reference ( resource $link , resource $entry , array &$referrals ):bool |  Extract information from reference entry
ldap_parse_result ( resource $link , resource $result , int &$errcode [, string &$matcheddn [, string &$errmsg [, array &$referrals [, array &$serverctrls ]]]] ):bool | Parses an LDAP search result. 
ldap_read ( $link_identifier , string $base_dn , string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref [, array $serverctrls ]]]]]] ):resource | Performs the search for a specified filter on the directory with the scope LDAP_SCOPE_BASE. So it is equivalent to reading an entry from the directory. 
ldap_rename ( resource $link_identifier , string $dn , string $newrdn , string $newparent , $deleteoldrdn [, array $serverctrls ] ):bool | The entry specified by dn is renamed/moved. 
ldap_sasl_bind ( resource $link [, string $binddn = NULL [, string $password = NULL [, string $sasl_mech = NULL [, string $sasl_realm = NULL [, string $sasl_authc_id = NULL [, string $sasl_authz_id = NULL [, string $props = NULL ]]]]]]] ):bool |  Bind to LDAP directory using SASL
ldap_search ( $link_identifier , string $base_dn , string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref [, array $serverctrls ]]]]]] ):resource |  Search LDAP tree under base_dn
ldap_set_option ( resource $link_identifier , int $option , mixed $newval ):bool | Sets the value of the specified option to be newval. 
ldap_set_rebind_proc ( resource $link , callable $callback ):bool |  Set a callback function to do re-binds on referral chasing.
ldap_sort ( resource $link , resource $result , string $sortfilter ):bool |  Sort LDAP result entries
ldap_start_tls ( resource $link ):bool |  Start TLS
ldap_t61_to_8859 ( $value ):string |  Translate t61 characters to 8859 characters
ldap_unbind ( resource $link_identifier ):bool | Unbinds from the LDAP directory. 
libxml_clear_errors ( ):void | clears the libxml error buffer. 
libxml_disable_entity_loader ([ $disable = TRUE ] ):bool | Disable/enable the ability to load external entities. 
libxml_get_errors ( void ):array | Retrieve array of errors. 
libxml_get_last_error ( void ):LibXMLError | Retrieve last error from libxml. 
libxml_set_external_entity_loader ( callable $resolver_function ):bool | Changes the default external entity loader. 
libxml_set_streams_context ( resource $streams_context ):void | Sets the streams context for the next libxml document load or write. 
libxml_use_internal_errors ([ $use_errors = FALSE ] ):bool | allows you to disable standard libxml errors and enable user error handling. 
mcrypt_cbc ( int $cipher , $key , $data , int $mode [, $iv ] ):string |  CBC crypt/decrypt data using key key with cipher cipher starting with iv
mcrypt_cfb ( int $cipher , $key , $data , int $mode , $iv ):string |  CFB crypt/decrypt data using key key with cipher cipher starting with iv
mcrypt_create_iv ( int $size [, int $source = MCRYPT_DEV_URANDOM ] ):string |  Create an initialization vector (IV)
mcrypt_decrypt ( $cipher , $key , $data , $mode [, $iv ] ):string | Decrypts the data and returns the unencrypted data. 
mcrypt_ecb ( int $cipher , $key , $data , int $mode ):string |  ECB crypt/decrypt data using key key with cipher cipher starting with iv
mcrypt_enc_get_algorithms_name ( resource $td ):string | This function returns the name of the algorithm. 
mcrypt_enc_get_block_size ( resource $td ):int | Gets the blocksize of the opened algorithm. 
mcrypt_enc_get_iv_size ( resource $td ):int | This function returns the size of the IV of the algorithm specified by the encryption descriptor in bytes. An IV is used in cbc, cfb and ofb modes, and in some algorithms in stream mode. 
mcrypt_enc_get_key_size ( resource $td ):int | Gets the maximum supported key size of the algorithm in bytes. 
mcrypt_enc_get_modes_name ( resource $td ):string | This function returns the name of the mode. 
mcrypt_enc_get_supported_key_sizes ( resource $td ):array | Gets the supported key sizes of the opened algorithm. 
mcrypt_enc_is_block_algorithm_mode ( resource $td ):bool | Tells whether the algorithm of the opened mode works on blocks (e.g. FALSE for stream, and TRUE for cbc, cfb, ofb).. 
mcrypt_enc_is_block_algorithm ( resource $td ):bool | Tells whether the algorithm of the opened mode is a block algorithm. 
mcrypt_enc_is_block_mode ( resource $td ):bool | Tells whether the opened mode outputs blocks (e.g. TRUE for cbc and ecb, and FALSE for cfb and stream). 
mcrypt_enc_self_test ( resource $td ):int | This function runs the self test on the algorithm specified by the descriptor td. 
mcrypt_encrypt ( $cipher , $key , $data , $mode [, $iv ] ):string | Encrypts the data and returns it. 
mcrypt_generic_deinit ( resource $td ):bool | This function terminates encryption specified by the encryption descriptor (td). 
mcrypt_generic_end ( resource $td ):bool |  This function terminates encrypt specified by the descriptor td
mcrypt_generic_init ( resource $td , string $key , string $iv ):int | You need to call this function before every call to mcrypt_generic() or mdecrypt_generic(). 
mcrypt_generic ( resource $td , $data ):string |  This function encrypts the plaintext
mcrypt_get_block_size ( $cipher ):int |  Get the key size of cipher
mcrypt_get_cipher_name ( int $cipher ):string |  Get the key size of cipher
mcrypt_get_iv_size ( string $cipher , string $mode ):int |  Get the IV size of cipher (Usually the same as the blocksize)
mcrypt_get_key_size ( $cipher ):int |  Get the key size of cipher
mcrypt_list_algorithms ([ string $lib_dir = ini_get("mcrypt.algorithms_dir") ] ):array | Gets the list of all supported algorithms in the lib_dir parameter. 
mcrypt_list_modes ([ string $lib_dir = ini_get("mcrypt.modes_dir") ] ):array | Gets the list of all supported modes in the lib_dir parameter. 
mcrypt_module_close ( resource $td ):bool | Closes the specified encryption handle. 
mcrypt_module_get_algo_block_size ( string $algorithm [, string $lib_dir ] ):int | Gets the blocksize of the specified algorithm. 
mcrypt_module_get_algo_key_size ( string $algorithm [, string $lib_dir ] ):int | Gets the maximum supported keysize of the opened mode. 
mcrypt_module_get_supported_key_sizes ( string $algorithm [, string $lib_dir ] ):array | Returns an array with the key sizes supported by the specified algorithm. 
mcrypt_module_is_block_algorithm_mode ( string $mode [, string $lib_dir ] ):bool | This function returns TRUE if the mode is for use with block algorithms, otherwise it returns FALSE. 
mcrypt_module_is_block_algorithm ( string $algorithm [, string $lib_dir ] ):bool | This function returns TRUE if the specified algorithm is a block algorithm, or FALSE if it is a stream one. 
mcrypt_module_is_block_mode ( string $mode [, string $lib_dir ] ):bool | This function returns TRUE if the mode outputs blocks of bytes or FALSE if it outputs just bytes. (e.g. TRUE for cbc and ecb, and FALSE for cfb and stream). 
mcrypt_module_open ( string $algorithm , string $algorithm_directory , string $mode , string $mode_directory ):resource | This function opens the module of the algorithm and the mode to be used. 
mcrypt_module_self_test ( string $algorithm [, string $lib_dir ] ):bool | This function runs the self test on the algorithm specified. 
mcrypt_ofb ( int $cipher , $key , $data , int $mode , $iv ):string |  OFB crypt/decrypt data using key key with cipher cipher starting with iv
mdecrypt_generic ( resource $td , $data ):string | This function decrypts data. Note that the length of the returned string can in fact be longer than the unencrypted string, due to the padding of the data. 
mhash_count ( void ):int | Gets the highest available hash ID. 
mhash_get_block_size ( $hash ):int | Gets the size of a block of the specified hash. 
mhash_get_hash_name ( int $hash ):string | Gets the name of the specified hash. 
mhash_keygen_s2k ( int $hash , $password , $salt , int $bytes ):string |  Generates a key using hash functions
mhash ( int $hash , $data [, $key ] ):string | applies a hash function specified by hash to the data. 
msql_affected_rows ( resource $result ):int | Returns number of affected rows by the last SELECT, UPDATE or DELETE query associated with result. 
msql_close ([ resource $link_identifier ] ):bool |  Close an mSQL connection
msql_connect ([ string $hostname ] ):resource |  Open a connection to an mSQL Server
msql_create_db ( string $database_name [, resource $link_identifier ] ):bool | attempts to create a new database on the mSQL server. 
msql_createdb(->) function is an alias of: msql_create_db(). :This
msql_data_seek ( resource $result , int $row_number ):bool | moves the internal row pointer of the mSQL result  to the specified row number.
msql_db_query ( string $database , string $query [, $link_identifier ] ):resource | selects a database and executes a query on it. 
msql_dbname(->) function is an alias of: msql_result(). :This
msql_drop_db ( string $database_name [, resource $link_identifier ] ):bool | attempts to drop (remove) a database from the mSQL server. 
msql_error ( void ):string | returns the last issued error by the mSQL server. Note that only the last error message is accessible with msql_error(). 
msql_fetch_( resource $result [, int $result_type ] ):array |  Fetch a result row as an associative array
msql_fetch_field ( resource $result [, int $field_offset = 0 ] ):object | can be used in order to obtain information about fields in a certain query result. 
msql_fetch_( resource $result ):object |  Fetch a result row as an object
msql_fetch_row ( resource $result ):array |  Get a result row as an enumerated array
msql_field_flags ( resource $result , int $field_offset ):string | returns the field flags of the specified field. 
msql_field_len ( resource $result , $field_offset ):int | returns the length of the specified field. 
msql_field_name ( resource $result , int $field_offset ):string | gets the name of the specified field index. 
msql_field_seek ( resource $result , int $field_offset ):bool | Seeks to the specified field offset.
msql_field_table ( resource $result , $field_offset ):int | Returns the name of the table that the specified field is in. 
msql_field_type ( resource $result , int $field_offset ):string | gets the type of the specified field index. 
msql_fieldflags(->) function is an alias of: msql_field_flags(). :This
msql_fieldlen(->) function is an alias of: msql_field_len(). :This
msql_fieldname(->) function is an alias of: msql_field_name(). :This
msql_fieldtable(->) function is an alias of: msql_field_table(). :This
msql_fieldtype(->) function is an alias of: msql_field_type(). :This
msql_free_result ( resource $result ):bool | frees the memory associated with query_identifier. 
msql_list_dbs ([ $link_identifier ] ):resource | lists the databases available on the specified link_identifier. 
msql_list_fields ( string $database , string $tablename [, $link_identifier ] ):resource | returns information about the given table. 
msql_list_tables ( string $database [, $link_identifier ] ):resource | lists the tables on the specified database. 
msql_num_fields ( resource $result ):int | returns the number of fields in a result set. 
msql_num_rows ( resource $query_identifier ):int | returns the number of rows in a result set. 
msql_numfields(->) function is an alias of: msql_num_fields(). :This
msql_numrows(->) function is an alias of: msql_num_rows(). :This
msql_pconnect ([ string $hostname ] ):resource |  Open a persistent connection to an mSQL Server
msql_query ( string $query [, $link_identifier ] ):resource | sends a query to the currently active database on the server that's associated with the specified link identifier. 
msql_regcase(->) function is an alias of: sql_regcase(). :This
msql_result ( resource $result , int $row [, mixed $field ] ):string |  Get result data
msql_select_db ( string $database_name [, resource $link_identifier ] ):bool |  Select an mSQL database
msql_tablename(->) function is an alias of: msql_result(). :This
msql(->) function is an alias of: msql_db_query(). :This
mssql_bind ( resource $stmt , string $param_name , mixed &$var , int $type [, $is_output = FALSE [, $is_null = FALSE [, int $maxlen = -1 ]]] ):bool | Binds a parameter to a stored procedure or a remote stored procedure. 
mssql_close ([ resource $link_identifier ] ):bool |  Closes a connection to a MS-SQL server
mssql_connect ([ string $servername [, string $username [, string $password [, bool $new_link = FALSE ]]]] ):resource |  Establishes a connection to a MS-SQL server
mssql_data_seek ( resource $result_identifier , int $row_number ):bool | moves the internal row pointer of the MS SQL result associated with the specified result identifier to point to the specified row number, first row being number 0.
mssql_execute ( resource $stmt [, bool $skip_results = FALSE ] ):mixed | Executes a stored procedure on a MS SQL server database 
mssql_fetch_( resource $result [, int $result_type = MSSQL_BOTH ] ):array |  Returns an associative array of the current row in the result set specified by result_id
mssql_fetch_assoc ( resource $result_id ):array | Returns an associative array that corresponds to the fetched row and moves the internal data pointer ahead. 
mssql_fetch_batch ( resource $result ):int | Returns the next batch of records. 
mssql_fetch_field ( resource $result [, int $field_offset = -1 ] ):object | can be used in order to obtain information about fields in a certain query result. 
mssql_fetch_( resource $result ):object |  Returns a psuedo-object of the current row in the result set specified by result_id
mssql_fetch_row ( resource $result ):array |  Returns an array of the current row in the result set specified by result_id
mssql_field_length ( resource $result [, $offset = -1 ] ):int | Returns the length of field no. offset in result. 
mssql_field_name ( resource $result [, int $offset = -1 ] ):string | Returns the name of field no. offset in result. 
mssql_field_seek ( resource $result , int $field_offset ):bool | Seeks to the specified field offset. If the next call to mssql_fetch_field() won't include a field offset, this field would be returned. 
mssql_field_type ( resource $result [, int $offset = -1 ] ):string | Returns the type of field no. offset in result. 
mssql_free_result ( resource $result ):bool | All result memory will automatically be freed when the script ends.
mssql_free_statement ( resource $stmt ):bool | All statement memory will automatically be freed when the script ends.
mssql_get_last_message ( void ):string | Gets the last message from the MS-SQL server 
mssql_guid_( $binary [, bool $short_format = FALSE ] ):string | Converts a 16 byte binary GUID to a string. 
mssql_init ( string $sp_name [, $link_identifier ] ):resource | Initializes a stored procedure or a remote stored procedure. 
mssql_min_error_severity ( int $severity ):void | Sets the minimum error severity. 
mssql_min_message_severity ( int $severity ):void | Sets the minimum message severity. 
mssql_next_result ( resource $result_id ):bool |  This function will test for additional results available form the server.
mssql_num_fields ( resource $result ):int | returns the number of fields in a result set. 
mssql_num_rows ( resource $result ):int | returns the number of rows in a result set. 
mssql_pconnect ([ string $servername [, string $username [, string $password [, bool $new_link = FALSE ]]]] ):resource |  Establishes a persistent connection to a MS-SQL server
mssql_query ( string $query [, resource $link_identifier [, int $batch_size = 0 ]] ):mixed | sends a query to the currently active database on the server that's associated with the specified link identifier. 
mssql_result ( resource $result , int $row , mixed $field ):string | returns the contents of one cell from a MS SQL result set. 
mssql_rows_affected ( resource $link_identifier ):int | Returns the number of records affected by the last write query. 
mssql_select_db ( string $database_name [, resource $link_identifier ] ):bool |  Select a MS-SQL database
mysql_affected_rows ([ resource $link_identifier = NULL ] ):int | Get the number of affected rows by the last INSERT, UPDATE, REPLACE or DELETE query associated with link_identifier. 
mysql_client_encoding ([ resource $link_identifier = NULL ] ):string | Retrieves the character_set variable from MySQL. 
mysql_close ([ resource $link_identifier = NULL ] ):bool |  Close a MySQL connection
mysql_connect ([ string $server = ini_get("mysql.default_host") [, string $username = ini_get("mysql.default_user") [, string $password = ini_get("mysql.default_password") [, bool $new_link = FALSE [, int $client_flags = 0 ]]]]] ):resource | Opens or reuses a connection to a MySQL server. 
mysql_create_db ( string $database_name [, resource $link_identifier = NULL ] ):bool | attempts to create a new database on the server associated with the specified link identifier. 
mysql_data_seek ( resource $result , int $row_number ):bool |  Move internal result pointer
mysql_db_name ( resource $result , int $row [, mixed $field = NULL ] ):string | Retrieve the database name from a call to mysql_list_dbs(). 
mysql_db_query ( string $database , string $query [, $link_identifier = NULL ] ):resource | selects a database, and executes a query on it. 
mysql_drop_db(->) mysql_drop_db ( string $database_name [, resource $link_identifier = NULL ] ):bool | attempts to drop (remove) an entire database from the server associated with the specified link identifier. 
mysql_errno ([ resource $link_identifier = NULL ] ):int |  Returns the number of the error message from previous MySQL operation
mysql_error ([ resource $link_identifier = NULL ] ):string | Returns the error text from the last MySQL function.
mysql_escape_string(->) mysql_escape_( $unescaped_):string |  Escape string for mysql query
mysql_fetch_( resource $result [, int $result_type = MYSQL_BOTH ] ):array | Returns an array that corresponds to the fetched row and moves the internal data pointer ahead. 
mysql_fetch_assoc ( resource $result ):array | Returns an associative array that corresponds to the fetched row and moves the internal data pointer ahead.
mysql_fetch_field ( resource $result [, int $field_offset = 0 ] ):object | Returns an object containing field information. This function can be used to obtain information about fields in the provided query result. 
mysql_fetch_lengths ( resource $result ):array |  Gets max data size of each column in a result
mysql_fetch_( resource $result [, string $class_name [, array $params ]] ):object | Returns an object with properties that correspond to the fetched row and moves the internal data pointer ahead. 
mysql_fetch_row ( resource $result ):array | Returns a numerical array that corresponds to the fetched row and moves the internal data pointer ahead. 
mysql_field_flags ( resource $result , int $field_offset ):string | returns the field flags of the specified field. The flags are reported as a single word per flag separated by a single space, so that you can split the returned value using explode(). 
mysql_field_len ( resource $result , $field_offset ):int | returns the length of the specified field. 
mysql_field_name ( resource $result , int $field_offset ):string | returns the name of the specified field index. 
mysql_field_seek ( resource $result , int $field_offset ):bool | Seeks to the specified field offset. If the next call to mysql_fetch_field() doesn't include a field offset, the field offset specified in mysql_field_seek() will be returned. 
mysql_field_table ( resource $result , int $field_offset ):string | Returns the name of the table that the specified field is in. 
mysql_field_type ( resource $result , int $field_offset ):string | is similar to the mysql_field_name() function. The arguments are identical, but the field type is returned instead. 
mysql_free_result ( resource $result ):bool |  Free result memory
mysql_get_client_info ( void ):string | returns a string that represents the client library version. 
mysql_get_host_info ([ resource $link_identifier = NULL ] ):string | Describes the type of connection in use for the connection, including the server host name. 
mysql_get_proto_info ([ resource $link_identifier = NULL ] ):int | Retrieves the MySQL protocol. 
mysql_get_server_info ([ resource $link_identifier = NULL ] ):string | Retrieves the MySQL server version. 
mysql_info ([ resource $link_identifier = NULL ] ):string | Returns detailed information about the last query. 
mysql_insert_id ([ resource $link_identifier = NULL ] ):int | Retrieves the ID generated for an AUTO_INCREMENT column by the previous query (usually INSERT). 
mysql_list_dbs ([ $link_identifier = NULL ] ):resource | Returns a result pointer containing the databases available from the current mysql daemon. 
mysql_list_fields(->) mysql_list_fields ( string $database_name , string $table_name [, $link_identifier = NULL ] ):resource |  List MySQL result fields
mysql_list_processes ([ $link_identifier = NULL ] ):resource | Retrieves the current MySQL server threads. 
mysql_list_tables(->) mysql_list_tables ( string $database [, $link_identifier = NULL ] ):resource |  List tables in a MySQL database
mysql_num_fields ( resource $result ):int | Retrieves the number of fields from a query. 
mysql_num_rows ( resource $result ):int | Retrieves the number of rows from a result set. This command is only valid for statements like SELECT or SHOW that return an actual result set.
mysql_pconnect ([ string $server = ini_get("mysql.default_host") [, string $username = ini_get("mysql.default_user") [, string $password = ini_get("mysql.default_password") [, int $client_flags = 0 ]]]] ):resource |  Opens a persistent connection to a MySQL Server
mysql_ping ([ resource $link_identifier = NULL ] ):bool |  Ping a server connection. If no connection then reconnect.
mysql_query ( string $query [, resource $link_identifier = NULL ] ):mixed | sends a single unique query to the server that's associated with the specified link_identifier. 
mysql_real_escape_( $unescaped_[, resource $link_identifier = NULL ] ):string |  Escape special characters in a string for use in a SQL statement, taking into account the current charset of the connection
mysql_result ( resource $result , int $row [, mixed $field = 0 ] ):string |  Gets result data
mysql_select_db ( string $database_name [, resource $link_identifier = NULL ] ):bool | Sets the current active database on the server that's associated with the specified link identifier.
mysql_set_charset ( string $charset [, resource $link_identifier = NULL ] ):bool | Sets the default character set for the current connection. 
mysql_stat ([ resource $link_identifier = NULL ] ):string | returns the current server status. 
mysql_tablename(->) mysql_tablename ( resource $result , int $i ):string
mysql_thread_id ([ resource $link_identifier = NULL ] ):int | Retrieves the current thread ID. If the connection is lost, and a reconnect with mysql_ping() is executed, the thread ID will change. This means only retrieve the thread ID when needed. 
mysql_unbuffered_query ( string $query [, $link_identifier = NULL ] ):resource Sends the SQL query query to MySQL without automatically fetching and buffering the result rows as mysql_query() does. 
mysqli_bind_param(->) function is an alias of: mysqli_stmt_bind_param(). :This |  Bind variables to a prepared statement as parameters
mysqli_bind_result(->) function is an alias of: mysqli_stmt_bind_result(). :This |  Bind variables to a prepared statement for result storage
mysqli_client_encoding(->) function is an alias of: mysqli_character_set_name(). :This
mysqli_connect(->) function is an alias of: mysqli::__construct() :This | Although the mysqli::__construct() documentation also includes procedural examples that use the mysqli_connect() function, here is a short example: 
oriented style:Object
mysqli_disable_rpl_parse ( mysqli $link ):bool
mysqli_enable_reads_from_master ( mysqli $link ):bool
mysqli_enable_rpl_parse ( mysqli $link ):bool
mysqli_escape_string(->) function is an alias of: mysqli_real_escape_string(). :This
mysqli_execute(->) function is an alias of: mysqli_stmt_execute(). :This |  Execute a prepared statement
mysqli_fetch(->) function is an alias of: mysqli_stmt_fetch(). :This |  Fetch results from a prepared statement into the bound variables
mysqli_get_cache_stats ( void ):array | Returns an empty array. Available only with mysqlnd. 
mysqli_get_client_stats ( void ):array | Returns client per-process statistics. Available only with mysqlnd. 
mysqli_get_links_stats ( void ):array |  returns information about open and cached MySQL links. 
mysqli_get_metadata(->) function is an alias of: mysqli_stmt_result_metadata(). :This |  return result set from statement
mysqli_master_query ( mysqli $link , string $query ):bool |  Enforce execution of a query on the master in a master/slave setup
mysqli_param_count(->) function is an alias of: mysqli_stmt_param_count(). :This | { | Return the number of parameter for the given statement
mysqli_report(->) function is an alias of: mysqli_driver->report_mode :This
mysqli_rpl_parse_enabled ( mysqli $link ):int
mysqli_rpl_probe ( mysqli $link ):bool
mysqli_send_long_data(->) function is an alias of: mysqli_stmt_send_long_data(). :This
mysqli_set_opt(->) function is an alias of: mysqli_options(). :This
mysqli_slave_query ( mysqli $link , string $query ):bool |  Enforce execution of a query on a slave in a master/slave setup
oci_bind_array_by_name ( resource $statement , string $name , array &$var_array , int $max_table_length [, int $max_item_length = -1 [, int $type = SQLT_AFC ]] ):bool | Binds the PHP array var_array to the Oracle placeholder name, which points to an Oracle PL/SQL array. Whether it will be used for input or output will be determined at run-time. 
oci_bind_by_name ( resource $statement , string $bv_name , mixed &$variable [, int $maxlength = -1 [, int $type = SQLT_CHR ]] ):bool |  Bind a PHP variable to an Oracle placeholder by name
oci_cancel ( resource $statement ):bool | Invalidates a cursor, freeing all associated resources and cancels the ability to read from it. 
oci_client_version ( void ):string | Returns a string containing the version number of the Oracle C client library that PHP is linked with. 
oci_close ( resource $connection ):bool |  Disconnect from database
oci_commit ( resource $connection ):bool |  Commit the current context
oci_connect ( string $username , string $password [, string $connection_string [, string $character_set [, int $session_mode ]]] ):resource |  Connect to an Oracle database and log on. Returns a new session.
oci_define_by_name ( resource $statement , string $column_name , mixed &$variable [, int $type = SQLT_CHR ] ):bool |  Define a PHP variable to an Oracle column by name
oci_error ([ resource $resource ] ):array |  Return the last error of stmt|conn|global. If no error happened returns false.
oci_execute ( resource $statement [, int $mode = OCI_COMMIT_ON_SUCCESS ] ):bool |  Execute a parsed statement
oci_fetch_all ( resource $statement , array &$output [, $skip = 0 [, $maxrows = -1 [, $flags = OCI_FETCHSTATEMENT_BY_COLUMN + OCI_ASSOC ]]] ):int |  Fetch all rows of result data into an array
oci_fetch_( resource $statement [, int $mode ] ):array |  Fetch a result row as an array
oci_fetch_assoc ( resource $statement ):array |  Fetch a result row as an associative array
oci_fetch_( resource $statement ):object |  Fetch a result row as an object
oci_fetch_row ( resource $statement ):array |  Fetch a result row as an enumerated array
oci_fetch ( resource $statement ):bool |  Prepare a new row of data for reading
oci_field_is_null ( resource $statement , mixed $field ):bool | Checks if the given field from the current row of statement is NULL. 
oci_field_name ( resource $statement , mixed $field ):string | Returns the name of the field. 
oci_field_precision ( resource $statement , mixed $field ):int |  Tell the precision of a column
oci_field_scale ( resource $statement , mixed $field ):int |  Tell the scale of a column
oci_field_size ( resource $statement , mixed $field ):int | Returns the size of a field. 
oci_field_type_raw ( resource $statement , mixed $field ):int |  Tell the raw oracle data type of a column
oci_field_type ( resource $statement , $field ):mixed | Returns a field's data type name. 
oci_free_descriptor ( resource $descriptor ):bool | Frees a descriptor allocated by oci_new_descriptor(). 
oci_free_statement ( resource $statement ):bool | Frees resources associated with Oracle's cursor or statement, which was received from as a result of oci_parse() or obtained from Oracle. 
oci_get_implicit_resultset ( $statement ):resource
oci_internal_debug ( bool $onoff ):void | Enables or disables internal debug output. 
oci_lob_copy ( OCI-Lob $lob_to , OCI-Lob $lob_from [, int $length = 0 ] ):bool |  Copies data from a LOB to another LOB
oci_lob_is_equal ( OCI-Lob $lob1 , OCI-Lob $lob2 ):bool | Compares two LOB/FILE locators. 
oci_new_collection ( resource $connection , string $tdo [, string $schema = NULL ] ):OCI-Collection | Allocates a new collection object. 
oci_new_connect ( string $username , string $password [, string $connection_string [, string $character_set [, int $session_mode ]]] ):resource |  Connect to an Oracle database and log on. Returns a new session.
oci_new_cursor ( $connection ):resource | Allocates a new statement handle on the specified connection. 
oci_new_descriptor ( resource $connection [, int $type = OCI_DTYPE_LOB ] ):OCI-Lob | Allocates resources to hold descriptor or LOB locator. 
oci_num_fields ( resource $statement ):int | Gets the number of columns in the given statement. 
oci_num_rows ( resource $statement ):int | Gets the number of rows affected during statement execution. 
oci_parse ( $connection , string $sql_text ):resource |  Parse a query and return a statement
oci_password_change ( resource $connection , string $username , string $old_password , string $new_password ):bool |  Changes the password of an account
oci_pconnect ( string $username , string $password [, string $connection_string [, string $character_set [, int $session_mode ]]] ):resource |  Connect to an Oracle database using a persistent connection and log on. Returns a new session.
oci_register_taf_callback ( resource $connection [, mixed $callbackFn ] ):bool
oci_result ( resource $statement , $field ):mixed |  Return a single column of result data
oci_rollback ( resource $connection ):bool |  Rollback the current context
oci_server_version ( resource $connection ):string | Returns a string with the Oracle Database version and available options 
oci_set_action ( resource $connection , string $action_name ):bool
oci_set_client_identifier ( resource $connection , string $client_identifier ):bool
oci_set_client_info ( resource $connection , string $client_info ):bool
oci_set_edition ( string $edition ):bool
oci_set_module_name ( resource $connection , string $module_name ):bool
oci_set_prefetch ( resource $statement , int $rows ):bool |  Sets the number of rows to be prefetched on execute to prefetch_rows for stmt
oci_statement_type ( resource $statement ):string | Returns a keyword identifying the type of the OCI8 statement. 
oci_unregister_taf_callback ( resource $connection ):bool | Unregister the user-defined callback function registered to connection by oci_register_taf_callback(). See OCI8 Transparent Application Failover (TAF) Support for information. 
openssl_cipher_iv_length ( string $method ):int | Gets the cipher initialization vector (iv) length. 
openssl_csr_export_to_file ( mixed $csr , string $outfilename [, $notext = TRUE ] ):bool | takes the Certificate Signing Request represented by csr and saves it in PEM format into the file named by outfilename. 
openssl_csr_export ( mixed $csr , string &$out [, $notext = TRUE ] ):bool | takes the Certificate Signing Request represented by csr and stores it in PEM format in out, which is passed by reference. 
openssl_csr_get_public_key ( mixed $csr [, bool $use_shortnames = TRUE ] ):resource | extracts the public key from csr and prepares it for use by other functions. 
openssl_csr_get_subject ( mixed $csr [, bool $use_shortnames = TRUE ] ):array | returns subject distinguished name information encoded in the csr including fields commonName (CN), organizationName (O), countryName (C) etc. 
openssl_csr_new ( array $dn , resource &$privkey [, array $configargs [, array $extraattribs ]] ):mixed |  Generates a privkey and CSR
openssl_csr_sign ( mixed $csr , mixed $cacert , mixed $priv_key , int $days [, array $configargs [, int $serial = 0 ]] ):resource |  Signs a cert with another CERT
openssl_decrypt ( $data , $method , $key [, int $options = 0 [, $iv = "" [, $tag = "" [, $aad = "" ]]]] ):string | Takes a raw or base64 encoded string and decrypts it using a given method and key. 
openssl_dh_compute_key ( $pub_key , resource $dh_key ):string | The shared secret returned by openssl_dh_compute_key() is often used as an encryption key to secretly communicate with a remote party. This is known as the Diffie-Hellman key exchange. 
openssl_digest ( $data , $method [, bool $raw_output = FALSE ] ):string
openssl_encrypt ( $data , $method , $key [, int $options = 0 [, $iv = "" [, &$tag = NULL [, $aad = "" [, int $tag_length = 16 ]]]]] ):string | Encrypts given data with given method and key, returns a raw or base64 encoded string 
openssl_error_( void ):string | returns the last error from the openSSL library. Error messages are queued, so this function should be called multiple times to collect all of the information. The last error will be the most recent one. 
openssl_free_key ( resource $key_identifier ):void | frees the key associated with the specified key_identifier from memory. 
openssl_get_cert_locations ( void ):array | returns an array with information about the available certificate locations that will be searched for SSL certificates. 
openssl_get_cipher_methods ([ bool $aliases = FALSE ] ):array | Gets a list of available cipher methods. 
openssl_get_curve_names ( void ):array
openssl_get_md_methods ([ bool $aliases = FALSE ] ):array | Gets a list of available digest methods. 
openssl_get_privatekey(->) function is an alias of: openssl_pkey_get_private(). :This
openssl_get_publickey(->) function is an alias of: openssl_pkey_get_public(). :This
openssl_open ( string $sealed_data , string &$open_data , string $env_key , mixed $priv_key_id [, string $method = "RC4" [, string $iv ]] ):bool opens (decrypts) sealed_data using the private key associated with the key identifier priv_key_id and the envelope key env_key, and fills open_data with the decrypted data. 
openssl_pbkdf2 ( $password , $salt , int $key_length , int $iterations [, $digest_algorithm = "sha1" ] ):string | computes PBKDF2 (Password-Based Key Derivation Function 2), a key derivation function defined in PKCS5 v2. 
openssl_pkcs12_export_to_file ( mixed $x509 , string $filename , mixed $priv_key , string $pass [, array $args ] ):bool | stores x509 into a file named by filename in a PKCS#12 file format. 
openssl_pkcs12_export ( mixed $x509 , string &$out , mixed $priv_key , string $pass [, array $args ] ):bool | stores x509 into a string named by out in a PKCS#12 file format. 
openssl_pkcs12_read ( string $pkcs12 , array &$certs , string $pass ):bool | parses the PKCS#12 certificate store supplied by pkcs12 into a array named certs. 
openssl_pkcs7_decrypt ( string $infilename , string $outfilename , mixed $recipcert [, mixed $recipkey ] ):bool | Decrypts the S/MIME encrypted message contained in the file specified by infilename using the certificate and its associated private key specified by recipcert and recipkey. 
openssl_pkcs7_encrypt ( string $infile , string $outfile , mixed $recipcerts , array $headers [, int $flags = 0 [, int $cipherid = OPENSSL_CIPHER_RC2_40 ]] ):bool | takes the contents of the file named infile and encrypts them using an RC2 40-bit cipher so that they can only be read by the intended recipients specified by recipcerts. 
openssl_pkcs7_read ( string $infilename , array &$certs ):bool
openssl_pkcs7_sign ( string $infilename , string $outfilename , mixed $signcert , mixed $privkey , array $headers [, int $flags = PKCS7_DETACHED [, string $extracerts ]] ):bool | takes the contents of the file named infilename and signs them using the certificate and its matching private key specified by signcert and privkey parameters. 
openssl_pkcs7_verify ( string $filename , int $flags [, string $outfilename [, array $cainfo [, string $extracerts [, string $content [, string $p7bfilename ]]]]] ):mixed | reads the S/MIME message contained in the given file and examines the digital signature. 
openssl_pkey_export_to_file ( mixed $key , string $outfilename [, string $passphrase [, array $configargs ]] ):bool |  Gets an exportable representation of a key into a file
openssl_pkey_export ( mixed $key , string &$out [, string $passphrase [, array $configargs ]] ):bool |  Gets an exportable representation of a key into a string or file
openssl_pkey_free ( resource $key ):void | This function frees a private key created by openssl_pkey_new(). 
openssl_pkey_get_details ( resource $key ):array | This function returns the key details (bits, key, type). 
openssl_pkey_get_private ( mixed $key [, string $passphrase = "" ] ):resource | parses key and prepares it for use by other functions. 
openssl_pkey_get_public ( mixed $certificate ):resource | extracts the public key from certificate and prepares it for use by other functions. 
openssl_pkey_new ([ array $configargs ] ):resource |  Generates a new private key
openssl_private_decrypt ( string $data , string &$decrypted , mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ] ):bool |  Decrypts data with private key
openssl_private_encrypt ( string $data , string &$crypted , mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ] ):bool |  Encrypts data with private key
openssl_public_decrypt ( string $data , string &$decrypted , mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ] ):bool |  Decrypts data with public key
openssl_public_encrypt ( string $data , string &$crypted , mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ] ):bool |  Encrypts data with public key
openssl_random_pseudo_bytes ( int $length [, bool &$crypto_strong ] ):string
openssl_seal ( string $data , string &$sealed_data , array &$env_keys , array $pub_key_ids [, string $method = "RC4" [, string &$iv ]] ):int | seals (encrypts) data by using the given method with a randomly generated secret key.
openssl_sign ( string $data , string &$signature , mixed $priv_key_id [, mixed $signature_alg = OPENSSL_ALGO_SHA1 ] ):bool | computes a signature for the specified data by generating a cryptographic digital signature using the private key associated with priv_key_id. 
openssl_spki_export_challenge ( &$spkac ):string | Exports challenge from encoded signed public key and challenge 
openssl_spki_export ( &$spkac ):string | Exports PEM formatted public key from encoded signed public key and challenge 
openssl_spki_new ( resource &$privkey , &$challenge [, int $algorithm = 0 ] ):string | Generates a signed public key and challenge using specified hashing algorithm 
openssl_spki_verify ( &$spkac ):string | Validates the supplied signed public key and challenge 
openssl_verify ( string $data , string $signature , mixed $pub_key_id [, mixed $signature_alg = OPENSSL_ALGO_SHA1 ] ):int | verifies that the signature is correct for the specified data using the public key associated with pub_key_id. 
openssl_x509_check_private_key ( mixed $cert , mixed $key ):bool |  Checks if a private key corresponds to a CERT
openssl_x509_checkpurpose ( mixed $x509cert , $purpose [, array $cainfo = array() [, string $untrustedfile ]] ):int | examines a certificate to see if it can be used for the specified purpose. 
openssl_x509_export_to_file ( mixed $x509 , string $outfilename [, $notext = TRUE ] ):bool | stores x509 into a file named by outfilename in a PEM encoded format. 
openssl_x509_export ( mixed $x509 , string &$output [, $notext = TRUE ] ):bool | stores x509 into a string named by output in a PEM encoded format. 
openssl_x509_fingerprint ( mixed $x509 [, $hash_algorithm = "sha1" [, bool $raw_output = FALSE ]] ):string | returns the digest of x509 as a string. 
openssl_x509_free ( resource $x509cert ):void | frees the certificate associated with the specified x509cert resource from memory. 
openssl_x509_parse ( mixed $x509cert [, bool $shortnames = TRUE ] ):array | returns information about the supplied x509cert, including fields such as subject name, issuer name, purposes, valid from and valid to dates etc. 
openssl_x509_read ( mixed $x509certdata ):resource | parses the certificate supplied by x509certdata and returns a resource identifier for it. 
PDO_DBLIB Data Source Name (DSN) is composed of the following elements: :The
PDO_FIREBIRD Data Source Name (DSN) is composed of the following elements: :The
PDO_MYSQL Data Source Name (DSN) is composed of the following elements: :The
PDO_OCI Data Source Name (DSN) is composed of the following elements: :The
PDO_ODBC Data Source Name (DSN) is composed of the following elements: :The
PDO_PGSQL Data Source Name (DSN) is composed of the following elements, delimited by spaces or semicolons: :The
bool PDO::pgsqlCopyFromArray ( string $table_name , array $rows [, string $delimiter = '\t' [, string $null_as = "\\\\N" [, string $fields ]]] ):public | Copies data from rows array to table table_name using delimiter as fields delimiter and fields list 
bool PDO::pgsqlCopyFromFile ( string $table_name , string $filename [, string $delimiter = '\t' [, string $null_as = "\\\\N" [, string $fields ]]] ):public | Copies data from file specified by filename into table table_name using delimiter as fields delimiter and fields list 
array PDO::pgsqlCopyToArray ( string $table_name [, string $delimiter = '\t' [, string $null_as = "\\\\N" [, string $fields ]]] ):public | Copies data from table into array using delimiter as fields delimiter and fields list 
bool PDO::pgsqlCopyToFile ( string $table_name , string $filename [, string $delimiter = '\t' [, string $null_as = "\\\\N" [, string $fields ]]] ):public | Copies data from table into file specified by filename using delimiter as fields delimiter and fields list 
array PDO::pgsqlGetNotify ([ int $result_type = PDO::FETCH_USE_DEFAULT [, int $ms_timeout = 0 ]] ):public | Returns a result set representing a pending asynchronous notification. 
int PDO::pgsqlGetPid ( void ):public | Returns the server's PID. 
string PDO::pgsqlLOBCreate ( void ):public
resource PDO::pgsqlLOBOpen ( string $oid [, string $mode = "rb" ] ):public
bool PDO::pgsqlLOBUnlink ( string $oid ):public
PDO_SQLITE Data Source Name (DSN) is composed of the following elements: :The
bool PDO::sqliteCreateAggregate ( string $function_name , callable $step_func , callable $finalize_func [, int $num_args ] ):public
bool PDO::sqliteCreateCollation ( string $name , callable $callback ):public
bool PDO::sqliteCreateFunction ( string $function_name , callable $callback [, int $num_args = -1 [, int $flags = 0 ]] ):public
pg_affected_rows ( resource $result ):int |  Returns the number of affected tuples
pg_cancel_query ( resource $connection ):bool | cancels an asynchronous query sent with pg_send_query(), pg_send_query_params() or pg_send_execute(). You cannot cancel a query executed using pg_query(). 
pg_client_encoding ([ resource $connection ] ):string |  Get the current client encoding
pg_close ([ resource $connection ] ):bool |  Close a PostgreSQL connection
pg_connect_poll ( resource $connection ):int | polls the status of a PostgreSQL connection created by calling pg_connect() with the PGSQL_CONNECT_ASYNC option. 
pg_connect(->) pg_connect ( string $connection_string [, int $connect_type ] ):resource |  Open a PostgreSQL connection
pg_connection_busy ( resource $connection ):bool | determines whether or not a connection is busy. If it is busy, a previous query is still executing. If pg_get_result() is used on the connection, it will be blocked. 
pg_connection_reset ( resource $connection ):bool | resets the connection. It is useful for error recovery. 
pg_connection_status ( resource $connection ):int |  returns the status of the specified connection. 
pg_consume_input ( resource $connection ):bool |  consumes any input waiting to be read from the database server. 
pg_convert ( resource $connection , string $table_name , $assoc_[, int $options = 0 ] ):array |  Check and convert values for PostgreSQL SQL statement
pg_copy_from ( resource $connection , string $table_name , array $rows [, string $delimiter [, string $null_as ]] ):bool | inserts records into a table from rows. It issues a COPY FROM SQL command internally to insert records. 
pg_copy_to ( resource $connection , string $table_name [, string $delimiter [, string $null_as ]] ):array | copies a table to an array. It issues COPY TO SQL command internally to retrieve records. 
pg_dbname ([ resource $connection ] ):string | returns the name of the database that the given PostgreSQL connection resource. 
pg_delete ( resource $connection , string $table_name , array $assoc_array [, int $options = PGSQL_DML_EXEC ] ):mixed |  Delete records has ids (id=>value)
pg_end_copy ([ resource $connection ] ):bool | syncs the PostgreSQL frontend (usually a web server process) with the PostgreSQL server after doing a copy operation performed by pg_put_line(). 
pg_escape_bytea ([ resource $connection ], $data ):string |  Escape binary for bytea type
pg_escape_identifier ([ resource $connection ], $data ):string
pg_escape_literal ([ resource $connection ], $data ):string
pg_escape_([ resource $connection ], $data ):string |  Escape string for text/char type
pg_execute ([ $connection ], string $stmtname , array $params ):resource
pg_fetch_all_columns ( resource $result [, int $column = 0 ] ):array
pg_fetch_all ( resource $result [, int $result_type = PGSQL_ASSOC ] ):array |  Fetch all rows into array
pg_fetch_( resource $result [, int $row [, int $result_type = PGSQL_BOTH ]] ):array |  Fetch a row as an array
pg_fetch_assoc ( resource $result [, int $row ] ):array |  Fetch a row as an assoc array
pg_fetch_( resource $result [, int $row [, int $result_type = PGSQL_ASSOC ]] ):object |  Fetch a row as an object
pg_fetch_result ( resource $result , int $row , mixed $field ):string |  Returns values from a result identifier
pg_fetch_row ( resource $result [, int $row ] ):array |  Get a row as an enumerated array
pg_field_is_null ( resource $result , $row , mixed $field ):int |  Test if a field is NULL
pg_field_name ( resource $result , int $field_number ):string |  Returns the name of the field
pg_field_num ( resource $result , string $field_name ):int |  Returns the field number of the named field
pg_field_prtlen ( resource $result , $row_number , mixed $field_name_or_number ):int |  Returns the printed length
pg_field_size ( resource $result , $field_number ):int |  Returns the internal size of the field
pg_field_table ( resource $result , int $field_number [, bool $oid_only = FALSE ] ):mixed | returns the name of the table that field belongs to, or the table's oid if oid_only is TRUE. 
pg_field_type_oid ( resource $result , $field_number ):int
pg_field_type ( resource $result , int $field_number ):string |  Returns the type name for the given field
pg_flush ( resource $connection ):mixed | flushes any outbound query data waiting to be sent on the connection. 
pg_free_result ( resource $result ):bool |  Free result memory
pg_get_notify ( resource $connection [, int $result_type ] ):array | gets notifications generated by a NOTIFY SQL command. To receive notifications, the LISTEN SQL command must be issued. 
pg_get_pid ( resource $connection ):int | gets the backend's (database server process) PID. 
pg_get_result ([ $connection ] ):resource |  Get asynchronous query result
pg_host ([ resource $connection ] ):string | returns the host name of the given PostgreSQL connection resource is connected to. 
pg_insert ( resource $connection , string $table_name , array $assoc_array [, int $options = PGSQL_DML_EXEC ] ):mixed |  Insert values (filed=>value) to table
pg_last_error ([ resource $connection ] ):string |  Get the error message string
pg_last_notice ( resource $connection [, int $option = PGSQL_NOTICE_LAST ] ):mixed |  Returns the last notice set by the backend
pg_last_oid ( resource $result ):string |  Returns the last object identifier
pg_lo_close ( resource $large_object ):bool |  Close a large object
pg_lo_create ([ resource $connection [, mixed $object_id ]] ):int |  Create a large object
pg_lo_export ([ resource $connection ], int $oid , string $pathname ):bool |  Export large object direct to filesystem
pg_lo_import ([ resource $connection ], string $pathname [, mixed $object_id ] ):int |  Import large object direct from filesystem
pg_lo_open ( $connection , int $oid , string $mode ):resource |  Open a large object and return fd
pg_lo_read_all ( resource $large_object ):int |  Read a large object and send straight to browser
pg_lo_read ( resource $large_object [, int $len = 8192 ] ):string |  Read a large object
pg_lo_seek ( resource $large_object , int $offset [, int $whence = PGSQL_SEEK_CUR ] ):bool |  Seeks position of large object
pg_lo_tell ( resource $large_object ):int |  Returns current position of large object
pg_lo_truncate ( resource $large_object , int $size ):bool
pg_lo_unlink ( resource $connection , int $oid ):bool |  Delete a large object
pg_lo_write ( resource $large_object , string $data [, $len ] ):int |  Write a large object
pg_meta_data ( resource $connection , string $table_name [, bool $extended = FALSE ] ):array | returns table definition for table_name as an array. 
pg_num_fields ( resource $result ):int |  Return the number of fields in the result
pg_num_rows ( resource $result ):int |  Return the number of rows in the result
pg_options ([ resource $connection ] ):string | will return a string containing the options specified on the given PostgreSQL connection resource. 
pg_parameter_status ([ resource $connection ], $param_name ):string |  Returns the value of a server parameter
pg_pconnect ( string $connection_string [, int $connect_type ] ):resource |  Open a persistent PostgreSQL connection
pg_ping ([ resource $connection ] ):bool | pings a database connection and tries to reconnect it if it is broken. 
pg_port ([ resource $connection ] ):int | returns the port number that the given PostgreSQL connection resource is connected to. 
pg_prepare ([ $connection ], string $stmtname , string $query ):resource
pg_put_line ([ resource $connection ], string $data ):bool |  Send null-terminated string to backend server
pg_query_params ([ $connection ], string $query , array $params ):resource
pg_query ([ $connection ], string $query ):resource |  Execute a query
pg_result_error_field ( resource $result , int $fieldcode ):string
pg_result_error ( resource $result ):string |  Get error message associated with result
pg_result_seek ( resource $result , int $offset ):bool | sets the internal row offset in a result resource. 
pg_result_status ( resource $result [, int $type = PGSQL_STATUS_LONG ] ):mixed | returns the status of a result resource, or the PostgreSQL command completion tag associated with the result 
pg_select ( resource $connection , string $table_name , array $assoc_array [, int $options = PGSQL_DML_EXEC [, int $result_type = PGSQL_ASSOC ]] ):mixed |  Select records that has ids (id=>value)
pg_send_execute ( resource $connection , string $stmtname , array $params ):bool
pg_send_prepare ( resource $connection , string $stmtname , string $query ):bool
pg_send_query_params ( resource $connection , string $query , array $params ):bool
pg_send_query ( resource $connection , string $query ):bool |  Send asynchronous query
pg_set_client_encoding ([ resource $connection ], string $encoding ):int |  Set client encoding
pg_set_error_verbosity ([ resource $connection ], $verbosity ):int
pg_socket ( $connection ):resource
pg_trace ( string $pathname [, string $mode = "w" [, resource $connection ]] ):bool |  Enable tracing a PostgreSQL connection
pg_transaction_status(->) pg_transaction_status ( resource $connection ):int
pg_tty ([ resource $connection ] ):string |  Return the tty name associated with the connection
pg_unescape_bytea ( $data ):string |  Unescape binary for bytea type
pg_untrace ([ resource $connection ] ):bool | Stop tracing started by pg_trace(). 
pg_update ( resource $connection , string $table_name , array $data , array $condition [, int $options = PGSQL_DML_EXEC ] ):mixed |  Update table using values (field=>value) and ids (id=>value)
pg_version ([ resource $connection ] ):array |  Returns an array with client, protocol and server version (when available)
pspell_add_to_personal ( int $dictionary_link , string $word ):bool | adds a word to the personal wordlist.
pspell_add_to_session ( int $dictionary_link , string $word ):bool |  adds a word to the wordlist associated with the current session. It is very similar to pspell_add_to_personal() 
pspell_check ( int $dictionary_link , string $word ):bool |  checks the spelling of a word. 
pspell_clear_session ( int $dictionary_link ):bool | clears the current session. The current wordlist becomes blank, and, for example, if you try to save it with pspell_save_wordlist(), nothing happens. 
pspell_config_create ( string $language [, string $spelling [, string $jargon [, string $encoding ]]] ):int |  Create a new config to be used later to create a manager
pspell_config_data_dir ( int $conf , string $directory ):bool
pspell_config_dict_dir ( int $conf , string $directory ):bool
pspell_config_ignore ( int $dictionary_link , int $n ):bool | should be used on a config before calling pspell_new_config(). This function allows short words to be skipped by the spell checker. 
pspell_config_mode ( int $dictionary_link , int $mode ):bool | should be used on a config before calling pspell_new_config(). This function determines how many suggestions will be returned by pspell_suggest(). 
pspell_config_personal ( int $dictionary_link , string $file ):bool |  Use a personal dictionary for this config
pspell_config_repl ( int $dictionary_link , string $file ):bool |  Use a personal dictionary with replacement pairs for this config
pspell_config_runtogether ( int $dictionary_link , $flag ):bool |  Consider run-together words as valid components
pspell_config_save_repl ( int $dictionary_link , $flag ):bool |  Save replacement pairs when personal list is saved for this config
pspell_new_config ( $config ):int | opens up a new dictionary with settings specified in a config, created with pspell_config_create() and modified with pspell_config_*() functions.
pspell_new_personal ( string $personal , string $language [, string $spelling [, string $jargon [, string $encoding [, $mode = 0 ]]]] ):int |  Load a dictionary with a personal wordlist
pspell_new ( string $language [, string $spelling [, string $jargon [, string $encoding [, $mode = 0 ]]]] ):int |  Load a dictionary
pspell_save_wordlist ( int $dictionary_link ):bool | saves the personal wordlist from the current session. The location of files to be saved specified with pspell_config_personal() and (optionally) pspell_config_repl(). 
pspell_store_replacement ( int $dictionary_link , string $misspelled , string $correct ):bool | stores a replacement pair for a word, so that replacement can be returned by pspell_suggest() later.
pspell_suggest ( int $dictionary_link , string $word ):array | pspell_suggest() returns an array of possible spellings for the given word. 
simplexml_import_dom ( DOMNode $node [, string $class_name = "SimpleXMLElement" ] ):SimpleXMLElement | This function takes a node of a DOM document and makes it into a SimpleXML node. This new object can then be used as a native SimpleXML element. 
simplexml_load_file ( string $filename [, string $class_name = "SimpleXMLElement" [, int $options = 0 [, string $ns = "" [, bool $is_prefix = FALSE ]]]] ):SimpleXMLElement | Convert the well-formed XML document in the given file to an object. 
simplexml_load_string ( string $data [, string $class_name = "SimpleXMLElement" [, int $options = 0 [, string $ns = "" [, bool $is_prefix = FALSE ]]]] ):SimpleXMLElement | Takes a well-formed XML string and returns it as an object. 
snmp_get_quick_print ( void ):bool | Returns the current value stored in the UCD Library for quick_print. quick_print is off by default. 
snmp_get_valueretrieval ( void ):int |  Return the method how the SNMP values will be returned
snmp_read_mib ( string $filename ):bool |  Reads and parses a MIB file into the active MIB tree.
snmp_set_enum_print ( int $enum_print ):bool | This function toggles if snmpwalk/snmpget etc. should automatically lookup enum values in the MIB and return them together with their human readable string. 
snmp_set_oid_numeric_print(->) snmp_set_oid_numeric_print ( int $oid_format ):void | This function is an alias of: snmp_set_oid_output_format(). 
snmp_set_oid_output_format ( int $oid_format = SNMP_OID_OUTPUT_MODULE ):bool | sets the output format to be full or numeric. 
snmp_set_quick_print ( $quick_print ):bool |  Return all objects including their respective object id withing the specified one
snmp_set_valueretrieval ( int $method = SNMP_VALUE_LIBRARY ):bool |  Specify the method how the SNMP values will be returned
snmp2_get ( $host , $community , $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] ):string | function is used to read the value of an SNMP object specified by the object_id. 
snmp2_getnext ( $host , $community , $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] ):string | The function is used to read the value of the SNMP object that follows the specified object_id. 
snmp2_real_walk ( string $host , string $community , string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] ):array | The function is used to traverse over a number of SNMP objects starting from object_id and return not only their values but also their object ids. 
snmp2_set ( string $host , string $community , string $object_id , string $type , string $value [, int $timeout = 1000000 [, int $retries = 5 ]] ):bool | is used to set the value of an SNMP object specified by the object_id. 
snmp2_walk ( string $host , string $community , string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] ):array | The function is used to read all the values from an SNMP agent specified by the hostname. 
snmp3_get ( $host , $sec_name , $sec_level , $auth_protocol , $auth_passphrase , $priv_protocol , $priv_passphrase , $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] ):string | The function is used to read the value of an SNMP object specified by the object_id. 
snmp3_getnext ( $host , $sec_name , $sec_level , $auth_protocol , $auth_passphrase , $priv_protocol , $priv_passphrase , $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] ):string | The function is used to read the value of the SNMP object that follows the specified object_id. 
snmp3_real_walk ( string $host , string $sec_name , string $sec_level , string $auth_protocol , string $auth_passphrase , string $priv_protocol , string $priv_passphrase , string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] ):array | The function is used to traverse over a number of SNMP objects starting from object_id and return not only their values but also their object ids. 
snmp3_set ( string $host , string $sec_name , string $sec_level , string $auth_protocol , string $auth_passphrase , string $priv_protocol , string $priv_passphrase , string $object_id , string $type , string $value [, int $timeout = 1000000 [, int $retries = 5 ]] ):bool |  Fetch the value of a SNMP object
snmp3_walk ( string $host , string $sec_name , string $sec_level , string $auth_protocol , string $auth_passphrase , string $priv_protocol , string $priv_passphrase , string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] ):array |  Fetch the value of a SNMP object
snmpget ( $hostname , $community , $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] ):string | The function is used to read the value of an SNMP object specified by the object_id. 
snmpgetnext ( $host , $community , $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] ):string | The function is used to read the value of the SNMP object that follows the specified object_id. 
snmprealwalk ( string $host , string $community , string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] ):array | The function is used to traverse over a number of SNMP objects starting from object_id and return not only their values but also their object ids. 
snmpset ( string $host , string $community , string $object_id , string $type , mixed $value [, int $timeout = 1000000 [, int $retries = 5 ]] ):bool | is used to set the value of an SNMP object specified by the object_id. 
snmpwalk ( string $hostname , string $community , string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] ):array | The function is used to read all the values from an SNMP agent specified by the hostname. 
snmpwalkoid ( string $hostname , string $community , string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] ):array
is_soap_fault ( mixed $object ):bool
use_soap_error_handler ([ $handler = TRUE ] ):bool | This function sets whether or not to use the SOAP error handler in the SOAP server. It will return the previous value.
sodium_add ( string &$val , string $addv ):void
sodium_base642bin ( $b64 , int $id [, $ignore ] ):string
sodium_bin2base64 ( $bin , int $id ):string
sodium_bin2hex ( $bin ):string
sodium_compare ( string $buf1 , string $buf2 ):int
sodium_crypto_aead_aes256gcm_decrypt ( $ciphertext , $ad , $nonce , $key ):string
sodium_crypto_aead_aes256gcm_encrypt ( $msg , $ad , $nonce , $key ):string
sodium_crypto_aead_aes256gcm_is_available ( void ):bool
sodium_crypto_aead_aes256gcm_keygen ( void ):string
sodium_crypto_aead_chacha20poly1305_decrypt ( $ciphertext , $ad , $nonce , $key ):string
sodium_crypto_aead_chacha20poly1305_encrypt ( $msg , $ad , $nonce , $key ):string
sodium_crypto_aead_chacha20poly1305_ietf_decrypt ( $ciphertext , $ad , $nonce , $key ):string
sodium_crypto_aead_chacha20poly1305_ietf_encrypt ( $msg , $ad , $nonce , $key ):string
sodium_crypto_aead_chacha20poly1305_ietf_keygen ( void ):string
sodium_crypto_aead_chacha20poly1305_keygen ( void ):string
sodium_crypto_aead_xchacha20poly1305_ietf_decrypt ( $ciphertext , $ad , $nonce , $key ):string
sodium_crypto_aead_xchacha20poly1305_ietf_encrypt ( $msg , $ad , $nonce , $key ):string
sodium_crypto_aead_xchacha20poly1305_ietf_keygen ( void ):string
sodium_crypto_auth_keygen ( void ):string
sodium_crypto_auth_verify ( string $signature , string $msg , string $key ):bool
sodium_crypto_auth ( $msg , $key ):string
sodium_crypto_box_keypair_from_secretkey_and_publickey ( $secret_key , $public_key ):string
sodium_crypto_box_keypair ( void ):string
sodium_crypto_box_open ( $ciphertext , $nonce , $key ):string
sodium_crypto_box_publickey_from_secretkey ( $key ):string
sodium_crypto_box_publickey ( $key ):string
sodium_crypto_box_seal_open ( $ciphertext , $key ):string
sodium_crypto_box_seal ( $msg , $key ):string
sodium_crypto_box_secretkey ( $key ):string
sodium_crypto_box_seed_keypair ( $key ):string
sodium_crypto_box ( $msg , $nonce , $key ):string
sodium_crypto_generichash_final ( &$state [, int $length = SODIUM_CRYPTO_GENERICHASH_BYTES ] ):string
sodium_crypto_generichash_init ([ $key [, int $length = SODIUM_CRYPTO_GENERICHASH_BYTES ]] ):string
sodium_crypto_generichash_keygen ( void ):string
sodium_crypto_generichash_update ( string &$state , string $msg ):bool
sodium_crypto_generichash ( $msg [, $key [, int $length = SODIUM_CRYPTO_GENERICHASH_BYTES ]] ):string
sodium_crypto_kdf_derive_from_key ( int $subkey_len , int $subkey_id , $context , $key ):string
sodium_crypto_kdf_keygen ( void ):string
sodium_crypto_kx_client_session_keys ( string $client_keypair , string $server_key ):array
sodium_crypto_kx_keypair ( void ):string | Create a new sodium keypair consisting of the the secret key (32 bytes) followed by the public key (32 bytes). 
sodium_crypto_kx_publickey ( $key ):string
sodium_crypto_kx_secretkey ( $key ):string
sodium_crypto_kx_seed_keypair ( $):string
sodium_crypto_kx_server_session_keys ( string $server_keypair , string $client_key ):array
sodium_crypto_pwhash_scryptsalsa208sha256_str_verify ( string $hash , string $password ):bool
sodium_crypto_pwhash_scryptsalsa208sha256_str ( $password , int $opslimit , int $memlimit ):string
sodium_crypto_pwhash_scryptsalsa208sha256 ( int $length , $password , $salt , int $opslimit , int $memlimit ):string
sodium_crypto_pwhash_str_needs_rehash ( string $password , int $opslimit , int $memlimit ):bool
sodium_crypto_pwhash_str_verify ( string $hash , string $password ):bool
sodium_crypto_pwhash_str ( $password , int $opslimit , int $memlimit ):string
sodium_crypto_pwhash ( int $length , $password , $salt , int $opslimit , int $memlimit [, int $alg ] ):string
sodium_crypto_scalarmult_base(->) function is an alias of: sodium_crypto_box_publickey_from_secretkey(). :This
sodium_crypto_scalarmult ( $n , $p ):string
sodium_crypto_secretbox_keygen ( void ):string
sodium_crypto_secretbox_open ( $ciphertext , $nonce , $key ):string
sodium_crypto_secretbox ( $, $nonce , $key ):string
sodium_crypto_secretstream_xchacha20poly1305_init_pull ( $header , $key ):string
sodium_crypto_secretstream_xchacha20poly1305_init_push ( string $key ):array
sodium_crypto_secretstream_xchacha20poly1305_keygen ( void ):string
sodium_crypto_secretstream_xchacha20poly1305_pull ( string &$state , string $c [, string $ad ] ):array
sodium_crypto_secretstream_xchacha20poly1305_push ( &$state , $msg [, $ad [, int $tag ]] ):string
sodium_crypto_secretstream_xchacha20poly1305_rekey ( string &$state ):void
sodium_crypto_shorthash_keygen ( void ):string
sodium_crypto_shorthash ( $msg , $key ):string
sodium_crypto_sign_detached ( $msg , $keypair ):string
sodium_crypto_sign_ed25519_pk_to_curve25519 ( $key ):string
sodium_crypto_sign_ed25519_sk_to_curve25519 ( $key ):string
sodium_crypto_sign_keypair_from_secretkey_and_publickey ( $secret_key , $public_key ):string
sodium_crypto_sign_keypair ( void ):string
sodium_crypto_sign_open ( $, $keypair ):string
sodium_crypto_sign_publickey_from_secretkey ( $key ):string
sodium_crypto_sign_publickey ( $keypair ):string
sodium_crypto_sign_secretkey ( $key ):string
sodium_crypto_sign_seed_keypair ( $key ):string
sodium_crypto_sign_verify_detached ( string $signature , string $msg , string $key ):bool
sodium_crypto_sign ( $msg , $secret_key ):string
sodium_crypto_stream_keygen ( void ):string
sodium_crypto_stream_xor ( $msg , $nonce , $key ):string
sodium_crypto_stream ( int $length , $nonce , $key ):string
sodium_hex2bin ( $hex [, $ignore ] ):string
sodium_increment ( string &$val ):void
sodium_memcmp ( string $buf1 , string $buf2 ):int
sodium_memzero ( string &$buf ):void
sodium_pad ( $unpadded , int $length ):string
sodium_unpad ( $padded , int $length ):string
sybase_affected_rows ([ resource $link_identifier ] ):int |  Get number of affected rows in last query
sybase_close ([ resource $link_identifier ] ):bool |  Close Sybase connection
sybase_connect ([ string $servername [, string $username [, string $password [, string $charset [, string $appname [, bool $new = FALSE ]]]]]] ):resource |  Open Sybase server connection
sybase_data_seek ( resource $result_identifier , int $row_number ):bool | moves the internal row pointer of the Sybase result associated with the specified result identifier to pointer to the specified row number. 
sybase_deadlock_retry_count ( int $retry_count ):void | by using that function, the number of retries can be defined in cases of deadlocks. 
sybase_fetch_( resource $result ):array |  Fetch row as array
sybase_fetch_assoc ( resource $result ):array |  Fetch row as array without numberic indices
sybase_fetch_field ( resource $result [, int $field_offset = -1 ] ):object | can be used in order to obtain information about fields in a certain query result. 
sybase_fetch_( resource $result [, mixed $] ):object |  Fetch row as object
sybase_fetch_row ( resource $result ):array |  Get row as enumerated array
sybase_field_seek ( resource $result , int $field_offset ):bool | Seeks to the specified field offset. If the next call to sybase_fetch_field() won't include a field offset, this field would be returned. 
sybase_free_result ( resource $result ):bool | You may call that fn with the result identifier as an argument and the associated result memory will be freed. 
sybase_get_last_message ( void ):string | returns the last message reported by the server. 
sybase_min_client_severity ( int $severity ):void | sets the minimum client severity level. 
sybase_min_error_severity ( int $severity ):void | sets the minimum error severity level. 
sybase_min_message_severity ( int $severity ):void | sets the minimum message severity level. 
sybase_min_server_severity ( int $severity ):void | sets the minimum server severity level. 
sybase_num_fields ( resource $result ):int | returns the number of fields in a result set. 
sybase_num_rows ( resource $result ):int | returns the number of rows in a result set. 
sybase_pconnect ([ string $servername [, string $username [, string $password [, string $charset [, string $appname ]]]]] ):resource |  Open persistent Sybase connection
sybase_query ( string $query [, resource $link_identifier ] ):mixed | sends a query to the currently active database on the server that's associated with the specified link identifier. 
sybase_result ( resource $result , int $row , mixed $field ):string |  Get result data
sybase_select_db ( string $database_name [, resource $link_identifier ] ):bool |  Select Sybase database
sybase_set_message_handler ( callable $handler [, resource $link_identifier ] ):bool | sets a user function to handle messages generated by the server. 
sybase_unbuffered_query ( string $query , $link_identifier [, bool $store_result ] ):resource |  Send Sybase query
ob_tidyhandler ( $input [, int $mode ] ):string | Callback function for ob_start() to repair the buffer. 
tidy_access_count ( tidy $object ):int | returns the number of accessibility warnings found for the specified document. 
tidy_config_count ( tidy $object ):int | Returns the number of errors encountered in the configuration of the specified tidy object. 
tidy_error_count ( tidy $object ):int | Returns the number of Tidy errors encountered for the specified document. 
tidy_get_output ( tidy $object ):string | Gets a string with the repaired html. 
tidy_warning_count ( tidy $object ):int | Returns the number of Tidy warnings encountered for the specified document. 
odbc_autocommit ( resource $connection_id [, bool $OnOff = FALSE ] ):mixed |  Toggle autocommit mode or get status
odbc_binmode ( resource $result_id , int $mode ):bool |  Handle binary column data
odbc_close_all ( ):void | will close down all connections to database server(s). 
odbc_close ( resource $connection_id ):void | Closes down the connection to the database server. 
odbc_columnprivileges ( $connection_id , string $qualifier , string $owner , string $table_name , string $column_name ):resource | Lists columns and associated privileges for the given table. 
odbc_columns ( $connection_id [, string $qualifier [, string $schema [, string $table_name [, string $column_name ]]]] ):resource | Lists all columns in the requested range. 
odbc_commit ( resource $connection_id ):bool | Commits all pending transactions on the connection. 
odbc_connect ( string $dsn , string $user , string $password [, int $cursor_type ] ):resource |  Connect to a datasource
odbc_cursor ( resource $result_id ):string | Gets the cursorname for the given result_id. 
odbc_data_source ( resource $connection_id , int $fetch_type ):array | This function will return the list of available DSN (after calling it several times). 
odbc_do(->) function is an alias of: odbc_exec(). :This
odbc_error ([ resource $connection_id ] ):string | Returns a six-digit ODBC state, or an empty string if there has been no errors. 
odbc_errormsg ([ resource $connection_id ] ):string | Returns a string containing the last ODBC error message, or an empty string if there has been no errors. 
odbc_exec ( $connection_id , string $query_string [, int $flags ] ):resource | Sends an SQL statement to the database server. 
odbc_execute ( resource $result_id [, array $parameters_array ] ):bool | Executes a statement prepared with odbc_prepare(). 
odbc_fetch_( resource $result [, int $rownumber ] ):array | Fetch an associative array from an ODBC query. 
odbc_fetch_into ( resource $result_id , array &$result_array [, $rownumber ] ):int | Fetch one result row into array. 
odbc_fetch_( resource $result [, int $rownumber ] ):object | Fetch an object from an ODBC query. 
odbc_fetch_row ( resource $result_id [, int $row_number = 1 ] ):bool | Fetches a row of the data that was returned by odbc_do() or odbc_exec(). 
odbc_field_len ( resource $result_id , $field_number ):int | Gets the length of the field referenced by number in the given result identifier. 
odbc_field_name ( resource $result_id , int $field_number ):string | Gets the name of the field occupying the given column number in the given result identifier. 
odbc_field_num ( resource $result_id , string $field_name ):int | Gets the number of the column slot that corresponds to the named field in the given result identifier. 
odbc_field_precision(->) function is an alias of: odbc_field_len(). :This
odbc_field_scale ( resource $result_id , $field_number ):int | Gets the scale of the field referenced by number in the given result identifier. 
odbc_field_type ( resource $result_id , int $field_number ):string | Gets the SQL type of the field referenced by number in the given result identifier. 
odbc_foreignkeys ( $connection_id , string $pk_qualifier , string $pk_owner , string $pk_table , string $fk_qualifier , string $fk_owner , string $fk_table ):resource | Retrieves a list of foreign keys in the specified table or a list of foreign keys in other tables that refer to the primary key in the specified table 
odbc_free_result ( resource $result_id ):bool |  Free resources associated with a result
odbc_gettypeinfo ( $connection_id [, int $data_type ] ):resource | Retrieves information about data types supported by the data source. 
odbc_longreadlen ( resource $result_id , int $length ):bool | Enables handling of LONG and LONGVARBINARY columns. 
odbc_next_result ( resource $result_id ):bool | Checks if there are more result sets available as well as allowing access to the next result set via odbc_fetch_array(), odbc_fetch_row(), odbc_result(), etc. 
odbc_num_fields ( resource $result_id ):int | Gets the number of fields (columns) in an ODBC result. 
odbc_num_rows ( resource $result_id ):int | Gets the number of rows in a result. For INSERT, UPDATE and DELETE statements odbc_num_rows() returns the number of rows affected. For a SELECT clause this can be the number of rows available. 
odbc_pconnect ( string $dsn , string $user , string $password [, int $cursor_type ] ):resource |  Establish a persistent connection to a datasource
odbc_prepare ( $connection_id , string $query_string ):resource |  Prepares a statement for execution
odbc_primarykeys ( $connection_id , string $qualifier , string $owner , string $table ):resource | Returns a result identifier that can be used to fetch the column names that comprise the primary key for a table. 
odbc_procedurecolumns ( $connection_id ):resource |  Returns a result identifier containing the list of input and output parameters, as well as the columns that make up the result set for the specified procedures
odbc_procedures ( $connection_id ):resource |  Returns a result identifier containg the list of procedure names in a datasource
odbc_result_all ( resource $result_id [, string $format ] ):int | Prints all rows from a result identifier produced by odbc_exec(). The result is printed in HTML table format. 
odbc_result ( resource $result_id , $field ):mixed | Get result data 
odbc_rollback ( resource $connection_id ):bool | Rolls back all pending statements on the connection. 
odbc_setoption ( resource $id , int $function , int $option , int $param ):bool |  Sets connection or statement options
odbc_specialcolumns ( $connection_id , int $type , string $qualifier , string $table , int $scope , int $nullable ):resource | Retrieves either the optimal set of columns that uniquely identifies a row in the table, or columns that are automatically updated when any value in the row is updated by a transaction. 
odbc_statistics ( $connection_id , string $qualifier , string $owner , string $table_name , int $unique , int $accuracy ):resource | Get statistics about a table and its indexes. 
odbc_tableprivileges ( $connection_id , string $qualifier , string $owner , string $name ):resource | Lists tables in the requested range and the privileges associated with each table. 
odbc_tables ( $connection_id [, string $qualifier [, string $owner [, string $name [, string $types ]]]] ):resource |  Call the SQLTables function
wddx_add_vars ( resource $packet_id , mixed $var_name [, mixed $... ] ):bool | Serializes the passed variables and add the result to the given packet. 
wddx_deserialize ( string $packet ):mixed |  | Deserializes given packet and returns a PHP value
wddx_packet_end ( resource $packet_id ):string | Ends and returns the given WDDX packet. 
wddx_packet_start ([ string $comment ] ):resource | Start a new WDDX packet for incremental addition of variables. 
wddx_serialize_value ( mixed $var [, $comment ] ):string | Creates a WDDX packet from a single given value. 
wddx_serialize_vars ( mixed $var_name [, mixed $... ] ):string | Creates a WDDX packet with a structure that contains the serialized representation of the passed variables. 
utf8_decode ( $data ):string |  | Converts a UTF-8 encoded string to ISO-8859-1
utf8_encode ( $data ):string |  | Encodes an ISO-8859-1 string to UTF-8
xml_error_( int $code ):string | Gets the XML parser error string associated with the given code. 
xml_get_current_byte_index ( resource $parser ):int | Gets the current byte index of the given XML parser. 
xml_get_current_column_number ( resource $parser ):int | Gets the current column number of the given XML parser. 
xml_get_current_line_number ( resource $parser ):int | Gets the current line number for the given XML parser. 
xml_get_error_code ( resource $parser ):int | Gets the XML parser error code. 
xml_parse_into_struct ( resource $parser , string $data , array &$values [, array &$index ] ):int | This function parses an XML string into 2 parallel array structures, one (index) containing pointers to the location of the appropriate values in the values array.
xml_parse ( resource $parser , string $data [, bool $is_final = FALSE ] ):int | parses an XML document. The handlers for the configured events are called as many times as necessary. 
xml_parser_create_ns ([ string $encoding [, string $separator = ":" ]] ):resource | creates a new XML parser with XML namespace support and returns a resource handle referencing it to be used by the other XML functions. 
xml_parser_create ([ string $encoding ] ):resource | creates a new XML parser and returns a resource handle referencing it to be used by the other XML functions. 
xml_parser_free ( resource $parser ):bool |  | Free an XML parser
xml_parser_get_option ( resource $parser , int $option ):mixed | Gets an option value from an XML parser. 
xml_parser_set_option ( resource $parser , int $option , mixed $value ):bool | Sets an option in an XML parser. 
xml_set_character_data_handler ( resource $parser , callable $handler ):bool | Sets the character data handler function for the XML parser parser. 
xml_set_default_handler ( resource $parser , callable $handler ):bool | Sets the default handler function for the XML parser parser. 
xml_set_element_handler ( resource $parser , callable $start_element_handler , callable $end_element_handler ):bool | Sets the element handler functions for the XML parser. 
xml_set_end_namespace_decl_handler ( resource $parser , callable $handler ):bool |  | Set up character data handler
xml_set_external_entity_ref_handler ( resource $parser , callable $handler ):bool | Sets the external entity reference handler function for the XML parser parser. 
xml_set_notation_decl_handler ( resource $parser , callable $handler ):bool |  | Set up notation declaration handler
xml_set_object ( resource $parser , object &$object ):bool | This function allows to use parser inside object. All callback functions could be set with xml_set_element_handler() etc and assumed to be methods of object. 
xml_set_processing_instruction_handler ( resource $parser , callable $handler ):bool |  | Set up processing instruction (PI) handler
xml_set_start_namespace_decl_handler ( resource $parser , callable $handler ):bool | Set a handler to be called when a namespace is declared. Namespace declarations occur inside start tags.
xml_set_unparsed_entity_decl_handler ( resource $parser , callable $handler ):bool |  | Set up unparsed entity declaration handler
zip_close ( resource $zip ):void | Closes the given ZIP file archive. 
zip_entry_close ( resource $zip_entry ):bool | Closes the specified directory entry. 
zip_entry_compressedsize ( resource $zip_entry ):int | Returns the compressed size of the specified directory entry. 
zip_entry_compressionmethod ( resource $zip_entry ):string | Returns the compression method of the directory entry specified by zip_entry. 
zip_entry_filesize ( resource $zip_entry ):int | Returns the actual size of the specified directory entry. 
zip_entry_name ( resource $zip_entry ):string | Returns the name of the specified directory entry. 
zip_entry_open ( resource $zip , resource $zip_entry [, string $mode ] ):bool | Opens a directory entry in a zip file for reading. 
zip_entry_read ( resource $zip_entry [, int $length = 1024 ] ):string | Reads from an open directory entry. 
zip_open ( string $filename ):resource | Opens a new zip archive for reading. 
zip_read ( $zip ):resource | Reads the next entry in a zip file archive. 

