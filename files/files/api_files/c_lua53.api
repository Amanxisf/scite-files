###
# Functions lua_*
##
lua_absindex(lua_State *L, int idx)\nint [-0, +0, -]
lua_arith(lua_State *L, int op)\nvoid [-(2|1), +1, e]
lua_atpanic(lua_State *L, lua_CFunction panicf)\nlua_CFunction [-0, +0, -]
lua_call(lua_State *L, int nargs, int nresults)\nvoid [-(nargs+1), +nresults, e]
lua_callk(lua_State *L, int nargs, int nresults, lua_KContext ctx, lua_KFunction k)\nvoid [-(nargs + 1), +nresults, e]
lua_checkstack(lua_State *L, int n)\nint [-0, +0, -]
lua_close(lua_State *L)\nvoid [-0, +0, -]
lua_compare(lua_State *L, int index1, int index2, int op)\nint [-0, +0, e]
lua_concat(lua_State *L, int n)\nvoid [-n, +1, e]
lua_copy(lua_State *L, int fromidx, int toidx)\nvoid [-0, +0, -]
lua_createtable(lua_State *L, int narr, int nrec)\nvoid [-0, +1, m]
lua_dump(lua_State *L, lua_Writer writer, void *data, int strip)\nint [-0, +0, -]
lua_error(lua_State *L)\nint [-1, +0, v]
lua_gc(lua_State *L, int what, int data)\nint [-0, +0, m]
lua_getallocf(lua_State *L, void **ud)\nlua_Alloc [-0, +0, -]
lua_getfield(lua_State *L, int index, const char *k)\nint [-0, +1, e]
lua_getextraspace(lua_State *L)\nvoid* [-0, +0, -]
lua_getglobal(lua_State *L, const char *name)\nint [-0, +1, e]
lua_geti(lua_State *L, int index, lua_Integer i)\nint [-0, +1, e]
lua_getmetatable(lua_State *L, int index)\nint [-0, +(0|1), -]
lua_gettable(lua_State *L, int index)\nint [-1, +1, e]
lua_gettop(lua_State *L)\nint [-0, +0, -]
lua_getuservalue(lua_State *L, int index)\nint [-0, +1, -]
lua_insert(lua_State *L, int index)\nvoid [-1, +1, -]
lua_isboolean(lua_State *L, int index)\nint [-0, +0, -]
lua_iscfunction(lua_State *L, int index)\nint [-0, +0, -]
lua_isfunction(lua_State *L, int index)\nint [-0, +0, -]
lua_isinteger(lua_State *L, int index)\nint [-0, +0, -]
lua_islightuserdata(lua_State *L, int index)\nint [-0, +0, -]
lua_isnil(lua_State *L, int index)\nint [-0, +0, -]
lua_isnone(lua_State *L, int index)\nint [-0, +0, -]
lua_isnoneornil(lua_State *L, int index)\nint [-0, +0, -]
lua_isnumber(lua_State *L, int index)\nint [-0, +0, -]
lua_isstring(lua_State *L, int index)\nint [-0, +0, -]
lua_istable(lua_State *L, int index)\nint [-0, +0, -]
lua_isthread(lua_State *L, int index)\nint [-0, +0, -]
lua_isuserdata(lua_State *L, int index)\nint [-0, +0, -]
lua_isyieldable(lua_State *L)\nint [-0, +0, -]
lua_len(lua_State *L, int index)\nvoid [-0, +1, e]
lua_load(lua_State *L, lua_Reader reader, void *data, const char *chunkname, const char *mode)\nint [-0, +1, -]
lua_newstate(lua_Alloc f, void *ud)\nlua_State* [-0, +0, -]
lua_newtable(lua_State *L)\nvoid [-0, +1, m]
lua_newthread(lua_State *L)\nlua_State* [-0, +1, m]
lua_newuserdata(lua_State *L, size_t size)\nvoid* [-0, +1, m]
lua_next(lua_State *L, int index)\nint [-1, +(2|0), e]
lua_pcall(lua_State *L, int nargs, int nresults, int msgh)\nint [-(nargs + 1), +(nresults|1), -]
lua_pcallk(lua_State *L, int nargs, int nresults, int msgh, lua_KContext ctx, lua_KFunction k)\nint [-(nargs + 1), +(nresults|1), -]
lua_pop(lua_State *L, int n)\nvoid [-n, +0, -]
lua_pushboolean(lua_State *L, int b)\nvoid [-0, +1, -]
lua_pushcclosure(lua_State *L, lua_CFunction fn, int n)\nvoid [-n, +1, m]
lua_pushcfunction(lua_State *L, lua_CFunction f)\nvoid [-0, +1, -]
lua_pushfstring(lua_State *L, const char *fmt, ...)\nconst char* [-0, +1, e]
lua_pushglobaltable(lua_State *L)\nvoid [-0, +1, -]
lua_pushinteger(lua_State *L, lua_Integer n)\nvoid [-0, +1, -]
lua_pushlightuserdata(lua_State *L, void *p)\nvoid [-0, +1, -]
lua_pushliteral(lua_State *L, const char *s)\nconst char* [-0, +1, m]
lua_pushlstring(lua_State *L, const char *s, size_t len)\nconst char* [-0, +1, m]
lua_pushnil(lua_State *L)\nvoid [-0, +1, -]
lua_pushnumber(lua_State *L, lua_Number n)\nvoid [-0, +1, -]
lua_pushstring(lua_State *L, const char *s)\nconst char* [-0, +1, m]
lua_pushthread(lua_State *L)\nint [-0, +1, -]
lua_pushvalue(lua_State *L, int index)\nvoid [-0, +1, -]
lua_pushvfstring(lua_State *L, const char *fmt, va_list argp)\nconst char* [-0, +1, m]
lua_rawequal(lua_State *L, int index1, int index2)\nint [-0, +0, -]
lua_rawget(lua_State *L, int index)\nint [-1, +1, -]
lua_rawgeti(lua_State *L, int index, lua_Integer n)\nint [-0, +1, -]
lua_rawgetp(lua_State *L, int index, const void *p)\nint [-0, +1, -]
lua_rawlen(lua_State *L, int index)\nsize_t [-0, +0, -]
lua_rawset(lua_State *L, int index)\nvoid [-2, +0, m]
lua_rawseti(lua_State *L, int index, lua_Integer i)\nvoid [-1, +0, m]
lua_rawsetp(lua_State *L, int index, const void *p)\nvoid [-1, +0, m]
lua_register(lua_State *L, const char *name, lua_CFunction f)\nvoid [-0, +0, e]
lua_remove(lua_State *L, int index)\nvoid [-1, +0, -]
lua_replace(lua_State *L, int index)\nvoid [-1, +0, -]
lua_resume(lua_State *L, lua_State *from, int nargs)\nint [-?, +?, -]
lua_rotate(lua_State *L, int idx, int n)\nvoid [-0, +0, -]
lua_setallocf(lua_State *L, lua_Alloc f, void *ud)\nvoid [-0, +0, -]
lua_setfield(lua_State *L, int index, const char *k)\nvoid [-1, +0, e]
lua_setglobal(lua_State *L, const char *name)\nvoid [-1, +0, e]
lua_seti(lua_State *L, int index, lua_Integer n)\nvoid [-1, +0, e]
lua_setmetatable(lua_State *L, int index)\nvoid [-1, +0, -]
lua_settable(lua_State *L, int index)\nvoid [-2, +0, e]
lua_settop(lua_State *L, int index)\nvoid [-?, +?, -]
lua_setuservalue(lua_State *L, int index)\nvoid [-1, +0, -]
lua_status(lua_State *L)\nint [-0, +0, -]
lua_stringtonumber(lua_State *L, const char *s)\nsize_t [-0, +1, -]
lua_toboolean(lua_State *L, int index)\nint [-0, +0, -]
lua_tocfunction(lua_State *L, int index)\nlua_CFunction [-0, +0, -]
lua_tointeger(lua_State *L, int index)\nlua_Integer [-0, +0, -]
lua_tointegerx(lua_State *L, int index, int *isnum)\nlua_Integer [-0, +0, -]
lua_tolstring(lua_State *L, int index, size_t *len)\nconst char* [-0, +0, m]
lua_tonumber(lua_State *L, int index)\nlua_Number [-0, +0, -]
lua_tonumberx(lua_State *L, int index, int *isnum)\nlua_Number [-0, +0, -]
lua_topointer(lua_State *L, int index)\nconst void* [-0, +0, -]
lua_tostring(lua_State *L, int index)\nconst char* [-0, +0, m]
lua_tothread(lua_State *L, int index)\nlua_State* [-0, +0, -]
lua_touserdata(lua_State *L, int index)\nvoid* [-0, +0, -]
lua_type(lua_State *L, int index)\nint [-0, +0, -]
lua_typename(lua_State *L, int tp)\nconst char* [-0, +0, -]
lua_upvalueindex(int i)\nint [-0, +0, -]
lua_version(lua_State *L)\nconst lua_Number* [-0, +0, -]
lua_xmove(lua_State *from, lua_State *to, int n)\nvoid [-?, +?, -]
lua_yield(lua_State *L, int nresults)\nint [-?, +?, e]
lua_yieldk(lua_State *L, int nresults, lua_KContext ctx, lua_KFunction k)\nint [-?, +?, e]
lua_gethook(lua_State *L)\nlua_Hook [-0, +0, -]
lua_gethookcount(lua_State *L)\nint [-0, +0, -]
lua_gethookmask(lua_State *L)\nint [-0, +0, -]
lua_getinfo(lua_State *L, const char *what, lua_Debug *ar)\nint [-(0|1), +(0|1|2), e]
lua_getlocal(lua_State *L, const lua_Debug *ar, int n)\nconst char* [-0, +(0|1), -]
lua_getstack(lua_State *L, int level, lua_Debug *ar)\nint [-0, +0, -]
lua_getupvalue(lua_State *L, int funcindex, int n)\nconst char* [-0, +(0|1), -]
lua_sethook(lua_State *L, lua_Hook f, int mask, int count)\nvoid [-0, +0, -]
lua_setlocal(lua_State *L, const lua_Debug *ar, int n)\nconst char* [-(0|1), +0, -]
lua_setupvalue(lua_State *L, int funcindex, int n)\nconst char* [-(0|1), +0, -]
lua_upvalueid(lua_State *L, int funcindex, int n)\nvoid* [-0, +0, -]
lua_upvaluejoin(lua_State *L, int funcindex1, int n1, int funcindex2, int n2)\nvoid [-0, +0, -]

###
# Functions luaL_*
##
luaL_addchar(luaL_Buffer *B, char c)\nvoid [-?, +?, m]
luaL_addlstring(luaL_Buffer *B, const char *s, size_t l)\nvoid [-?, +?, m]
luaL_addsize(luaL_Buffer *B, size_t n)\nvoid [-?, +?, -]
luaL_addstring(luaL_Buffer *B, const char *s)\nvoid [-?, +?, m]
luaL_addvalue(luaL_Buffer *B)\nvoid [-1, +?, m]
luaL_argcheck(lua_State *L, int cond, int arg, const char *extramsg)\nvoid [-0, +0, v]
luaL_argerror(lua_State *L, int arg, const char *extramsg)\nint [-0, +0, v]
luaL_buffinit(lua_State *L, luaL_Buffer *B)\nvoid [-0, +0, -]
luaL_buffinitsize(lua_State *L, luaL_Buffer *B, size_t sz)\nchar* [-?, +?, m]
luaL_callmeta(lua_State *L, int obj, const char *e)\nint [-0, +(0|1), e]
luaL_checkany(lua_State *L, int arg)\nvoid [-0, +0, v]
luaL_checkinteger(lua_State *L, int arg)\nlua_Integer [-0, +0, v]
luaL_checklstring(lua_State *L, int arg, size_t *l)\nconst char* [-0, +0, v]
luaL_checknumber(lua_State *L, int arg)\nlua_Number [-0, +0, v]
luaL_checkoption(lua_State *L, int arg, const char *def, const char *const lst[])\nint [-0, +0, v]
luaL_checkstack(lua_State *L, int sz, const char *msg)\nvoid [-0, +0, v]
luaL_checkstring(lua_State *L, int arg)\nconst char* [-0, +0, v]
luaL_checktype(lua_State *L, int arg, int t)\nvoid [-0, +0, v]
luaL_checkudata(lua_State *L, int arg, const char *tname)\nvoid* [-0, +0, v]
luaL_checkversion(lua_State *L)\nvoid [-0, +0, v]
luaL_dofile(lua_State *L, const char *filename)\nint [-0, +?, e]
luaL_dostring(lua_State *L, const char *str)\nint [-0, +?, -]
luaL_error(lua_State *L, const char *fmt, ...)\nint [-0, +0, v]
luaL_execresult(lua_State *L, int stat)\nint [-0, +3, m]
luaL_fileresult(lua_State *L, int stat, const char *fname)\nint [-0, +(1|3), m]
luaL_getmetafield(lua_State *L, int obj, const char *e)\nint [-0, +(0|1), m]
luaL_getmetatable(lua_State *L, const char *tname)\nint [-0, +1, m]
luaL_getsubtable(lua_State *L, int idx, const char *fname)\nint [-0, +1, e]
luaL_gsub(lua_State *L, const char *s, const char *p, const char *r)\nconst char* [-0, +1, m]
luaL_len(lua_State *L, int index)\nlua_Integer [-0, +0, e]
luaL_loadbuffer(lua_State *L, const char *buff, size_t sz, const char *name)\nint [-0, +1, -]
luaL_loadbufferx(lua_State *L, const char *buff, size_t sz, const char *name, const char *mode)\nint [-0, +1, -]
luaL_loadfile(lua_State *L, const char *filename)\nint [-0, +1, m]
luaL_loadfilex(lua_State *L, const char *filename, const char *mode)\nint [-0, +1, m]
luaL_loadstring(lua_State *L, const char *s)\nint [-0, +1, -]
luaL_newlib(lua_State *L, const luaL_Reg l[])\nvoid [-0, +1, m]
luaL_newlibtable(lua_State *L, const luaL_Reg l[])\nvoid [-0, +1, m]
luaL_newmetatable(lua_State *L, const char *tname)\nint [-0, +1, m]
luaL_newstate(void)\nlua_State* [-0, +0, -]
luaL_openlibs(lua_State *L)\nvoid [-0, +0, e]
luaL_opt(L, func, arg, dflt)\nT [-0, +0, e]
luaL_optinteger(lua_State *L, int arg, lua_Integer d)\nlua_Integer [-0, +0, v]
luaL_optlstring(lua_State *L, int arg, const char *d, size_t *l)\nconst char* [-0, +0, v]
luaL_optnumber(lua_State *L, int arg, lua_Number d)\nlua_Number [-0, +0, v]
luaL_optstring(lua_State *L, int arg, const char *d)\nconst char* [-0, +0, v]
luaL_prepbuffer(luaL_Buffer *B)\nchar* [-?, +?, m]
luaL_prepbuffsize(luaL_Buffer *B, size_t sz)\nchar* [-?, +?, m]
luaL_pushresult(luaL_Buffer *B)\nvoid [-?, +1, m]
luaL_pushresultsize(luaL_Buffer *B, size_t sz)\nvoid [-?, +1, m]
luaL_ref(lua_State *L, int t)\nint [-1, +0, m]
luaL_requiref(lua_State *L, const char *modname, lua_CFunction openf, int glb)\nvoid [-0, +1, e]
luaL_setfuncs(lua_State *L, const luaL_Reg *l, int nup)\nvoid [-nup, +0, m]
luaL_setmetatable(lua_State *L, const char *tname)\nvoid [-0, +0, -]
luaL_testudata(lua_State *L, int arg, const char *tname)\nvoid* [-0, +0, m]
luaL_tolstring(lua_State *L, int idx, size_t *len)\nconst char* [-0, +1, e]
luaL_traceback(lua_State *L, lua_State *L1, const char *msg, int level)\nvoid [-0, +1, m]
luaL_typename(lua_State *L, int index)\nconst char* [-0, +0, -]
luaL_unref(lua_State *L, int t, int ref)\nvoid [-0, +0, -]
luaL_where(lua_State *L, int lvl)\nvoid [-0, +1, m]

###
# Structs/Types lua_*
##
lua_Alloc
lua_CFunction
lua_Debug
lua_Hook
lua_Integer
lua_KContext
lua_KFunction
lua_Number
lua_Reader
lua_State
lua_Unsigned
lua_Writer

###
# Structs/Types luaL_*
##
luaL_Buffer
luaL_Reg
luaL_Stream

###
# Constants LUA_*
##
LUA_AUTHORS
LUA_COPYRIGHT
LUA_ERRERR
LUA_ERRFILE
LUA_ERRGCMM
LUA_ERRMEM
LUA_ERRRUN
LUA_ERRSYNTAX
LUA_GCSTOP
LUA_GCRESTART
LUA_GCCOLLECT
LUA_GCCOUNT
LUA_GCCOUNTB
LUA_GCSTEP
LUA_GCSETPAUSE
LUA_GCSETSTEPMUL
LUA_GCISRUNNING
LUA_HOOKCALL
LUA_HOOKCOUNT
LUA_HOOKLINE
LUA_HOOKRET
LUA_HOOKTAILCALL
LUA_MASKCALL
LUA_MASKCOUNT
LUA_MASKLINE
LUA_MASKRET
LUA_MAXINTEGER
LUA_MININTEGER
LUA_MINSTACK
LUA_MULTRET
LUA_NOREF
LUA_NUMTAGS
LUA_OK
LUA_OPADD
LUA_OPBAND
LUA_OPBNOT
LUA_OPBOR
LUA_OPBXOR
LUA_OPDIV
LUA_OPEQ
LUA_OPIDIV
LUA_OPLE
LUA_OPLT
LUA_OPMOD
LUA_OPMUL
LUA_OPPOW
LUA_OPSHL
LUA_OPSHR
LUA_OPSUB
LUA_OPUNM
LUA_REFNIL
LUA_REGISTRYINDEX
LUA_RELEASE
LUA_RIDX_GLOBALS
LUA_RIDX_LAST
LUA_RIDX_MAINTHREAD
LUA_SIGNATURE
LUA_TBOOLEAN
LUA_TFUNCTION
LUA_TLIGHTUSERDATA
LUA_TNIL
LUA_TNONE
LUA_TNUMBER
LUA_TSTRING
LUA_TTABLE
LUA_TTHREAD
LUA_TUSERDATA
LUA_USE_APICHECK
LUA_VERSION
LUA_VERSION_MAJOR
LUA_VERSION_MINOR
LUA_VERSION_NUM
LUA_VERSION_RELEASE
LUA_YIELD

##
# Constants LUAL_*
##
LUAL_BUFFERSIZE

###
# Functions luaopen_*
##
luaopen_base(lua_State *L)\nint [-0, +1, m]
#luaopen_bit32(lua_State *L)\nint [-0, +1, e]
luaopen_coroutine(lua_State *L)\nint [-0, +1, m]
luaopen_debug(lua_State *L)\nint [-0, +1, m]
luaopen_io(lua_State *L)\nint [-0, +1, m]
luaopen_math(lua_State *L)\nint [-0, +1, m]
luaopen_os(lua_State *L)\nint [-0, +1, m]
luaopen_package(lua_State *L)\nint [-0, +1, m]
luaopen_string(lua_State *L)\nint [-0, +1, m]
luaopen_table(lua_State *L)\nint [-0, +1, m]
luaopen_utf8(lua_State *L)\nint [-0, +1, m]
